//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		raw.githubusercontent.com/milewg/draft-ietf-mile-jsoniodef/master/converter/iodef-2.0.xsd
package go_Iodef20

//	Incident Object Description Exchange Format v2.0

import (
	"reflect"
	"fmt"
	"encoding/base64"
	eXml "encoding/xml"
	json "encoding/json"
	enum "github.com/metaleap/go-xsd-pkg/www.iana.org/assignments/xml-registry/schema/iodef-enum-1.0.xsd_go"
	sci "github.com/metaleap/go-xsd-pkg/www.iana.org/assignments/xml-registry/schema/iodef-sci-1.0.xsd_go"
	ds "github.com/metaleap/go-xsd-pkg/www.w3.org/TR/2002/REC-xmldsig-core-20020212/xmldsig-core-schema.xsd_go"
	xml "github.com/metaleap/go-xsd-pkg/www.w3c.org/2001/xml.xsd_go"
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdGoPkgHasAttr_Formatid_XsdtString_ struct {
	Formatid *xsdt.String `json:"formatid,omitempty" xml:" formatid,attr,omitempty"`
}

type TrestrictionType xsdt.Nmtoken

//	Since TrestrictionType is just a simple String type, this merely returns the current string value.
func (me TrestrictionType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TrestrictionType's alias type xsdt.Nmtoken.
func (me TrestrictionType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TrestrictionType is "public".
func (me TrestrictionType) IsPublic() bool { return me.String() == "public" }

//	Returns true if the value of this enumerated TrestrictionType is "need-to-know".
func (me TrestrictionType) IsNeedToKnow() bool { return me.String() == "need-to-know" }

//	Returns true if the value of this enumerated TrestrictionType is "white".
func (me TrestrictionType) IsWhite() bool { return me.String() == "white" }

//	Returns true if the value of this enumerated TrestrictionType is "green".
func (me TrestrictionType) IsGreen() bool { return me.String() == "green" }

//	Returns true if the value of this enumerated TrestrictionType is "amber".
func (me TrestrictionType) IsAmber() bool { return me.String() == "amber" }

//	Returns true if the value of this enumerated TrestrictionType is "red".
func (me TrestrictionType) IsRed() bool { return me.String() == "red" }

//	Returns true if the value of this enumerated TrestrictionType is "ext-value".
func (me TrestrictionType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TrestrictionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TrestrictionType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TrestrictionType is "default".
func (me TrestrictionType) IsDefault() bool { return me.String() == "default" }

//	Returns true if the value of this enumerated TrestrictionType is "partner".
func (me TrestrictionType) IsPartner() bool { return me.String() == "partner" }

//	Returns true if the value of this enumerated TrestrictionType is "private".
func (me TrestrictionType) IsPrivate() bool { return me.String() == "private" }

type XsdGoPkgHasAttr_Restriction_TrestrictionType_ struct {
	Restriction *TrestrictionType `json:"restriction,omitempty" xml:" restriction,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExtRestriction_XsdtString_ struct {
	ExtRestriction *xsdt.String `json:"ext-restriction,omitempty" xml:" ext-restriction,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExtDtype_XsdtString_ struct {
	ExtDtype *xsdt.String `json:"ext-dtype,omitempty" xml:" ext-dtype,attr,omitempty"`
}

type XsdGoPkgHasAttr_Meaning_XsdtString_ struct {
	Meaning *xsdt.String `json:"meaning,omitempty" xml:" meaning,attr,omitempty"`
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `json:",omitempty" xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata_Id struct {
	Id string `json:"id,omitempty" xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata_Id function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata_Id) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata_Id; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata_Value struct {
	Value string `json:"value,omitempty" xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata_Value) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata_Value; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata_Value_Number struct {
	Value float64 `json:"value,omitempty" xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata_Value_Number) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata_Value_Number; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata_Handle struct {
	Handle string `json:"handle,omitempty" xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata_Handle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata_Handle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ObservableId_XsdtId_ struct {
	ObservableId *xsdt.Id `json:"observable-id,omitempty" xml:" observable-id,attr,omitempty"`
}

type XsdGoPkgHasAttr_Name_XsdtString_ struct {
	Name *xsdt.String `json:"name,omitempty" xml:" name,attr,omitempty"`
}

type XsdGoPkgHasAttr_Name_XsdtString_Capitalized struct {
	Name *xsdt.String `json:"Name,omitempty" xml:" name,attr,omitempty"`
}


type TdtypeType xsdt.Nmtoken

//	Returns true if the value of this enumerated TdtypeType is "xml".
func (me TdtypeType) IsXml() bool { return me.String() == "xml" }

//	Since TdtypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TdtypeType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TdtypeType is "boolean".
func (me TdtypeType) IsBoolean() bool { return me.String() == "boolean" }

//	Returns true if the value of this enumerated TdtypeType is "integer".
func (me TdtypeType) IsInteger() bool { return me.String() == "integer" }

//	Returns true if the value of this enumerated TdtypeType is "portlist".
func (me TdtypeType) IsPortlist() bool { return me.String() == "portlist" }

//	Returns true if the value of this enumerated TdtypeType is "url".
func (me TdtypeType) IsUrl() bool { return me.String() == "url" }

//	Returns true if the value of this enumerated TdtypeType is "winreg".
func (me TdtypeType) IsWinreg() bool { return me.String() == "winreg" }

//	Returns true if the value of this enumerated TdtypeType is "file".
func (me TdtypeType) IsFile() bool { return me.String() == "file" }

//	Returns true if the value of this enumerated TdtypeType is "path".
func (me TdtypeType) IsPath() bool { return me.String() == "path" }

//	Since TdtypeType is just a simple String type, this merely returns the current string value.
func (me TdtypeType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TdtypeType's alias type xsdt.Nmtoken.
func (me TdtypeType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TdtypeType is "byte".
func (me TdtypeType) IsByte() bool { return me.String() == "byte" }

//	Returns true if the value of this enumerated TdtypeType is "character".
func (me TdtypeType) IsCharacter() bool { return me.String() == "character" }

//	Returns true if the value of this enumerated TdtypeType is "date-time".
func (me TdtypeType) IsDateTime() bool { return me.String() == "date-time" }

//	Returns true if the value of this enumerated TdtypeType is "real".
func (me TdtypeType) IsReal() bool { return me.String() == "real" }

//	Returns true if the value of this enumerated TdtypeType is "frame".
func (me TdtypeType) IsFrame() bool { return me.String() == "frame" }

//	Returns true if the value of this enumerated TdtypeType is "ipv4-packet".
func (me TdtypeType) IsIpv4Packet() bool { return me.String() == "ipv4-packet" }

//	Returns true if the value of this enumerated TdtypeType is "ipv6-packet".
func (me TdtypeType) IsIpv6Packet() bool { return me.String() == "ipv6-packet" }

//	Returns true if the value of this enumerated TdtypeType is "csv".
func (me TdtypeType) IsCsv() bool { return me.String() == "csv" }

//	Returns true if the value of this enumerated TdtypeType is "string".
func (me TdtypeType) IsString() bool { return me.String() == "string" }

//	Returns true if the value of this enumerated TdtypeType is "packet".
func (me TdtypeType) IsPacket() bool { return me.String() == "packet" }

//	Returns true if the value of this enumerated TdtypeType is "bytes".
func (me TdtypeType) IsBytes() bool { return me.String() == "bytes" }

//	Returns true if the value of this enumerated TdtypeType is "ntpstamp".
func (me TdtypeType) IsNtpstamp() bool { return me.String() == "ntpstamp" }

//	Returns true if the value of this enumerated TdtypeType is "ext-value".
func (me TdtypeType) IsExtValue() bool { return me.String() == "ext-value" }

type XsdGoPkgHasAttr_Dtype_TdtypeType_ struct {
	Dtype TdtypeType `json:"dtype,omitempty" xml:" dtype,attr,omitempty"`
}

type TExtensionType struct {
	XsdGoPkgHasCdata_Value

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_Dtype_TdtypeType_

	XsdGoPkgHasAttr_ExtDtype_XsdtString_

	XsdGoPkgHasAttr_Meaning_XsdtString_

	XsdGoPkgHasAttr_Formatid_XsdtString_

	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasAttr_ObservableId_XsdtId_
}

//	If the WalkHandlers.TExtensionType function is not nil (ie. was set by outside code), calls it with this TExtensionType instance as the single argument. Then calls the Walk() method on 1/9 embed(s) and 0/0 field(s) belonging to this TExtensionType instance.
func (me *TExtensionType) Walk() (err error) {
	if fn := WalkHandlers.TExtensionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata_Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AdditionalData struct {
	AdditionalDatas []*TExtensionType `json:"AdditionalData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 AdditionalData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AdditionalData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AdditionalData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AdditionalData instance.
func (me *XsdGoPkgHasElems_AdditionalData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AdditionalData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AdditionalDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_FormatId_XsdtString_ struct {
	FormatId *xsdt.String `json:"format-id,omitempty" xml:" format-id,attr,omitempty"`
}

type XsdGoPkgHasAttr_PrivateEnumName_XsdtString_ struct {
	PrivateEnumName *xsdt.String `json:"private-enum-name,omitempty" xml:" private-enum-name,attr,omitempty"`
}

type XsdGoPkgHasAttr_PrivateEnumId_XsdtString_ struct {
	PrivateEnumId *xsdt.String `json:"private-enum-id,omitempty" xml:" private-enum-id,attr,omitempty"`
}

type XsdGoPkgHasAttr_Version_XsdtString_200 struct {
	Version xsdt.String `json:"version,omitempty" xml:" version,attr,omitempty"`
}

//	Returns the fixed value for Version -- "2.00"
func (me XsdGoPkgHasAttr_Version_XsdtString_200) VersionFixed() xsdt.String {
	return xsdt.String("2.00")
}

type XsdGoPkgHasAttr_Instance_XsdtString_ struct {
	Instance *xsdt.String `json:"instance,omitempty" xml:" instance,attr,omitempty"`
}

type TIncidentIDType struct {
	XsdGoPkgHasCdata_Id

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_Instance_XsdtString_

	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_
}

//	If the WalkHandlers.TIncidentIDType function is not nil (ie. was set by outside code), calls it with this TIncidentIDType instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TIncidentIDType instance.
func (me *TIncidentIDType) Walk() (err error) {
	if fn := WalkHandlers.TIncidentIDType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata_Id.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IncidentID struct {
	IncidentIDs []*TIncidentIDType `json:"IncidentID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 IncidentID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IncidentID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IncidentID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IncidentID instance.
func (me *XsdGoPkgHasElems_IncidentID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IncidentID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IncidentIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Version_XsdtString_ struct {
	Version *xsdt.String `json:"version,omitempty" xml:" version,attr,omitempty"`
}

type TxsdIndicatorID struct {
	XsdGoPkgHasCdata_Id

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_Version_XsdtString_
}

//	If the WalkHandlers.TxsdIndicatorID function is not nil (ie. was set by outside code), calls it with this TxsdIndicatorID instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdIndicatorID instance.
func (me *TxsdIndicatorID) Walk() (err error) {
	if fn := WalkHandlers.TxsdIndicatorID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata_Id.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IndicatorID struct {
	IndicatorIDs []*TxsdIndicatorID `json:"IndicatorID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 IndicatorID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IndicatorID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IndicatorID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IndicatorID instance.
func (me *XsdGoPkgHasElems_IndicatorID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IndicatorID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IndicatorIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TconfidenceRatingType xsdt.Nmtoken

//	This convenience method just performs a simple type conversion to TconfidenceRatingType's alias type xsdt.Nmtoken.
func (me TconfidenceRatingType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TconfidenceRatingType is "medium".
func (me TconfidenceRatingType) IsMedium() bool { return me.String() == "medium" }

//	Returns true if the value of this enumerated TconfidenceRatingType is "high".
func (me TconfidenceRatingType) IsHigh() bool { return me.String() == "high" }

//	Returns true if the value of this enumerated TconfidenceRatingType is "numeric".
func (me TconfidenceRatingType) IsNumeric() bool { return me.String() == "numeric" }

//	Returns true if the value of this enumerated TconfidenceRatingType is "unknown".
func (me TconfidenceRatingType) IsUnknown() bool { return me.String() == "unknown" }

//	Returns true if the value of this enumerated TconfidenceRatingType is "ext-value".
func (me TconfidenceRatingType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TconfidenceRatingType is just a simple String type, this merely sets the current value from the specified string.
func (me *TconfidenceRatingType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TconfidenceRatingType is just a simple String type, this merely returns the current string value.
func (me TconfidenceRatingType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TconfidenceRatingType is "low".
func (me TconfidenceRatingType) IsLow() bool { return me.String() == "low" }

type XsdGoPkgHasAttr_Rating_TconfidenceRatingType_ struct {
	Rating TconfidenceRatingType `json:"rating,omitempty" xml:" rating,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExtRating_XsdtString_ struct {
	ExtRating *xsdt.String `json:"ext-rating,omitempty" xml:" ext-rating,attr,omitempty"`
}

type TxsdConfidence struct {
	XsdGoPkgHasCdata_Value_Number

	XsdGoPkgHasAttr_Rating_TconfidenceRatingType_

	XsdGoPkgHasAttr_ExtRating_XsdtString_
}

//	If the WalkHandlers.TxsdConfidence function is not nil (ie. was set by outside code), calls it with this TxsdConfidence instance as the single argument. Then calls the Walk() method on 0/2 embed(s) and 0/0 field(s) belonging to this TxsdConfidence instance.
func (me *TxsdConfidence) Walk() (err error) {
	if fn := WalkHandlers.TxsdConfidence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Confidence struct {
	Confidence *TxsdConfidence `json:"Confidence,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Confidence,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Confidence function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Confidence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Confidence instance.
func (me *XsdGoPkgHasElem_Confidence) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Confidence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Confidence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_TranslationId_XsdtString_ struct {
	TranslationId *xsdt.String `json:"translation-id,omitempty" xml:" translation-id,attr,omitempty"`
}

type TMLStringType struct {
	XsdGoPkgHasCdata_Value

	xml.XsdGoPkgHasAttr_Lang

	XsdGoPkgHasAttr_TranslationId_XsdtString_

}

//	If the WalkHandlers.TMLStringType function is not nil (ie. was set by outside code), calls it with this TMLStringType instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TMLStringType instance.
func (me *TMLStringType) Walk() (err error) {
	if fn := WalkHandlers.TMLStringType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata_Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Description struct {
	Descriptions   []interface{}    `json:"Description,omitempty" xml:"-"`
	DescriptionMLs []*TMLStringType `json:"-" xml:"urn:ietf:params:xml:ns:iodef-2.0 Description,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Description function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Description instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Description instance.
func (me *XsdGoPkgHasElems_Description) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Description; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DescriptionMLs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Url struct {
	Urls []*xsdt.AnyURI `json:"URL,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 URL,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Url function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Url instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Url instance.
func (me *XsdGoPkgHasElems_Url) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Url; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ThreatActorID struct {
	ThreatActorIDs []xsdt.String `json:"ThreatActorID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ThreatActorID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ThreatActorID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ThreatActorID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ThreatActorID instance.
func (me *XsdGoPkgHasElems_ThreatActorID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ThreatActorID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdThreatActor struct {
	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasElems_ThreatActorID

	XsdGoPkgHasElems_Url

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElems_AdditionalData
}

// Custom marshal JSON for TxsdThreatActor
func (u *TxsdThreatActor) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdThreatActor

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdThreatActor
func (u *TxsdThreatActor) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdThreatActor

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdThreatActor function is not nil (ie. was set by outside code), calls it with this TxsdThreatActor instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TxsdThreatActor instance.
func (me *TxsdThreatActor) Walk() (err error) {
	if fn := WalkHandlers.TxsdThreatActor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ThreatActorID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ThreatActor struct {
	ThreatActors []*TxsdThreatActor `json:"ThreatActor,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ThreatActor,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ThreatActor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ThreatActor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ThreatActor instance.
func (me *XsdGoPkgHasElems_ThreatActor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ThreatActor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ThreatActors {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CampaignID struct {
	CampaignIDs []xsdt.String `json:"CampaignID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 CampaignID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CampaignID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CampaignID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CampaignID instance.
func (me *XsdGoPkgHasElems_CampaignID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CampaignID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCampaign struct {
	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasElems_CampaignID

	XsdGoPkgHasElems_Url

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElems_AdditionalData
}

// Custom marshal JSON for TxsdCampaign
func (u *TxsdCampaign) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdCampaign

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdCampaign
func (u *TxsdCampaign) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdCampaign

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdCampaign function is not nil (ie. was set by outside code), calls it with this TxsdCampaign instance as the single argument. Then calls the Walk() method on 4/6 embed(s) and 0/0 field(s) belonging to this TxsdCampaign instance.
func (me *TxsdCampaign) Walk() (err error) {
	if fn := WalkHandlers.TxsdCampaign; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_CampaignID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Campaign struct {
	Campaigns []*TxsdCampaign `json:"Campaign,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Campaign,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Campaign function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Campaign instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Campaign instance.
func (me *XsdGoPkgHasElems_Campaign) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Campaign; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Campaigns {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRelatedActivity struct {
	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_
	
	XsdGoPkgHasElems_IncidentID

	XsdGoPkgHasElems_Url

	XsdGoPkgHasElems_ThreatActor

	XsdGoPkgHasElems_Campaign

	XsdGoPkgHasElems_IndicatorID

	XsdGoPkgHasElem_Confidence

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElems_AdditionalData
}

// Custom marshal JSON for TxsdRelatedActivity
func (u *TxsdRelatedActivity) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdRelatedActivity

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdRelatedActivity
func (u *TxsdRelatedActivity) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdRelatedActivity

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdRelatedActivity function is not nil (ie. was set by outside code), calls it with this TxsdRelatedActivity instance as the single argument. Then calls the Walk() method on 8/10 embed(s) and 0/0 field(s) belonging to this TxsdRelatedActivity instance.
func (me *TxsdRelatedActivity) Walk() (err error) {
	if fn := WalkHandlers.TxsdRelatedActivity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ThreatActor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Campaign.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_IncidentID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_IndicatorID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Confidence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RelatedActivity struct {
	RelatedActivities []*TxsdRelatedActivity `json:"RelatedActivity,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 RelatedActivity,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RelatedActivity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RelatedActivity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RelatedActivity instance.
func (me *XsdGoPkgHasElems_RelatedActivity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RelatedActivity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RelatedActivities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DetectTime struct {
	DetectTime xsdt.DateTime `json:"DetectTime,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 DetectTime,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DetectTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DetectTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DetectTime instance.
func (me *XsdGoPkgHasElem_DetectTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DetectTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StartTime struct {
	StartTime xsdt.DateTime `json:"StartTime,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 StartTime,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StartTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StartTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StartTime instance.
func (me *XsdGoPkgHasElem_StartTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StartTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TdiscoverySourceType xsdt.Nmtoken

//	Returns true if the value of this enumerated TdiscoverySourceType is "leo".
func (me TdiscoverySourceType) IsLeo() bool { return me.String() == "leo" }

//	This convenience method just performs a simple type conversion to TdiscoverySourceType's alias type xsdt.Nmtoken.
func (me TdiscoverySourceType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TdiscoverySourceType is "nidps".
func (me TdiscoverySourceType) IsNidps() bool { return me.String() == "nidps" }

//	Returns true if the value of this enumerated TdiscoverySourceType is "siem".
func (me TdiscoverySourceType) IsSiem() bool { return me.String() == "siem" }

//	Returns true if the value of this enumerated TdiscoverySourceType is "av".
func (me TdiscoverySourceType) IsAv() bool { return me.String() == "av" }

//	Returns true if the value of this enumerated TdiscoverySourceType is "incident".
func (me TdiscoverySourceType) IsIncident() bool { return me.String() == "incident" }

//	Returns true if the value of this enumerated TdiscoverySourceType is "investigation".
func (me TdiscoverySourceType) IsInvestigation() bool { return me.String() == "investigation" }

//	Returns true if the value of this enumerated TdiscoverySourceType is "internal-notification".
func (me TdiscoverySourceType) IsInternalNotification() bool {
	return me.String() == "internal-notification"
}

//	Returns true if the value of this enumerated TdiscoverySourceType is "actor".
func (me TdiscoverySourceType) IsActor() bool { return me.String() == "actor" }

//	Returns true if the value of this enumerated TdiscoverySourceType is "ext-value".
func (me TdiscoverySourceType) IsExtValue() bool { return me.String() == "ext-value" }

//	Returns true if the value of this enumerated TdiscoverySourceType is "os-log".
func (me TdiscoverySourceType) IsOsLog() bool { return me.String() == "os-log" }

//	Returns true if the value of this enumerated TdiscoverySourceType is "external-notification".
func (me TdiscoverySourceType) IsExternalNotification() bool {
	return me.String() == "external-notification"
}

//	Since TdiscoverySourceType is just a simple String type, this merely returns the current string value.
func (me TdiscoverySourceType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TdiscoverySourceType is "network-flow".
func (me TdiscoverySourceType) IsNetworkFlow() bool { return me.String() == "network-flow" }

//	Returns true if the value of this enumerated TdiscoverySourceType is "passive-dns".
func (me TdiscoverySourceType) IsPassiveDns() bool { return me.String() == "passive-dns" }

//	Returns true if the value of this enumerated TdiscoverySourceType is "partner".
func (me TdiscoverySourceType) IsPartner() bool { return me.String() == "partner" }

//	Returns true if the value of this enumerated TdiscoverySourceType is "unknown".
func (me TdiscoverySourceType) IsUnknown() bool { return me.String() == "unknown" }

//	Since TdiscoverySourceType is just a simple String type, this merely sets the current value from the specified string.
func (me *TdiscoverySourceType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TdiscoverySourceType is "hips".
func (me TdiscoverySourceType) IsHips() bool { return me.String() == "hips" }

//	Returns true if the value of this enumerated TdiscoverySourceType is "third-party-monitoring".
func (me TdiscoverySourceType) IsThirdPartyMonitoring() bool {
	return me.String() == "third-party-monitoring"
}

//	Returns true if the value of this enumerated TdiscoverySourceType is "application-log".
func (me TdiscoverySourceType) IsApplicationLog() bool { return me.String() == "application-log" }

//	Returns true if the value of this enumerated TdiscoverySourceType is "device-log".
func (me TdiscoverySourceType) IsDeviceLog() bool { return me.String() == "device-log" }

//	Returns true if the value of this enumerated TdiscoverySourceType is "audit".
func (me TdiscoverySourceType) IsAudit() bool { return me.String() == "audit" }

type XsdGoPkgHasAttr_Source_TdiscoverySourceType_Unknown struct {
	Source *TdiscoverySourceType `json:"source,omitempty" xml:" source,attr,omitempty"`
}

//	Returns the default value for Source -- "unknown"
func (me XsdGoPkgHasAttr_Source_TdiscoverySourceType_Unknown) SourceDefault() TdiscoverySourceType {
	return TdiscoverySourceType("unknown")
}

type XsdGoPkgHasAttr_ExtSource_XsdtString_ struct {
	ExtSource *xsdt.String `json:"ext-source,omitempty" xml:" ext-source,attr,omitempty"`
}

type XsdGoPkgHasElems_ContactName struct {
	ContactNames   []interface{}        `json:"ContactName,omitempty" xml:"-"`
	ContactNameMLs []*TMLStringType `json:"-" xml:"urn:ietf:params:xml:ns:iodef-2.0 ContactName,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ContactName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ContactName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ContactName instance.
func (me *XsdGoPkgHasElems_ContactName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ContactName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ContactNameMLs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PAddress struct {
	PAddressJson interface{} `json:"PAddress,omitempty" xml:"-"`
	PAddress *TMLStringType `json:"-" xml:"urn:ietf:params:xml:ns:iodef-2.0 PAddress,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PAddress instance.
func (me *XsdGoPkgHasElem_PAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TpostaladdressTypeType xsdt.Nmtoken

//	This convenience method just performs a simple type conversion to TpostaladdressTypeType's alias type xsdt.Nmtoken.
func (me TpostaladdressTypeType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TpostaladdressTypeType is "street".
func (me TpostaladdressTypeType) IsStreet() bool { return me.String() == "street" }

//	Returns true if the value of this enumerated TpostaladdressTypeType is "mailing".
func (me TpostaladdressTypeType) IsMailing() bool { return me.String() == "mailing" }

//	Returns true if the value of this enumerated TpostaladdressTypeType is "ext-value".
func (me TpostaladdressTypeType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TpostaladdressTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TpostaladdressTypeType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TpostaladdressTypeType is just a simple String type, this merely returns the current string value.
func (me TpostaladdressTypeType) String() string { return xsdt.Nmtoken(me).String() }

type XsdGoPkgHasAttr_Type_TpostaladdressTypeType_ struct {
	Type *TpostaladdressTypeType `json:"type,omitempty" xml:" type,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExtType_XsdtString_ struct {
	ExtType *xsdt.String `json:"ext-type,omitempty" xml:" ext-type,attr,omitempty"`
}

type TxsdPostalAddress struct {
	XsdGoPkgHasAttr_Type_TpostaladdressTypeType_

	XsdGoPkgHasAttr_ExtType_XsdtString_

	XsdGoPkgHasElem_PAddress

	XsdGoPkgHasElems_Description
}

// Custom marshal JSON for TxsdPostalAddress
func (u *TxsdPostalAddress) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdPostalAddress

	if u.PAddressJson == nil {
		u.PAddressJson = u.PAddress
	}

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdPostalAddress
func (u *TxsdPostalAddress) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdPostalAddress

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.PAddressJson != nil{
		u.PAddress = &TMLStringType{}
		str, ok := u.PAddressJson.(string)
		if ok {
			u.PAddress.Value = str
		} else {
			// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
			m,ok := u.PAddressJson.(map[string]interface{})
			if ok {
				// Try to pass field's values to TMLStringType
				FillStruct(m, u.PAddress)
			}
		}
	}

	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdPostalAddress function is not nil (ie. was set by outside code), calls it with this TxsdPostalAddress instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TxsdPostalAddress instance.
func (me *TxsdPostalAddress) Walk() (err error) {
	if fn := WalkHandlers.TxsdPostalAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PostalAddress struct {
	PostalAddresses []*TxsdPostalAddress `json:"PostalAddress,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 PostalAddress,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PostalAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PostalAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PostalAddress instance.
func (me *XsdGoPkgHasElems_PostalAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PostalAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PostalAddresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ExtRole_XsdtString_ struct {
	ExtRole *xsdt.String `json:"ext-role,omitempty" xml:" ext-role,attr,omitempty"`
}

type XsdGoPkgHasElems_ContactTitle struct {
	ContactTitles   []interface{}    `json:"ContactTitle,omitempty" xml:"-"`
	ContactTitleMLs []*TMLStringType `json:"-" xml:"urn:ietf:params:xml:ns:iodef-2.0 ContactTitle,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ContactTitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ContactTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ContactTitle instance.
func (me *XsdGoPkgHasElems_ContactTitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ContactTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ContactTitleMLs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EmailTo struct {
	EmailTo xsdt.String `json:"EmailTo,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailTo,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EmailTo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EmailTo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EmailTo instance.
func (me *XsdGoPkgHasElem_EmailTo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EmailTo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TemailTypeType xsdt.Nmtoken

//	Returns true if the value of this enumerated TemailTypeType is "direct".
func (me TemailTypeType) IsDirect() bool { return me.String() == "direct" }

//	Returns true if the value of this enumerated TemailTypeType is "hotline".
func (me TemailTypeType) IsHotline() bool { return me.String() == "hotline" }

//	Returns true if the value of this enumerated TemailTypeType is "ext-value".
func (me TemailTypeType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TemailTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TemailTypeType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TemailTypeType is just a simple String type, this merely returns the current string value.
func (me TemailTypeType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TemailTypeType's alias type xsdt.Nmtoken.
func (me TemailTypeType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

type XsdGoPkgHasAttr_Type_TemailTypeType_ struct {
	Type *TemailTypeType `json:"type,omitempty" xml:" type,attr,omitempty"`
}

type TxsdEmail struct {
	XsdGoPkgHasAttr_Type_TemailTypeType_

	XsdGoPkgHasAttr_ExtType_XsdtString_

	XsdGoPkgHasElem_EmailTo

	XsdGoPkgHasElems_Description
}

// Custom marshal JSON for TxsdEmail
func (u *TxsdEmail) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdEmail

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdEmail
func (u *TxsdEmail) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdEmail

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdEmail function is not nil (ie. was set by outside code), calls it with this TxsdEmail instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TxsdEmail instance.
func (me *TxsdEmail) Walk() (err error) {
	if fn := WalkHandlers.TxsdEmail; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_EmailTo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Email struct {
	Emails []*TxsdEmail `json:"Email,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Email,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Email function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Email instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Email instance.
func (me *XsdGoPkgHasElems_Email) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Email; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Emails {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TelephoneNumber struct {
	TelephoneNumber xsdt.String `json:"TelephoneNumber,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 TelephoneNumber,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TelephoneNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TelephoneNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_TelephoneNumber instance.
func (me *XsdGoPkgHasElem_TelephoneNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TelephoneNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TtelephoneTypeType xsdt.Nmtoken

//	Since TtelephoneTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TtelephoneTypeType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TtelephoneTypeType is just a simple String type, this merely returns the current string value.
func (me TtelephoneTypeType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TtelephoneTypeType's alias type xsdt.Nmtoken.
func (me TtelephoneTypeType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TtelephoneTypeType is "wired".
func (me TtelephoneTypeType) IsWired() bool { return me.String() == "wired" }

//	Returns true if the value of this enumerated TtelephoneTypeType is "mobile".
func (me TtelephoneTypeType) IsMobile() bool { return me.String() == "mobile" }

//	Returns true if the value of this enumerated TtelephoneTypeType is "fax".
func (me TtelephoneTypeType) IsFax() bool { return me.String() == "fax" }

//	Returns true if the value of this enumerated TtelephoneTypeType is "hotline".
func (me TtelephoneTypeType) IsHotline() bool { return me.String() == "hotline" }

//	Returns true if the value of this enumerated TtelephoneTypeType is "ext-value".
func (me TtelephoneTypeType) IsExtValue() bool { return me.String() == "ext-value" }

type XsdGoPkgHasAttr_Type_TtelephoneTypeType_ struct {
	Type *TtelephoneTypeType `json:"type,omitempty" xml:" type,attr,omitempty"`
}

type TxsdTelephone struct {
	XsdGoPkgHasAttr_Type_TtelephoneTypeType_

	XsdGoPkgHasAttr_ExtType_XsdtString_

	XsdGoPkgHasElem_TelephoneNumber

	XsdGoPkgHasElems_Description
}

// Custom marshal JSON for TxsdTelephone
func (u *TxsdTelephone) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdTelephone

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdTelephone
func (u *TxsdTelephone) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdTelephone

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdTelephone function is not nil (ie. was set by outside code), calls it with this TxsdTelephone instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TxsdTelephone instance.
func (me *TxsdTelephone) Walk() (err error) {
	if fn := WalkHandlers.TxsdTelephone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_TelephoneNumber.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Telephone struct {
	Telephones []*TxsdTelephone `json:"Telephone,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Telephone,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Telephone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Telephone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Telephone instance.
func (me *XsdGoPkgHasElems_Telephone) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Telephone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Telephones {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TimezoneType xsdt.String

//	Since TimezoneType is just a simple String type, this merely sets the current value from the specified string.
func (me *TimezoneType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TimezoneType is just a simple String type, this merely returns the current string value.
func (me TimezoneType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TimezoneType's alias type xsdt.String.
func (me TimezoneType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_Timezone struct {
	Timezone TimezoneType `json:"Timezone,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Timezone,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Timezone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Timezone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Timezone instance.
func (me *XsdGoPkgHasElem_Timezone) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Timezone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcontactTypeType xsdt.Nmtoken

//	Returns true if the value of this enumerated TcontactTypeType is "person".
func (me TcontactTypeType) IsPerson() bool { return me.String() == "person" }

//	Returns true if the value of this enumerated TcontactTypeType is "organization".
func (me TcontactTypeType) IsOrganization() bool { return me.String() == "organization" }

//	Returns true if the value of this enumerated TcontactTypeType is "ext-value".
func (me TcontactTypeType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TcontactTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TcontactTypeType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TcontactTypeType is just a simple String type, this merely returns the current string value.
func (me TcontactTypeType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TcontactTypeType's alias type xsdt.Nmtoken.
func (me TcontactTypeType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

type XsdGoPkgHasAttr_Type_TcontactTypeType_ struct {
	Type TcontactTypeType `json:"type,omitempty" xml:" type,attr,omitempty"`
}

type TregistryhandleRegistryType xsdt.Nmtoken

//	Returns true if the value of this enumerated TregistryhandleRegistryType is "arin".
func (me TregistryhandleRegistryType) IsArin() bool { return me.String() == "arin" }

//	Returns true if the value of this enumerated TregistryhandleRegistryType is "ripe".
func (me TregistryhandleRegistryType) IsRipe() bool { return me.String() == "ripe" }

//	Returns true if the value of this enumerated TregistryhandleRegistryType is "local".
func (me TregistryhandleRegistryType) IsLocal() bool { return me.String() == "local" }

//	Returns true if the value of this enumerated TregistryhandleRegistryType is "ext-value".
func (me TregistryhandleRegistryType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TregistryhandleRegistryType is just a simple String type, this merely returns the current string value.
func (me TregistryhandleRegistryType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TregistryhandleRegistryType's alias type xsdt.Nmtoken.
func (me TregistryhandleRegistryType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TregistryhandleRegistryType is "apnic".
func (me TregistryhandleRegistryType) IsApnic() bool { return me.String() == "apnic" }

//	Returns true if the value of this enumerated TregistryhandleRegistryType is "lacnic".
func (me TregistryhandleRegistryType) IsLacnic() bool { return me.String() == "lacnic" }

//	Returns true if the value of this enumerated TregistryhandleRegistryType is "afrinic".
func (me TregistryhandleRegistryType) IsAfrinic() bool { return me.String() == "afrinic" }

//	Since TregistryhandleRegistryType is just a simple String type, this merely sets the current value from the specified string.
func (me *TregistryhandleRegistryType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TregistryhandleRegistryType is "internic".
func (me TregistryhandleRegistryType) IsInternic() bool { return me.String() == "internic" }

type XsdGoPkgHasAttr_Registry_TregistryhandleRegistryType_ struct {
	Registry TregistryhandleRegistryType `json:"registry,omitempty" xml:" registry,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExtRegistry_XsdtString_ struct {
	ExtRegistry *xsdt.String `json:"ext-registry,omitempty" xml:" ext-registry,attr,omitempty"`
}

type TxsdRegistryHandle struct {
	XsdGoPkgHasCdata_Handle

	XsdGoPkgHasAttr_Registry_TregistryhandleRegistryType_

	XsdGoPkgHasAttr_ExtRegistry_XsdtString_
}

//	If the WalkHandlers.TxsdRegistryHandle function is not nil (ie. was set by outside code), calls it with this TxsdRegistryHandle instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdRegistryHandle instance.
func (me *TxsdRegistryHandle) Walk() (err error) {
	if fn := WalkHandlers.TxsdRegistryHandle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata_Handle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RegistryHandle struct {
	RegistryHandles []*TxsdRegistryHandle `json:"RegistryHandle,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 RegistryHandle,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RegistryHandle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RegistryHandle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RegistryHandle instance.
func (me *XsdGoPkgHasElems_RegistryHandle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RegistryHandle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RegistryHandles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcontactRoleType xsdt.Nmtoken

//	Returns true if the value of this enumerated TcontactRoleType is "vendor".
func (me TcontactRoleType) IsVendor() bool { return me.String() == "vendor" }

//	Returns true if the value of this enumerated TcontactRoleType is "ext-value".
func (me TcontactRoleType) IsExtValue() bool { return me.String() == "ext-value" }

//	Returns true if the value of this enumerated TcontactRoleType is "reporter".
func (me TcontactRoleType) IsReporter() bool { return me.String() == "reporter" }

//	Returns true if the value of this enumerated TcontactRoleType is "tech".
func (me TcontactRoleType) IsTech() bool { return me.String() == "tech" }

//	Returns true if the value of this enumerated TcontactRoleType is "user".
func (me TcontactRoleType) IsUser() bool { return me.String() == "user" }

//	Returns true if the value of this enumerated TcontactRoleType is "billing".
func (me TcontactRoleType) IsBilling() bool { return me.String() == "billing" }

//	Returns true if the value of this enumerated TcontactRoleType is "cc-irt".
func (me TcontactRoleType) IsCcIrt() bool { return me.String() == "cc-irt" }

//	Returns true if the value of this enumerated TcontactRoleType is "leo".
func (me TcontactRoleType) IsLeo() bool { return me.String() == "leo" }

//	Returns true if the value of this enumerated TcontactRoleType is "victim-notified".
func (me TcontactRoleType) IsVictimNotified() bool { return me.String() == "victim-notified" }

//	Since TcontactRoleType is just a simple String type, this merely sets the current value from the specified string.
func (me *TcontactRoleType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TcontactRoleType is just a simple String type, this merely returns the current string value.
func (me TcontactRoleType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TcontactRoleType is "admin".
func (me TcontactRoleType) IsAdmin() bool { return me.String() == "admin" }

//	Returns true if the value of this enumerated TcontactRoleType is "cc".
func (me TcontactRoleType) IsCc() bool { return me.String() == "cc" }

//	Returns true if the value of this enumerated TcontactRoleType is "provider".
func (me TcontactRoleType) IsProvider() bool { return me.String() == "provider" }

//	Returns true if the value of this enumerated TcontactRoleType is "legal".
func (me TcontactRoleType) IsLegal() bool { return me.String() == "legal" }

//	Returns true if the value of this enumerated TcontactRoleType is "irt".
func (me TcontactRoleType) IsIrt() bool { return me.String() == "irt" }

//	Returns true if the value of this enumerated TcontactRoleType is "victim".
func (me TcontactRoleType) IsVictim() bool { return me.String() == "victim" }

//	This convenience method just performs a simple type conversion to TcontactRoleType's alias type xsdt.Nmtoken.
func (me TcontactRoleType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TcontactRoleType is "creator".
func (me TcontactRoleType) IsCreator() bool { return me.String() == "creator" }

//	Returns true if the value of this enumerated TcontactRoleType is "abuse".
func (me TcontactRoleType) IsAbuse() bool { return me.String() == "abuse" }

//	Returns true if the value of this enumerated TcontactRoleType is "vendor-services".
func (me TcontactRoleType) IsVendorServices() bool { return me.String() == "vendor-services" }

type XsdGoPkgHasAttr_Role_TcontactRoleType_ struct {
	Role TcontactRoleType `json:"role,omitempty" xml:" role,attr,omitempty"`
}

type TxsdContact struct {
	XsdGoPkgHasAttr_Role_TcontactRoleType_

	XsdGoPkgHasAttr_ExtRole_XsdtString_

	XsdGoPkgHasAttr_Type_TcontactTypeType_

	XsdGoPkgHasAttr_ExtType_XsdtString_

	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasElems_ContactName

	XsdGoPkgHasElems_ContactTitle

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElems_RegistryHandle

	XsdGoPkgHasElems_PostalAddress

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElems_Telephone

	XsdGoPkgHasElem_Timezone

	XsdGoPkgHasElems_Contact

	XsdGoPkgHasElems_AdditionalData
}

// Custom marshal JSON for TxsdContact
func (u *TxsdContact) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdContact

	if u.ContactNames == nil {
		for _, name := range u.ContactNameMLs{
			u.ContactNames = append(u.ContactNames,name)
		}
	}
	if u.ContactTitles == nil {
		for _, title := range u.ContactTitleMLs{
			u.ContactTitles = append(u.ContactTitles,title)
		}
	}

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdContact
func (u *TxsdContact) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdContact

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.ContactNames != nil {
		u.ContactNameMLs = make([]*TMLStringType, len(u.ContactNames))
		for i:=0; i<len(u.ContactNames);i++{
			// Check if field is string
			str, ok := u.ContactNames[i].(string)
			if ok {
				u.ContactNameMLs[i] = &TMLStringType{}
				u.ContactNameMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.ContactNames[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.ContactNameMLs[i] = &TMLStringType{}
					FillStruct(m, u.ContactNameMLs[i])
				}
			}
		}
	}

	if u.ContactTitles != nil {
		u.ContactTitleMLs = make([]*TMLStringType, len(u.ContactTitles))
		for i:=0;i<len(u.ContactTitles);i++{
			// Check if field is string
			str, ok := u.ContactTitles[i].(string)
			if ok {
				u.ContactTitleMLs[i] = &TMLStringType{}
				u.ContactTitleMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.ContactTitles[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.ContactTitleMLs[i] = &TMLStringType{}
					FillStruct(m, u.ContactTitleMLs[i])
				}
			}			
		}
	}

	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

func SetField(obj interface{}, name string, value interface{}) error {
	structValue := reflect.ValueOf(obj).Elem()
	
	var mappingName string

	// Get field from json name
	for i := 0; i < structValue.NumField(); i++ {
		flag := false
		for j:=0; j < structValue.Type().Field(i).Type.NumField(); j++ {
			typeField := structValue.Type().Field(i).Type.Field(j)
			
			tag := typeField.Tag

			if tag.Get("json") == name+",omitempty"{
				mappingName = typeField.Name
				flag = true
				break
			}
		}
		if flag == true {
			break
		}
	}

	if mappingName == "" {
		return fmt.Errorf("No such JSON tag: %s in obj", name)
	}

    structFieldValue := structValue.FieldByName(mappingName)

    if !structFieldValue.IsValid() {
        return fmt.Errorf("No such field: %s in obj", mappingName)
    }

    if !structFieldValue.CanSet() {
        return fmt.Errorf("Cannot set %s field value", name)
    }

	structFieldType := structFieldValue.Type()
	val := reflect.ValueOf(value)

	// If field's type is *xsdt.String, set it manually
	if structFieldType == reflect.TypeOf((*xsdt.String)(nil)){
		str := value.(string)
		structFieldValue.Set(reflect.ValueOf((*xsdt.String)(&str)))
		return nil
	}

	// If field's type is xml.TxsdLang, convert value to xml.TxsdLang
	if structFieldType == reflect.TypeOf((*xml.TxsdLang)(nil)){
		str := value.(string)
		structFieldValue.Set(reflect.ValueOf((*xml.TxsdLang)(&str)))
		return nil
	}

    if structFieldType != val.Type() {
        return fmt.Errorf("Provided value type didn't match obj field type")
    }

    structFieldValue.Set(val)
    return nil
}

func FillStruct(m map[string]interface{}, s interface{}) error {
    for k, v := range m {
        err := SetField(s, k, v)
        if err != nil {
            return err
        }
    }
    return nil
}

//	If the WalkHandlers.TxsdContact function is not nil (ie. was set by outside code), calls it with this TxsdContact instance as the single argument. Then calls the Walk() method on 9/16 embed(s) and 0/0 field(s) belonging to this TxsdContact instance.
func (me *TxsdContact) Walk() (err error) {
	if fn := WalkHandlers.TxsdContact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Timezone.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RegistryHandle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ContactName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_PostalAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ContactTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Telephone.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Contact struct {
	Contacts []*TxsdContact `json:"Contact,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Contact,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Contact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Contact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Contact instance.
func (me *XsdGoPkgHasElems_Contact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Contact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Contacts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TsoftwarereferenceSpecNameType xsdt.Nmtoken

//	This convenience method just performs a simple type conversion to TsoftwarereferenceSpecNameType's alias type xsdt.Nmtoken.
func (me TsoftwarereferenceSpecNameType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TsoftwarereferenceSpecNameType is "custom".
func (me TsoftwarereferenceSpecNameType) IsCustom() bool { return me.String() == "custom" }

//	Returns true if the value of this enumerated TsoftwarereferenceSpecNameType is "cpe".
func (me TsoftwarereferenceSpecNameType) IsCpe() bool { return me.String() == "cpe" }

//	Returns true if the value of this enumerated TsoftwarereferenceSpecNameType is "swid".
func (me TsoftwarereferenceSpecNameType) IsSwid() bool { return me.String() == "swid" }

//	Returns true if the value of this enumerated TsoftwarereferenceSpecNameType is "ext-value".
func (me TsoftwarereferenceSpecNameType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TsoftwarereferenceSpecNameType is just a simple String type, this merely sets the current value from the specified string.
func (me *TsoftwarereferenceSpecNameType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TsoftwarereferenceSpecNameType is just a simple String type, this merely returns the current string value.
func (me TsoftwarereferenceSpecNameType) String() string { return xsdt.Nmtoken(me).String() }

type XsdGoPkgHasAttr_SpecName_TsoftwarereferenceSpecNameType_ struct {
	SpecName TsoftwarereferenceSpecNameType `json:"spec-name,omitempty" xml:" spec-name,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExtSpecName_XsdtString_ struct {
	ExtSpecName *xsdt.String `json:"ext-spec-name,omitempty" xml:" ext-spec-name,attr,omitempty"`
}

type TsoftwarereferenceDtypeType xsdt.Nmtoken

//	Since TsoftwarereferenceDtypeType is just a simple String type, this merely returns the current string value.
func (me TsoftwarereferenceDtypeType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TsoftwarereferenceDtypeType is "bytes".
func (me TsoftwarereferenceDtypeType) IsBytes() bool { return me.String() == "bytes" }

//	Returns true if the value of this enumerated TsoftwarereferenceDtypeType is "ext-value".
func (me TsoftwarereferenceDtypeType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TsoftwarereferenceDtypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TsoftwarereferenceDtypeType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TsoftwarereferenceDtypeType's alias type xsdt.Nmtoken.
func (me TsoftwarereferenceDtypeType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TsoftwarereferenceDtypeType is "integer".
func (me TsoftwarereferenceDtypeType) IsInteger() bool { return me.String() == "integer" }

//	Returns true if the value of this enumerated TsoftwarereferenceDtypeType is "real".
func (me TsoftwarereferenceDtypeType) IsReal() bool { return me.String() == "real" }

//	Returns true if the value of this enumerated TsoftwarereferenceDtypeType is "string".
func (me TsoftwarereferenceDtypeType) IsString() bool { return me.String() == "string" }

//	Returns true if the value of this enumerated TsoftwarereferenceDtypeType is "xml".
func (me TsoftwarereferenceDtypeType) IsXml() bool { return me.String() == "xml" }

type XsdGoPkgHasAttr_Dtype_TsoftwarereferenceDtypeType_ struct {
	Dtype *TsoftwarereferenceDtypeType `json:"dtype,omitempty" xml:" dtype,attr,omitempty"`
}

type TxsdSoftwareReference struct {
	XsdGoPkgHasElem_Value

	XsdGoPkgHasAttr_SpecName_TsoftwarereferenceSpecNameType_

	XsdGoPkgHasAttr_ExtSpecName_XsdtString_

	XsdGoPkgHasAttr_Dtype_TsoftwarereferenceDtypeType_

	XsdGoPkgHasAttr_ExtDtype_XsdtString_
}

//	If the WalkHandlers.TxsdSoftwareReference function is not nil (ie. was set by outside code), calls it with this TxsdSoftwareReference instance as the single argument. Then calls the Walk() method on 0/4 embed(s) and 0/0 field(s) belonging to this TxsdSoftwareReference instance.
func (me *TxsdSoftwareReference) Walk() (err error) {
	if fn := WalkHandlers.TxsdSoftwareReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SoftwareReference struct {
	SoftwareReference *TxsdSoftwareReference `json:"SoftwareReference,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 SoftwareReference,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SoftwareReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SoftwareReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SoftwareReference instance.
func (me *XsdGoPkgHasElem_SoftwareReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SoftwareReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SoftwareReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TSoftwareType struct {
	XsdGoPkgHasElem_SoftwareReference

	XsdGoPkgHasElems_Url

	XsdGoPkgHasElems_Description
}

// Custom marshal JSON for TSoftwareType
func (u *TSoftwareType) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TSoftwareType

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TSoftwareType
func (u *TSoftwareType) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TSoftwareType

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}
	return nil
}

//	If the WalkHandlers.TSoftwareType function is not nil (ie. was set by outside code), calls it with this TSoftwareType instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TSoftwareType instance.
func (me *TSoftwareType) Walk() (err error) {
	if fn := WalkHandlers.TSoftwareType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SoftwareReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Application struct {
	Application *TSoftwareType `json:"Application,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Application,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Application function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Application instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Application instance.
func (me *XsdGoPkgHasElem_Application) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Application; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_ struct {
	DetectionConfigurations []xsdt.String `json:"DetectionConfiguration,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 DetectionConfiguration,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_ instance.
func (me *XsdGoPkgHasElems_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdDetectionPattern struct {
	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasAttr_ObservableId_XsdtId_

	XsdGoPkgHasElem_Application

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElems_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_
}

// Custom marshal JSON for TxsdDetectionPattern
func (u *TxsdDetectionPattern) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdDetectionPattern

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdDetectionPattern
func (u *TxsdDetectionPattern) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdDetectionPattern

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdDetectionPattern function is not nil (ie. was set by outside code), calls it with this TxsdDetectionPattern instance as the single argument. Then calls the Walk() method on 3/6 embed(s) and 0/0 field(s) belonging to this TxsdDetectionPattern instance.
func (me *TxsdDetectionPattern) Walk() (err error) {
	if fn := WalkHandlers.TxsdDetectionPattern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DetectionPattern struct {
	DetectionPatterns []*TxsdDetectionPattern `json:"DetectionPattern,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 DetectionPattern,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DetectionPattern function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DetectionPattern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DetectionPattern instance.
func (me *XsdGoPkgHasElems_DetectionPattern) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DetectionPattern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DetectionPatterns {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdDiscovery struct {
	XsdGoPkgHasAttr_Source_TdiscoverySourceType_Unknown

	XsdGoPkgHasAttr_ExtSource_XsdtString_

	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElems_Contact

	XsdGoPkgHasElems_DetectionPattern
}

// Custom marshal JSON for TxsdDiscovery
func (u *TxsdDiscovery) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdDiscovery

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdDiscovery
func (u *TxsdDiscovery) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdDiscovery

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdDiscovery function is not nil (ie. was set by outside code), calls it with this TxsdDiscovery instance as the single argument. Then calls the Walk() method on 3/7 embed(s) and 0/0 field(s) belonging to this TxsdDiscovery instance.
func (me *TxsdDiscovery) Walk() (err error) {
	if fn := WalkHandlers.TxsdDiscovery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Contact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DetectionPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Discovery struct {
	Discoveries []*TxsdDiscovery `json:"Discovery,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Discovery,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Discovery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Discovery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Discovery instance.
func (me *XsdGoPkgHasElems_Discovery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Discovery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Discoveries {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Restriction_TrestrictionType_Private struct {
	Restriction *TrestrictionType `json:"restriction,omitempty" xml:" restriction,attr,omitempty"`
}

//	Returns the default value for Restriction -- "private"
func (me XsdGoPkgHasAttr_Restriction_TrestrictionType_Private) RestrictionDefault() TrestrictionType {
	return TrestrictionType("private")
}

type XsdGoPkgHasElem_IncidentID struct {
	IncidentID *TIncidentIDType `json:"IncidentID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 IncidentID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IncidentID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IncidentID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IncidentID instance.
func (me *XsdGoPkgHasElem_IncidentID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IncidentID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IncidentID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ExtStatus_XsdtString_ struct {
	ExtStatus *xsdt.String `json:"ext-status,omitempty" xml:" ext-status,attr,omitempty"`
}

type TincidentPurposeType xsdt.Nmtoken

//	Since TincidentPurposeType is just a simple String type, this merely returns the current string value.
func (me TincidentPurposeType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TincidentPurposeType's alias type xsdt.Nmtoken.
func (me TincidentPurposeType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TincidentPurposeType is "reporting".
func (me TincidentPurposeType) IsReporting() bool { return me.String() == "reporting" }

//	Returns true if the value of this enumerated TincidentPurposeType is "watch".
func (me TincidentPurposeType) IsWatch() bool { return me.String() == "watch" }

//	Returns true if the value of this enumerated TincidentPurposeType is "other".
func (me TincidentPurposeType) IsOther() bool { return me.String() == "other" }

//	Since TincidentPurposeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TincidentPurposeType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TincidentPurposeType is "traceback".
func (me TincidentPurposeType) IsTraceback() bool { return me.String() == "traceback" }

//	Returns true if the value of this enumerated TincidentPurposeType is "mitigation".
func (me TincidentPurposeType) IsMitigation() bool { return me.String() == "mitigation" }

//	Returns true if the value of this enumerated TincidentPurposeType is "ext-value".
func (me TincidentPurposeType) IsExtValue() bool { return me.String() == "ext-value" }

type XsdGoPkgHasAttr_Purpose_TincidentPurposeType_ struct {
	Purpose TincidentPurposeType `json:"purpose,omitempty" xml:" purpose,attr,omitempty"`
}

type XsdGoPkgHasElem_RecoveryTime struct {
	RecoveryTime xsdt.DateTime `json:"RecoveryTime,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 RecoveryTime,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RecoveryTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RecoveryTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RecoveryTime instance.
func (me *XsdGoPkgHasElem_RecoveryTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RecoveryTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReportTime struct {
	ReportTime xsdt.DateTime `json:"ReportTime,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ReportTime,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReportTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReportTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReportTime instance.
func (me *XsdGoPkgHasElem_ReportTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReportTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DateTime struct {
	DateTime xsdt.DateTime `json:"DateTime,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 DateTime,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DateTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DateTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DateTime instance.
func (me *XsdGoPkgHasElem_DateTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DateTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TactionType xsdt.Nmtoken

//	Returns true if the value of this enumerated TactionType is "block-host".
func (me TactionType) IsBlockHost() bool { return me.String() == "block-host" }

//	Returns true if the value of this enumerated TactionType is "block-network".
func (me TactionType) IsBlockNetwork() bool { return me.String() == "block-network" }

//	Returns true if the value of this enumerated TactionType is "block-port".
func (me TactionType) IsBlockPort() bool { return me.String() == "block-port" }

//	Returns true if the value of this enumerated TactionType is "rate-limit-network".
func (me TactionType) IsRateLimitNetwork() bool { return me.String() == "rate-limit-network" }

//	Returns true if the value of this enumerated TactionType is "redirect-traffic".
func (me TactionType) IsRedirectTraffic() bool { return me.String() == "redirect-traffic" }

//	Returns true if the value of this enumerated TactionType is "remediate-other".
func (me TactionType) IsRemediateOther() bool { return me.String() == "remediate-other" }

//	Returns true if the value of this enumerated TactionType is "status-new-info".
func (me TactionType) IsStatusNewInfo() bool { return me.String() == "status-new-info" }

//	Since TactionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TactionType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TactionType is "defined-coa".
func (me TactionType) IsDefinedCoa() bool { return me.String() == "defined-coa" }

//	Returns true if the value of this enumerated TactionType is "watch-and-report".
func (me TactionType) IsWatchAndReport() bool { return me.String() == "watch-and-report" }

//	Returns true if the value of this enumerated TactionType is "other".
func (me TactionType) IsOther() bool { return me.String() == "other" }

//	Returns true if the value of this enumerated TactionType is "harden-asset".
func (me TactionType) IsHardenAsset() bool { return me.String() == "harden-asset" }

//	This convenience method just performs a simple type conversion to TactionType's alias type xsdt.Nmtoken.
func (me TactionType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TactionType is "contact-source-site".
func (me TactionType) IsContactSourceSite() bool { return me.String() == "contact-source-site" }

//	Returns true if the value of this enumerated TactionType is "contact-sender".
func (me TactionType) IsContactSender() bool { return me.String() == "contact-sender" }

//	Returns true if the value of this enumerated TactionType is "honeypot".
func (me TactionType) IsHoneypot() bool { return me.String() == "honeypot" }

//	Returns true if the value of this enumerated TactionType is "ext-value".
func (me TactionType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TactionType is just a simple String type, this merely returns the current string value.
func (me TactionType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TactionType is "contact-target-site".
func (me TactionType) IsContactTargetSite() bool { return me.String() == "contact-target-site" }

//	Returns true if the value of this enumerated TactionType is "investigate".
func (me TactionType) IsInvestigate() bool { return me.String() == "investigate" }

//	Returns true if the value of this enumerated TactionType is "rate-limit-host".
func (me TactionType) IsRateLimitHost() bool { return me.String() == "rate-limit-host" }

//	Returns true if the value of this enumerated TactionType is "rate-limit-port".
func (me TactionType) IsRateLimitPort() bool { return me.String() == "rate-limit-port" }

//	Returns true if the value of this enumerated TactionType is "upgrade-software".
func (me TactionType) IsUpgradeSoftware() bool { return me.String() == "upgrade-software" }

//	Returns true if the value of this enumerated TactionType is "rebuild-asset".
func (me TactionType) IsRebuildAsset() bool { return me.String() == "rebuild-asset" }

//	Returns true if the value of this enumerated TactionType is "status-triage".
func (me TactionType) IsStatusTriage() bool { return me.String() == "status-triage" }

//	Returns true if the value of this enumerated TactionType is "nothing".
func (me TactionType) IsNothing() bool { return me.String() == "nothing" }

type XsdGoPkgHasAttr_Action_TactionType_ struct {
	Action TactionType `json:"action,omitempty" xml:" action,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExtAction_XsdtString_ struct {
	ExtAction *xsdt.String `json:"ext-action,omitempty" xml:" ext-action,attr,omitempty"`
}

type XsdGoPkgHasElem_Contact struct {
	Contact *TxsdContact `json:"Contact,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Contact,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Contact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Contact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Contact instance.
func (me *XsdGoPkgHasElem_Contact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Contact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Contact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DefinedCOA struct {
	DefinedCOAs []xsdt.String `json:"DefinedCOA,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 DefinedCOA,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DefinedCOA function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DefinedCOA instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DefinedCOA instance.
func (me *XsdGoPkgHasElems_DefinedCOA) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DefinedCOA; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdHistoryItem struct {
	XsdGoPkgHasAttr_Action_TactionType_

	XsdGoPkgHasAttr_ExtAction_XsdtString_

	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasAttr_ObservableId_XsdtId_

	XsdGoPkgHasElem_DateTime

	XsdGoPkgHasElem_IncidentID

	XsdGoPkgHasElem_Contact

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElems_DefinedCOA

	XsdGoPkgHasElems_AdditionalData
}

// Custom marshal JSON for TxsdHistoryItem
func (u *TxsdHistoryItem) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdHistoryItem

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdHistoryItem
func (u *TxsdHistoryItem) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdHistoryItem

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdHistoryItem function is not nil (ie. was set by outside code), calls it with this TxsdHistoryItem instance as the single argument. Then calls the Walk() method on 6/11 embed(s) and 0/0 field(s) belonging to this TxsdHistoryItem instance.
func (me *TxsdHistoryItem) Walk() (err error) {
	if fn := WalkHandlers.TxsdHistoryItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Contact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DefinedCOA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DateTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IncidentID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HistoryItem struct {
	HistoryItems []*TxsdHistoryItem `json:"HistoryItem,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 HistoryItem,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HistoryItem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HistoryItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HistoryItem instance.
func (me *XsdGoPkgHasElems_HistoryItem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HistoryItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.HistoryItems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdHistory struct {
	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasElems_HistoryItem
}

//	If the WalkHandlers.TxsdHistory function is not nil (ie. was set by outside code), calls it with this TxsdHistory instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdHistory instance.
func (me *TxsdHistory) Walk() (err error) {
	if fn := WalkHandlers.TxsdHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_HistoryItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_History struct {
	History *TxsdHistory `json:"History,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 History,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_History function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_History instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_History instance.
func (me *XsdGoPkgHasElem_History) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_History; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.History.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TincidentStatusType xsdt.Nmtoken

//	Returns true if the value of this enumerated TincidentStatusType is "forwarded".
func (me TincidentStatusType) IsForwarded() bool { return me.String() == "forwarded" }

//	Returns true if the value of this enumerated TincidentStatusType is "future".
func (me TincidentStatusType) IsFuture() bool { return me.String() == "future" }

//	Returns true if the value of this enumerated TincidentStatusType is "new".
func (me TincidentStatusType) IsNew() bool { return me.String() == "new" }

//	Returns true if the value of this enumerated TincidentStatusType is "in-progress".
func (me TincidentStatusType) IsInProgress() bool { return me.String() == "in-progress" }

//	Returns true if the value of this enumerated TincidentStatusType is "resolved".
func (me TincidentStatusType) IsResolved() bool { return me.String() == "resolved" }

//	Returns true if the value of this enumerated TincidentStatusType is "ext-value".
func (me TincidentStatusType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TincidentStatusType is just a simple String type, this merely sets the current value from the specified string.
func (me *TincidentStatusType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TincidentStatusType is just a simple String type, this merely returns the current string value.
func (me TincidentStatusType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TincidentStatusType's alias type xsdt.Nmtoken.
func (me TincidentStatusType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

type XsdGoPkgHasAttr_Status_TincidentStatusType_ struct {
	Status TincidentStatusType `json:"status,omitempty" xml:" status,attr,omitempty"`
}

type TxsdAlternativeID struct {
	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasElems_IncidentID
}

//	If the WalkHandlers.TxsdAlternativeID function is not nil (ie. was set by outside code), calls it with this TxsdAlternativeID instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdAlternativeID instance.
func (me *TxsdAlternativeID) Walk() (err error) {
	if fn := WalkHandlers.TxsdAlternativeID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_IncidentID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AlternativeID struct {
	AlternativeID *TxsdAlternativeID `json:"AlternativeID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 AlternativeID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AlternativeID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AlternativeID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AlternativeID instance.
func (me *XsdGoPkgHasElem_AlternativeID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AlternativeID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AlternativeID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_GenerationTime struct {
	GenerationTime xsdt.DateTime `json:"GenerationTime,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 GenerationTime,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_GenerationTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_GenerationTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_GenerationTime instance.
func (me *XsdGoPkgHasElem_GenerationTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_GenerationTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TbusinessimpactSeverityType xsdt.Nmtoken

//	Since TbusinessimpactSeverityType is just a simple String type, this merely sets the current value from the specified string.
func (me *TbusinessimpactSeverityType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TbusinessimpactSeverityType is just a simple String type, this merely returns the current string value.
func (me TbusinessimpactSeverityType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TbusinessimpactSeverityType is "low".
func (me TbusinessimpactSeverityType) IsLow() bool { return me.String() == "low" }

//	Returns true if the value of this enumerated TbusinessimpactSeverityType is "high".
func (me TbusinessimpactSeverityType) IsHigh() bool { return me.String() == "high" }

//	Returns true if the value of this enumerated TbusinessimpactSeverityType is "ext-value".
func (me TbusinessimpactSeverityType) IsExtValue() bool { return me.String() == "ext-value" }

//	This convenience method just performs a simple type conversion to TbusinessimpactSeverityType's alias type xsdt.Nmtoken.
func (me TbusinessimpactSeverityType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TbusinessimpactSeverityType is "none".
func (me TbusinessimpactSeverityType) IsNone() bool { return me.String() == "none" }

//	Returns true if the value of this enumerated TbusinessimpactSeverityType is "medium".
func (me TbusinessimpactSeverityType) IsMedium() bool { return me.String() == "medium" }

//	Returns true if the value of this enumerated TbusinessimpactSeverityType is "unknown".
func (me TbusinessimpactSeverityType) IsUnknown() bool { return me.String() == "unknown" }

type XsdGoPkgHasAttr_Severity_TbusinessimpactSeverityType_ struct {
	Severity *TbusinessimpactSeverityType `json:"severity,omitempty" xml:" severity,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExtSeverity_XsdtString_ struct {
	ExtSeverity *xsdt.String `json:"ext-severity,omitempty" xml:" ext-severity,attr,omitempty"`
}

type TbusinessimpactTypeType xsdt.Nmtoken

//	Returns true if the value of this enumerated TbusinessimpactTypeType is "extortion".
func (me TbusinessimpactTypeType) IsExtortion() bool { return me.String() == "extortion" }

//	Returns true if the value of this enumerated TbusinessimpactTypeType is "ext-value".
func (me TbusinessimpactTypeType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TbusinessimpactTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TbusinessimpactTypeType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TbusinessimpactTypeType is "breach-privacy".
func (me TbusinessimpactTypeType) IsBreachPrivacy() bool { return me.String() == "breach-privacy" }

//	Returns true if the value of this enumerated TbusinessimpactTypeType is "legal".
func (me TbusinessimpactTypeType) IsLegal() bool { return me.String() == "legal" }

//	Returns true if the value of this enumerated TbusinessimpactTypeType is "asset-manipulation".
func (me TbusinessimpactTypeType) IsAssetManipulation() bool {
	return me.String() == "asset-manipulation"
}

//	Returns true if the value of this enumerated TbusinessimpactTypeType is "unknown".
func (me TbusinessimpactTypeType) IsUnknown() bool { return me.String() == "unknown" }

//	Since TbusinessimpactTypeType is just a simple String type, this merely returns the current string value.
func (me TbusinessimpactTypeType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TbusinessimpactTypeType is "breach-proprietary".
func (me TbusinessimpactTypeType) IsBreachProprietary() bool {
	return me.String() == "breach-proprietary"
}

//	Returns true if the value of this enumerated TbusinessimpactTypeType is "loss-of-service".
func (me TbusinessimpactTypeType) IsLossOfService() bool { return me.String() == "loss-of-service" }

//	Returns true if the value of this enumerated TbusinessimpactTypeType is "breach-credential".
func (me TbusinessimpactTypeType) IsBreachCredential() bool {
	return me.String() == "breach-credential"
}

//	Returns true if the value of this enumerated TbusinessimpactTypeType is "theft-service".
func (me TbusinessimpactTypeType) IsTheftService() bool { return me.String() == "theft-service" }

//	Returns true if the value of this enumerated TbusinessimpactTypeType is "degraded-reputation".
func (me TbusinessimpactTypeType) IsDegradedReputation() bool {
	return me.String() == "degraded-reputation"
}

//	Returns true if the value of this enumerated TbusinessimpactTypeType is "asset-damage".
func (me TbusinessimpactTypeType) IsAssetDamage() bool { return me.String() == "asset-damage" }

//	This convenience method just performs a simple type conversion to TbusinessimpactTypeType's alias type xsdt.Nmtoken.
func (me TbusinessimpactTypeType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TbusinessimpactTypeType is "loss-of-integrity".
func (me TbusinessimpactTypeType) IsLossOfIntegrity() bool { return me.String() == "loss-of-integrity" }

//	Returns true if the value of this enumerated TbusinessimpactTypeType is "theft-financial".
func (me TbusinessimpactTypeType) IsTheftFinancial() bool { return me.String() == "theft-financial" }

type XsdGoPkgHasAttr_Type_TbusinessimpactTypeType_Unknown struct {
	Type *TbusinessimpactTypeType `json:"type,omitempty" xml:" type,attr,omitempty"`
}

//	Returns the default value for Type -- "unknown"
func (me XsdGoPkgHasAttr_Type_TbusinessimpactTypeType_Unknown) TypeDefault() TbusinessimpactTypeType {
	return TbusinessimpactTypeType("unknown")
}

type TBusinessImpactType struct {
	XsdGoPkgHasAttr_Severity_TbusinessimpactSeverityType_

	XsdGoPkgHasAttr_ExtSeverity_XsdtString_

	XsdGoPkgHasAttr_Type_TbusinessimpactTypeType_Unknown

	XsdGoPkgHasAttr_ExtType_XsdtString_

	XsdGoPkgHasElems_Description

}

// Custom marshal JSON for TBusinessImpactType
func (u *TBusinessImpactType) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TBusinessImpactType

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TBusinessImpactType
func (u *TBusinessImpactType) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TBusinessImpactType

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TBusinessImpactType function is not nil (ie. was set by outside code), calls it with this TBusinessImpactType instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TBusinessImpactType instance.
func (me *TBusinessImpactType) Walk() (err error) {
	if fn := WalkHandlers.TBusinessImpactType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BusinessImpact struct {
	BusinessImpacts []*TBusinessImpactType `json:"BusinessImpact,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 BusinessImpact,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BusinessImpact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BusinessImpact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BusinessImpact instance.
func (me *XsdGoPkgHasElems_BusinessImpact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BusinessImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BusinessImpacts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TcounterUnitType xsdt.Nmtoken

//	Returns true if the value of this enumerated TcounterUnitType is "mbit".
func (me TcounterUnitType) IsMbit() bool { return me.String() == "mbit" }

//	Since TcounterUnitType is just a simple String type, this merely sets the current value from the specified string.
func (me *TcounterUnitType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TcounterUnitType is just a simple String type, this merely returns the current string value.
func (me TcounterUnitType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TcounterUnitType is "event".
func (me TcounterUnitType) IsEvent() bool { return me.String() == "event" }

//	Returns true if the value of this enumerated TcounterUnitType is "organization".
func (me TcounterUnitType) IsOrganization() bool { return me.String() == "organization" }

//	Returns true if the value of this enumerated TcounterUnitType is "packet".
func (me TcounterUnitType) IsPacket() bool { return me.String() == "packet" }

//	Returns true if the value of this enumerated TcounterUnitType is "flow".
func (me TcounterUnitType) IsFlow() bool { return me.String() == "flow" }

//	Returns true if the value of this enumerated TcounterUnitType is "alert".
func (me TcounterUnitType) IsAlert() bool { return me.String() == "alert" }

//	Returns true if the value of this enumerated TcounterUnitType is "message".
func (me TcounterUnitType) IsMessage() bool { return me.String() == "message" }

//	Returns true if the value of this enumerated TcounterUnitType is "host".
func (me TcounterUnitType) IsHost() bool { return me.String() == "host" }

//	Returns true if the value of this enumerated TcounterUnitType is "site".
func (me TcounterUnitType) IsSite() bool { return me.String() == "site" }

//	This convenience method just performs a simple type conversion to TcounterUnitType's alias type xsdt.Nmtoken.
func (me TcounterUnitType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TcounterUnitType is "byte".
func (me TcounterUnitType) IsByte() bool { return me.String() == "byte" }

//	Returns true if the value of this enumerated TcounterUnitType is "session".
func (me TcounterUnitType) IsSession() bool { return me.String() == "session" }

//	Returns true if the value of this enumerated TcounterUnitType is "ext-value".
func (me TcounterUnitType) IsExtValue() bool { return me.String() == "ext-value" }

type XsdGoPkgHasAttr_Unit_TcounterUnitType_ struct {
	Unit TcounterUnitType `json:"unit,omitempty" xml:" unit,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExtUnit_XsdtString_ struct {
	ExtUnit *xsdt.String `json:"ext-unit,omitempty" xml:" ext-unit,attr,omitempty"`
}

type TdurationType xsdt.Nmtoken

//	Returns true if the value of this enumerated TdurationType is "second".
func (me TdurationType) IsSecond() bool { return me.String() == "second" }

//	Returns true if the value of this enumerated TdurationType is "minute".
func (me TdurationType) IsMinute() bool { return me.String() == "minute" }

//	Returns true if the value of this enumerated TdurationType is "hour".
func (me TdurationType) IsHour() bool { return me.String() == "hour" }

//	Returns true if the value of this enumerated TdurationType is "month".
func (me TdurationType) IsMonth() bool { return me.String() == "month" }

//	Returns true if the value of this enumerated TdurationType is "ext-value".
func (me TdurationType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TdurationType is just a simple String type, this merely sets the current value from the specified string.
func (me *TdurationType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TdurationType is just a simple String type, this merely returns the current string value.
func (me TdurationType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TdurationType is "quarter".
func (me TdurationType) IsQuarter() bool { return me.String() == "quarter" }

//	Returns true if the value of this enumerated TdurationType is "year".
func (me TdurationType) IsYear() bool { return me.String() == "year" }

//	This convenience method just performs a simple type conversion to TdurationType's alias type xsdt.Nmtoken.
func (me TdurationType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TdurationType is "day".
func (me TdurationType) IsDay() bool { return me.String() == "day" }

type XsdGoPkgHasAttr_Duration_TdurationType_ struct {
	Duration TdurationType `json:"duration,omitempty" xml:" duration,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExtDuration_XsdtString_ struct {
	ExtDuration *xsdt.String `json:"ext-duration,omitempty" xml:" ext-duration,attr,omitempty"`
}

type TcounterTypeType xsdt.Nmtoken

//	Returns true if the value of this enumerated TcounterTypeType is "rate".
func (me TcounterTypeType) IsRate() bool { return me.String() == "rate" }

//	Returns true if the value of this enumerated TcounterTypeType is "average".
func (me TcounterTypeType) IsAverage() bool { return me.String() == "average" }

//	Returns true if the value of this enumerated TcounterTypeType is "ext-value".
func (me TcounterTypeType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TcounterTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TcounterTypeType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TcounterTypeType is just a simple String type, this merely returns the current string value.
func (me TcounterTypeType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TcounterTypeType's alias type xsdt.Nmtoken.
func (me TcounterTypeType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TcounterTypeType is "counter".
func (me TcounterTypeType) IsCounter() bool { return me.String() == "counter" }

type XsdGoPkgHasAttr_Type_TcounterTypeType_ struct {
	Type TcounterTypeType `json:"type,omitempty" xml:" type,attr,omitempty"`
}

type TxsdCounter struct {
	XsdGoPkgHasCdata_Value_Number

	XsdGoPkgHasAttr_Type_TcounterTypeType_

	XsdGoPkgHasAttr_ExtType_XsdtString_

	XsdGoPkgHasAttr_Unit_TcounterUnitType_

	XsdGoPkgHasAttr_ExtUnit_XsdtString_

	XsdGoPkgHasAttr_Meaning_XsdtString_ 

	XsdGoPkgHasAttr_Duration_TdurationType_

	XsdGoPkgHasAttr_ExtDuration_XsdtString_
}

//	If the WalkHandlers.TxsdCounter function is not nil (ie. was set by outside code), calls it with this TxsdCounter instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TxsdCounter instance.
func (me *TxsdCounter) Walk() (err error) {
	if fn := WalkHandlers.TxsdCounter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata_Value_Number.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Counter struct {
	Counters []*TxsdCounter `json:"Counter,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Counter,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Counter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Counter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Counter instance.
func (me *XsdGoPkgHasElems_Counter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Counter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Counters {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAssessmentOccurrence xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdAssessmentOccurrence is "potential".
func (me TxsdAssessmentOccurrence) IsPotential() bool { return me.String() == "potential" }

//	Since TxsdAssessmentOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAssessmentOccurrence) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdAssessmentOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdAssessmentOccurrence) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdAssessmentOccurrence's alias type xsdt.Nmtoken.
func (me TxsdAssessmentOccurrence) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdAssessmentOccurrence is "actual".
func (me TxsdAssessmentOccurrence) IsActual() bool { return me.String() == "actual" }

type XsdGoPkgHasAttr_Occurrence_TxsdAssessmentOccurrence_ struct {
	Occurrence TxsdAssessmentOccurrence `json:"occurrence,omitempty" xml:" occurrence,attr,omitempty"`
}

type TseverityType xsdt.Nmtoken

//	Since TseverityType is just a simple String type, this merely returns the current string value.
func (me TseverityType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TseverityType's alias type xsdt.Nmtoken.
func (me TseverityType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TseverityType is "low".
func (me TseverityType) IsLow() bool { return me.String() == "low" }

//	Returns true if the value of this enumerated TseverityType is "medium".
func (me TseverityType) IsMedium() bool { return me.String() == "medium" }

//	Returns true if the value of this enumerated TseverityType is "high".
func (me TseverityType) IsHigh() bool { return me.String() == "high" }

//	Since TseverityType is just a simple String type, this merely sets the current value from the specified string.
func (me *TseverityType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

type XsdGoPkgHasAttr_Severity_TseverityType_ struct {
	Severity *TseverityType `json:"severity,omitempty" xml:" severity,attr,omitempty"`
}

type TPositiveFloatType struct{
	Value xsdt.Double `json:"value,omitempty" xml:",chardata"`
}

//	Since TPositiveFloatType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TPositiveFloatType) Set(s string) { (*xsdt.Double)(&me.Value).Set(s) }

//	Returns a string representation of this TPositiveFloatType's current non-string scalar value.
func (me TPositiveFloatType) String() string { return xsdt.Double(me.Value).String() }

//	This convenience method just performs a simple type conversion to TPositiveFloatType's alias type xsdt.Float.
func (me TPositiveFloatType) ToXsdtFloat() xsdt.Double { return xsdt.Double(me.Value) }

type TtimeimpactMetricType xsdt.Nmtoken

//	This convenience method just performs a simple type conversion to TtimeimpactMetricType's alias type xsdt.Nmtoken.
func (me TtimeimpactMetricType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TtimeimpactMetricType is "labor".
func (me TtimeimpactMetricType) IsLabor() bool { return me.String() == "labor" }

//	Returns true if the value of this enumerated TtimeimpactMetricType is "elapsed".
func (me TtimeimpactMetricType) IsElapsed() bool { return me.String() == "elapsed" }

//	Returns true if the value of this enumerated TtimeimpactMetricType is "downtime".
func (me TtimeimpactMetricType) IsDowntime() bool { return me.String() == "downtime" }

//	Returns true if the value of this enumerated TtimeimpactMetricType is "ext-value".
func (me TtimeimpactMetricType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TtimeimpactMetricType is just a simple String type, this merely sets the current value from the specified string.
func (me *TtimeimpactMetricType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TtimeimpactMetricType is just a simple String type, this merely returns the current string value.
func (me TtimeimpactMetricType) String() string { return xsdt.Nmtoken(me).String() }

type XsdGoPkgHasAttr_Metric_TtimeimpactMetricType_ struct {
	Metric TtimeimpactMetricType `json:"metric,omitempty" xml:" metric,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExtMetric_XsdtString_ struct {
	ExtMetric *xsdt.String `json:"ext-metric,omitempty" xml:" ext-metric,attr,omitempty"`
}

type TxsdTimeImpact struct {
	TPositiveFloatType

	XsdGoPkgHasAttr_Severity_TseverityType_

	XsdGoPkgHasAttr_Metric_TtimeimpactMetricType_

	XsdGoPkgHasAttr_ExtMetric_XsdtString_

	XsdGoPkgHasAttr_Duration_TdurationType_

	XsdGoPkgHasAttr_ExtDuration_XsdtString_
}

//	If the WalkHandlers.TxsdTimeImpact function is not nil (ie. was set by outside code), calls it with this TxsdTimeImpact instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this TxsdTimeImpact instance.
func (me *TxsdTimeImpact) Walk() (err error) {
	if fn := WalkHandlers.TxsdTimeImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TimeImpact struct {
	TimeImpacts []*TxsdTimeImpact `json:"TimeImpact,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 TimeImpact,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TimeImpact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TimeImpact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TimeImpact instance.
func (me *XsdGoPkgHasElems_TimeImpact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TimeImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TimeImpacts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Currency_XsdtString_ struct {
	Currency xsdt.String `json:"currency,omitempty" xml:" currency,attr,omitempty"`
}

type TxsdMonetaryImpact struct {
	TPositiveFloatType

	XsdGoPkgHasAttr_Severity_TseverityType_

	XsdGoPkgHasAttr_Currency_XsdtString_
}

//	If the WalkHandlers.TxsdMonetaryImpact function is not nil (ie. was set by outside code), calls it with this TxsdMonetaryImpact instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdMonetaryImpact instance.
func (me *TxsdMonetaryImpact) Walk() (err error) {
	if fn := WalkHandlers.TxsdMonetaryImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MonetaryImpact struct {
	MonetaryImpacts []*TxsdMonetaryImpact `json:"MonetaryImpact,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 MonetaryImpact,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MonetaryImpact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MonetaryImpact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MonetaryImpact instance.
func (me *XsdGoPkgHasElems_MonetaryImpact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MonetaryImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MonetaryImpacts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MitigatingFactor struct {
	MitigatingFactors   []interface{}    `json:"MitigatingFactor,omitempty" xml:"-"`
	MitigatingFactorMLs []*TMLStringType `json:"-" xml:"urn:ietf:params:xml:ns:iodef-2.0 MitigatingFactor,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MitigatingFactor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MitigatingFactor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MitigatingFactor instance.
func (me *XsdGoPkgHasElems_MitigatingFactor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MitigatingFactor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MitigatingFactorMLs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TsystemimpactCompletionType xsdt.Nmtoken

//	Since TsystemimpactCompletionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TsystemimpactCompletionType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TsystemimpactCompletionType is just a simple String type, this merely returns the current string value.
func (me TsystemimpactCompletionType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TsystemimpactCompletionType's alias type xsdt.Nmtoken.
func (me TsystemimpactCompletionType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TsystemimpactCompletionType is "failed".
func (me TsystemimpactCompletionType) IsFailed() bool { return me.String() == "failed" }

//	Returns true if the value of this enumerated TsystemimpactCompletionType is "succeeded".
func (me TsystemimpactCompletionType) IsSucceeded() bool { return me.String() == "succeeded" }

type XsdGoPkgHasAttr_Completion_TsystemimpactCompletionType_ struct {
	Completion *TsystemimpactCompletionType `json:"completion,omitempty" xml:" completion,attr,omitempty"`
}

type TsystemimpactTypeType xsdt.Nmtoken

//	Returns true if the value of this enumerated TsystemimpactTypeType is "takeover-account".
func (me TsystemimpactTypeType) IsTakeoverAccount() bool { return me.String() == "takeover-account" }

//	Returns true if the value of this enumerated TsystemimpactTypeType is "takeover-service".
func (me TsystemimpactTypeType) IsTakeoverService() bool { return me.String() == "takeover-service" }

//	Returns true if the value of this enumerated TsystemimpactTypeType is "monitoring-host".
func (me TsystemimpactTypeType) IsMonitoringHost() bool { return me.String() == "monitoring-host" }

//	Returns true if the value of this enumerated TsystemimpactTypeType is "damaged-system".
func (me TsystemimpactTypeType) IsDamagedSystem() bool { return me.String() == "damaged-system" }

//	Returns true if the value of this enumerated TsystemimpactTypeType is "damaged-data".
func (me TsystemimpactTypeType) IsDamagedData() bool { return me.String() == "damaged-data" }

//	Returns true if the value of this enumerated TsystemimpactTypeType is "takeover-system".
func (me TsystemimpactTypeType) IsTakeoverSystem() bool { return me.String() == "takeover-system" }

//	Returns true if the value of this enumerated TsystemimpactTypeType is "cps-damage".
func (me TsystemimpactTypeType) IsCpsDamage() bool { return me.String() == "cps-damage" }

//	Returns true if the value of this enumerated TsystemimpactTypeType is "availability-system".
func (me TsystemimpactTypeType) IsAvailabilitySystem() bool {
	return me.String() == "availability-system"
}

//	Since TsystemimpactTypeType is just a simple String type, this merely returns the current string value.
func (me TsystemimpactTypeType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TsystemimpactTypeType is "integrity-configuration".
func (me TsystemimpactTypeType) IsIntegrityConfiguration() bool {
	return me.String() == "integrity-configuration"
}

//	Returns true if the value of this enumerated TsystemimpactTypeType is "unknown".
func (me TsystemimpactTypeType) IsUnknown() bool { return me.String() == "unknown" }

//	Returns true if the value of this enumerated TsystemimpactTypeType is "ext-value".
func (me TsystemimpactTypeType) IsExtValue() bool { return me.String() == "ext-value" }

//	Returns true if the value of this enumerated TsystemimpactTypeType is "availability-data".
func (me TsystemimpactTypeType) IsAvailabilityData() bool { return me.String() == "availability-data" }

//	Returns true if the value of this enumerated TsystemimpactTypeType is "breach-proprietary".
func (me TsystemimpactTypeType) IsBreachProprietary() bool {
	return me.String() == "breach-proprietary"
}

//	Returns true if the value of this enumerated TsystemimpactTypeType is "breach-privacy".
func (me TsystemimpactTypeType) IsBreachPrivacy() bool { return me.String() == "breach-privacy" }

//	This convenience method just performs a simple type conversion to TsystemimpactTypeType's alias type xsdt.Nmtoken.
func (me TsystemimpactTypeType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TsystemimpactTypeType is "breach-configuration".
func (me TsystemimpactTypeType) IsBreachConfiguration() bool {
	return me.String() == "breach-configuration"
}

//	Returns true if the value of this enumerated TsystemimpactTypeType is "integrity-hardware".
func (me TsystemimpactTypeType) IsIntegrityHardware() bool {
	return me.String() == "integrity-hardware"
}

//	Returns true if the value of this enumerated TsystemimpactTypeType is "traffic-redirection".
func (me TsystemimpactTypeType) IsTrafficRedirection() bool {
	return me.String() == "traffic-redirection"
}

//	Returns true if the value of this enumerated TsystemimpactTypeType is "integrity-data".
func (me TsystemimpactTypeType) IsIntegrityData() bool { return me.String() == "integrity-data" }

//	Since TsystemimpactTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TsystemimpactTypeType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TsystemimpactTypeType is "cps-manipulation".
func (me TsystemimpactTypeType) IsCpsManipulation() bool { return me.String() == "cps-manipulation" }

//	Returns true if the value of this enumerated TsystemimpactTypeType is "availability-account".
func (me TsystemimpactTypeType) IsAvailabilityAccount() bool {
	return me.String() == "availability-account"
}

//	Returns true if the value of this enumerated TsystemimpactTypeType is "breach-credential".
func (me TsystemimpactTypeType) IsBreachCredential() bool { return me.String() == "breach-credential" }

//	Returns true if the value of this enumerated TsystemimpactTypeType is "availability-service".
func (me TsystemimpactTypeType) IsAvailabilityService() bool {
	return me.String() == "availability-service"
}

//	Returns true if the value of this enumerated TsystemimpactTypeType is "monitoring-traffic".
func (me TsystemimpactTypeType) IsMonitoringTraffic() bool {
	return me.String() == "monitoring-traffic"
}

//	Returns true if the value of this enumerated TsystemimpactTypeType is "policy".
func (me TsystemimpactTypeType) IsPolicy() bool { return me.String() == "policy" }

type XsdGoPkgHasAttr_Type_TsystemimpactTypeType_Unknown struct {
	Type *TsystemimpactTypeType `json:"type,omitempty" xml:" type,attr,omitempty"`
}

//	Returns the default value for Type -- "unknown"
func (me XsdGoPkgHasAttr_Type_TsystemimpactTypeType_Unknown) TypeDefault() TsystemimpactTypeType {
	return TsystemimpactTypeType("unknown")
}

type TxsdSystemImpact struct {
	XsdGoPkgHasAttr_Severity_TseverityType_

	XsdGoPkgHasAttr_Completion_TsystemimpactCompletionType_

	XsdGoPkgHasAttr_Type_TsystemimpactTypeType_Unknown

	XsdGoPkgHasAttr_ExtType_XsdtString_

	XsdGoPkgHasElems_Description
}

// Custom marshal JSON for TxsdSystemImpact
func (u *TxsdSystemImpact) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdSystemImpact

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdSystemImpact
func (u *TxsdSystemImpact) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdSystemImpact

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdSystemImpact function is not nil (ie. was set by outside code), calls it with this TxsdSystemImpact instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TxsdSystemImpact instance.
func (me *TxsdSystemImpact) Walk() (err error) {
	if fn := WalkHandlers.TxsdSystemImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SystemImpact struct {
	SystemImpacts []*TxsdSystemImpact `json:"SystemImpact,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 SystemImpact,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SystemImpact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SystemImpact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SystemImpact instance.
func (me *XsdGoPkgHasElems_SystemImpact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SystemImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SystemImpacts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IncidentCategory struct {
	IncidentCategories   []interface{}    `json:"IncidentCategory,omitempty" xml:"-"`
	IncidentCategoriesML []*TMLStringType `json:"-" xml:"urn:ietf:params:xml:ns:iodef-2.0 IncidentCategory,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IncidentCategory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IncidentCategory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IncidentCategory instance.
func (me *XsdGoPkgHasElems_IncidentCategory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IncidentCategory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IncidentCategoriesML {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IntendedImpact struct {
	IntendedImpacts []*TBusinessImpactType `json:"IntendedImpact,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 IntendedImpact,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IntendedImpact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IntendedImpact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IntendedImpact instance.
func (me *XsdGoPkgHasElems_IntendedImpact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IntendedImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IntendedImpacts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Cause struct {
	Causes   []interface{}        `json:"Cause,omitempty" xml:"-"`
	CauseMLs []*TMLStringType `json:"-" xml:"urn:ietf:params:xml:ns:iodef-2.0 Cause,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Cause function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Cause instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Cause instance.
func (me *XsdGoPkgHasElems_Cause) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Cause; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CauseMLs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdImpact struct{
	XsdGoPkgHasElem_SystemImpact

	XsdGoPkgHasElem_BusinessImpact

	XsdGoPkgHasElem_TimeImpact

	XsdGoPkgHasElem_MonetaryImpact

	XsdGoPkgHasElem_IntendedImpact
}

type TxsdAssessment struct {
	XsdGoPkgHasAttr_Occurrence_TxsdAssessmentOccurrence_

	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasAttr_ObservableId_XsdtId_

	XsdGoPkgHasElems_IncidentCategory

	Impacts []*TxsdImpact `json:"Impact,omitempty" xml:"-"`

	XsdGoPkgHasElems_SystemImpact `json:"-"`

	XsdGoPkgHasElems_BusinessImpact `json:"-"`

	XsdGoPkgHasElems_TimeImpact `json:"-"`

	XsdGoPkgHasElems_MonetaryImpact `json:"-"`

	XsdGoPkgHasElems_IntendedImpact `json:"-"`

	XsdGoPkgHasElems_Counter

	XsdGoPkgHasElems_MitigatingFactor

	XsdGoPkgHasElems_Cause

	XsdGoPkgHasElem_Confidence

	XsdGoPkgHasElems_AdditionalData
}

// Custom marshal JSON for TxsdAssessment
func (u *TxsdAssessment) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdAssessment

	if u.IncidentCategories == nil{
		for _, category := range u.IncidentCategoriesML{
			u.IncidentCategories = append(u.IncidentCategories,category)
		}
	}

	if u.Impacts == nil{
		if u.SystemImpacts != nil{
			for _,impact := range u.SystemImpacts{
				temp := &TxsdImpact{}
				temp.SystemImpact = impact
				u.Impacts = append(u.Impacts,temp)
			}
		}
		if u.BusinessImpacts != nil{
			for _,impact := range u.BusinessImpacts{
				temp := &TxsdImpact{}
				temp.BusinessImpact = impact
				u.Impacts = append(u.Impacts,temp)
			}
		}
		if u.TimeImpacts != nil{
			for _,impact := range u.TimeImpacts{
				temp := &TxsdImpact{}
				temp.TimeImpact = impact
				u.Impacts = append(u.Impacts,temp)
			}
		}
		if u.MonetaryImpacts != nil{
			for _,impact := range u.MonetaryImpacts{
				temp := &TxsdImpact{}
				temp.MonetaryImpact = impact
				u.Impacts = append(u.Impacts,temp)
			}
		}
		if u.IntendedImpacts != nil{
			for _,impact := range u.IntendedImpacts{
				temp := &TxsdImpact{}
				temp.IntendedImpact = impact
				u.Impacts = append(u.Impacts,temp)
			}
		}
	}

	if u.MitigatingFactors == nil {
		for _, factor := range u.MitigatingFactorMLs{
			u.MitigatingFactors = append(u.MitigatingFactors,factor)
		}
	}

	if u.Causes == nil {
		for _, cause := range u.CauseMLs{
			u.Causes = append(u.Causes,cause)
		}
	}
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdAssessment
func (u *TxsdAssessment) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdAssessment

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.IncidentCategories != nil {
		u.IncidentCategoriesML = make([]*TMLStringType, len(u.IncidentCategories))
		for i:=0; i<len(u.IncidentCategories); i++{
			// Check if field is string
			str, ok := u.IncidentCategories[i].(string)
			if ok {
				u.IncidentCategoriesML[i] = &TMLStringType{}
				u.IncidentCategoriesML[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.IncidentCategories[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.IncidentCategoriesML[i] = &TMLStringType{}
					FillStruct(m, u.IncidentCategoriesML[i])
				}
			}			
		}
	}

	if u.Impacts != nil{
		for _,impact:= range u.Impacts{
			if impact.SystemImpact != nil{
				u.SystemImpacts = append(u.SystemImpacts,impact.SystemImpact)
			}
			if impact.BusinessImpact != nil{
				u.BusinessImpacts = append(u.BusinessImpacts,impact.BusinessImpact)
			}
			if impact.TimeImpact != nil{
				u.TimeImpacts = append(u.TimeImpacts,impact.TimeImpact)
			}
			if impact.MonetaryImpact != nil{
				u.MonetaryImpacts = append(u.MonetaryImpacts,impact.MonetaryImpact)
			}
			if impact.IntendedImpact != nil{
				u.IntendedImpacts = append(u.IntendedImpacts,impact.IntendedImpact)
			}
		}
	}

	if u.MitigatingFactors != nil {
		u.MitigatingFactorMLs = make([]*TMLStringType, len(u.MitigatingFactors))
		for i:=0; i<len(u.MitigatingFactors); i++{
			// Check if field is string
			str, ok := u.MitigatingFactors[i].(string)
			if ok {
				u.MitigatingFactorMLs[i] = &TMLStringType{}
				u.MitigatingFactorMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.MitigatingFactors[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.MitigatingFactorMLs[i] = &TMLStringType{}
					FillStruct(m, u.MitigatingFactorMLs[i])
				}
			}			
		}
	}

	if u.Causes != nil {
		u.CauseMLs = make([]*TMLStringType, len(u.Causes))
		for i:=0; i<len(u.Causes);i++{
			// Check if field is string
			str, ok := u.Causes[i].(string)
			if ok {
				u.CauseMLs[i] = &TMLStringType{}
				u.CauseMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Causes[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.CauseMLs[i] = &TMLStringType{}
					FillStruct(m, u.CauseMLs[i])
				}
			}		
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdAssessment function is not nil (ie. was set by outside code), calls it with this TxsdAssessment instance as the single argument. Then calls the Walk() method on 11/15 embed(s) and 0/0 field(s) belonging to this TxsdAssessment instance.
func (me *TxsdAssessment) Walk() (err error) {
	if fn := WalkHandlers.TxsdAssessment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_IntendedImpact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Cause.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Confidence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_BusinessImpact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Counter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_TimeImpact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MonetaryImpact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MitigatingFactor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SystemImpact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_IncidentCategory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Assessment struct {
	Assessments []*TxsdAssessment `json:"Assessment,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Assessment,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Assessment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Assessment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Assessment instance.
func (me *XsdGoPkgHasElems_Assessment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Assessment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Assessments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdReference struct {
	XsdGoPkgHasAttr_ObservableId_XsdtId_

	enum.XsdGoPkgHasElem_ReferenceName

	XsdGoPkgHasElems_Url

	XsdGoPkgHasElems_Description
}

// Custom marshal JSON for TxsdReference
func (u *TxsdReference) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdReference

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdReference
func (u *TxsdReference) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdReference

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdReference function is not nil (ie. was set by outside code), calls it with this TxsdReference instance as the single argument. Then calls the Walk() method on 2/4 embed(s) and 0/0 field(s) belonging to this TxsdReference instance.
func (me *TxsdReference) Walk() (err error) {
	if fn := WalkHandlers.TxsdReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Reference struct {
	References []*TxsdReference `json:"Reference,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Reference,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Reference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Reference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Reference instance.
func (me *XsdGoPkgHasElems_Reference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Reference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.References {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMethod struct {
	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasElems_Reference

	XsdGoPkgHasElems_Description

	sci.XsdGoPkgHasElems_AttackPattern

	sci.XsdGoPkgHasElems_Vulnerability

	sci.XsdGoPkgHasElems_Weakness

	XsdGoPkgHasElems_AdditionalData
}

// Custom marshal JSON for TxsdMethod
func (u *TxsdMethod) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdMethod
	
	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdMethod
func (u *TxsdMethod) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdMethod

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdMethod function is not nil (ie. was set by outside code), calls it with this TxsdMethod instance as the single argument. Then calls the Walk() method on 3/8 embed(s) and 0/0 field(s) belonging to this TxsdMethod instance.
func (me *TxsdMethod) Walk() (err error) {
	if fn := WalkHandlers.TxsdMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Reference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Method struct {
	Methods []*TxsdMethod `json:"Method,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Method,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Method function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Method instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Method instance.
func (me *XsdGoPkgHasElems_Method) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Method; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Methods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RecordItem struct {
	RecordItems []*TExtensionType `json:"RecordItem,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 RecordItem,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RecordItem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RecordItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RecordItem instance.
func (me *XsdGoPkgHasElems_RecordItem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RecordItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RecordItems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FileName struct {
	FileName xsdt.String `json:"FileName,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 FileName,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FileName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FileName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FileName instance.
func (me *XsdGoPkgHasElem_FileName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FileName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdHash struct {
	DigestMethodEncoded xsdt.Base64Binary `json:"DigestMethod,omitempty" xml:"-"`

	ds.XsdGoPkgHasElem_DigestMethod `json:"-"`

	ds.XsdGoPkgHasElem_DigestValue

	CanonicalizationMethodEncoded xsdt.Base64Binary `json:"CanonicalizationMethod,omitempty" xml:"-"`

	ds.XsdGoPkgHasElem_CanonicalizationMethod `json:"-"`

	XsdGoPkgHasElem_Application
}

// Custom marshal JSON for TxsdHash
func (u *TxsdHash) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdHash

	// Encode outer XML to base64
	if u.DigestMethod != nil {
		b , err := eXml.MarshalIndent(u.DigestMethod,"","    ")
		if err != nil {
			return nil, err
		}
		u.DigestMethodEncoded = (xsdt.Base64Binary)(base64.StdEncoding.EncodeToString(b))
	}

	if u.CanonicalizationMethod != nil {
		b , err := eXml.MarshalIndent(u.CanonicalizationMethod,"","    ")
		if err != nil {
			return nil, err
		}
		u.CanonicalizationMethodEncoded = (xsdt.Base64Binary)(base64.StdEncoding.EncodeToString(b))
	}

	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdHash
func (u *TxsdHash) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdHash

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Decode base64 value and unmarshal to XML
	if u.DigestMethodEncoded != "" {
		byteValue, err := base64.StdEncoding.DecodeString(string(u.DigestMethodEncoded))
		if err != nil {
			return err
		}
		u.DigestMethod = &ds.TDigestMethodType{}
		err = eXml.Unmarshal(byteValue, u.DigestMethod)

		if err != nil {
			return err
		}
	}

	if u.CanonicalizationMethodEncoded != "" {
		byteValue, err := base64.StdEncoding.DecodeString(string(u.CanonicalizationMethodEncoded))
		if err != nil {
			return err
		}
		u.CanonicalizationMethod = &ds.TCanonicalizationMethodType{}
		err = eXml.Unmarshal(byteValue, u.CanonicalizationMethod)
		if err != nil {
			return err
		}
	}
	return nil
}

//	If the WalkHandlers.TxsdHash function is not nil (ie. was set by outside code), calls it with this TxsdHash instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TxsdHash instance.
func (me *TxsdHash) Walk() (err error) {
	if fn := WalkHandlers.TxsdHash; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Hash struct {
	Hashs []*TxsdHash `json:"Hash,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Hash,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Hash function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Hash instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Hash instance.
func (me *XsdGoPkgHasElems_Hash) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Hash; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Hashs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FuzzyHashValue struct {
	FuzzyHashValues []*TExtensionType `json:"FuzzyHashValue,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 FuzzyHashValue,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FuzzyHashValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FuzzyHashValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FuzzyHashValue instance.
func (me *XsdGoPkgHasElems_FuzzyHashValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FuzzyHashValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FuzzyHashValues {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFuzzyHash struct {
	XsdGoPkgHasElems_FuzzyHashValue

	XsdGoPkgHasElem_Application

	XsdGoPkgHasElems_AdditionalData
}

//	If the WalkHandlers.TxsdFuzzyHash function is not nil (ie. was set by outside code), calls it with this TxsdFuzzyHash instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdFuzzyHash instance.
func (me *TxsdFuzzyHash) Walk() (err error) {
	if fn := WalkHandlers.TxsdFuzzyHash; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FuzzyHashValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FuzzyHash struct {
	FuzzyHashs []*TxsdFuzzyHash `json:"FuzzyHash,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 FuzzyHash,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FuzzyHash function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FuzzyHash instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FuzzyHash instance.
func (me *XsdGoPkgHasElems_FuzzyHash) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FuzzyHash; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FuzzyHashs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type ThashdataScopeType xsdt.Nmtoken

//	Since ThashdataScopeType is just a simple String type, this merely returns the current string value.
func (me ThashdataScopeType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated ThashdataScopeType is "file-contents".
func (me ThashdataScopeType) IsFileContents() bool { return me.String() == "file-contents" }

//	Returns true if the value of this enumerated ThashdataScopeType is "file-pe-section".
func (me ThashdataScopeType) IsFilePeSection() bool { return me.String() == "file-pe-section" }

//	Returns true if the value of this enumerated ThashdataScopeType is "email-hash".
func (me ThashdataScopeType) IsEmailHash() bool { return me.String() == "email-hash" }

//	Returns true if the value of this enumerated ThashdataScopeType is "ext-value".
func (me ThashdataScopeType) IsExtValue() bool { return me.String() == "ext-value" }

//	Returns true if the value of this enumerated ThashdataScopeType is "email-headers-hash".
func (me ThashdataScopeType) IsEmailHeadersHash() bool { return me.String() == "email-headers-hash" }

//	Returns true if the value of this enumerated ThashdataScopeType is "email-body-hash".
func (me ThashdataScopeType) IsEmailBodyHash() bool { return me.String() == "email-body-hash" }

//	Since ThashdataScopeType is just a simple String type, this merely sets the current value from the specified string.
func (me *ThashdataScopeType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	This convenience method just performs a simple type conversion to ThashdataScopeType's alias type xsdt.Nmtoken.
func (me ThashdataScopeType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated ThashdataScopeType is "file-pe-iat".
func (me ThashdataScopeType) IsFilePeIat() bool { return me.String() == "file-pe-iat" }

//	Returns true if the value of this enumerated ThashdataScopeType is "file-pe-resource".
func (me ThashdataScopeType) IsFilePeResource() bool { return me.String() == "file-pe-resource" }

//	Returns true if the value of this enumerated ThashdataScopeType is "file-pdf-object".
func (me ThashdataScopeType) IsFilePdfObject() bool { return me.String() == "file-pdf-object" }

type XsdGoPkgHasAttr_Scope_ThashdataScopeType_ struct {
	Scope ThashdataScopeType `json:"scope,omitempty" xml:" scope,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExtScope_XsdtString_ struct {
	ExtScope *xsdt.String `json:"ext-scope,omitempty" xml:" ext-scope,attr,omitempty"`
}

type XsdGoPkgHasElem_HashTargetID struct {
	HashTargetID xsdt.String `json:"HashTargetID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 HashTargetID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HashTargetID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HashTargetID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_HashTargetID instance.
func (me *XsdGoPkgHasElem_HashTargetID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HashTargetID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdHashData struct {
	XsdGoPkgHasAttr_Scope_ThashdataScopeType_

	XsdGoPkgHasAttr_ExtScope_XsdtString_

	XsdGoPkgHasElem_HashTargetID

	XsdGoPkgHasElems_Hash

	XsdGoPkgHasElems_FuzzyHash
}

//	If the WalkHandlers.TxsdHashData function is not nil (ie. was set by outside code), calls it with this TxsdHashData instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdHashData instance.
func (me *TxsdHashData) Walk() (err error) {
	if fn := WalkHandlers.TxsdHashData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_FuzzyHash.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HashTargetID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Hash.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HashData struct {
	HashData *TxsdHashData `json:"HashData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 HashData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HashData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HashData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HashData instance.
func (me *XsdGoPkgHasElem_HashData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HashData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.HashData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSignatureData struct {
	ds.XsdGoPkgHasElems_Signature
}

//	If the WalkHandlers.TxsdSignatureData function is not nil (ie. was set by outside code), calls it with this TxsdSignatureData instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdSignatureData instance.
func (me *TxsdSignatureData) Walk() (err error) {
	if fn := WalkHandlers.TxsdSignatureData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SignatureData struct {
	SignatureData *TxsdSignatureData `json:"SignatureData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 SignatureData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SignatureData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SignatureData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SignatureData instance.
func (me *XsdGoPkgHasElem_SignatureData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SignatureData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SignatureData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssociatedSoftware struct {
	AssociatedSoftware *TSoftwareType `json:"AssociatedSoftware,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 AssociatedSoftware,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssociatedSoftware function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssociatedSoftware instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AssociatedSoftware instance.
func (me *XsdGoPkgHasElem_AssociatedSoftware) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssociatedSoftware; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AssociatedSoftware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FileProperties struct {
	FilePropertieses []*TExtensionType `json:"FileProperties,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 FileProperties,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FileProperties function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FileProperties instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FileProperties instance.
func (me *XsdGoPkgHasElems_FileProperties) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FileProperties; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FilePropertieses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FileSize struct {
	FileSize *xsdt.Integer `json:"FileSize,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 FileSize,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FileSize function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FileSize instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FileSize instance.
func (me *XsdGoPkgHasElem_FileSize) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FileSize; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FileType struct {
	FileType xsdt.String `json:"FileType,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 FileType,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FileType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FileType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_FileType instance.
func (me *XsdGoPkgHasElem_FileType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FileType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFile struct {
	XsdGoPkgHasAttr_ObservableId_XsdtId_

	XsdGoPkgHasElem_FileName

	XsdGoPkgHasElem_FileSize

	XsdGoPkgHasElem_FileType

	XsdGoPkgHasElems_Url

	XsdGoPkgHasElem_HashData

	Signatures []xsdt.Base64Binary `json:"Signature,omitempty" xml:"-"`

	XsdGoPkgHasElem_SignatureData `json:"-"`

	XsdGoPkgHasElem_AssociatedSoftware

	XsdGoPkgHasElems_FileProperties
}

// Custom marshal JSON for TxsdFile
func (u *TxsdFile) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdFile

	if u.SignatureData != nil {
		u.Signatures = make([]xsdt.Base64Binary,len(u.SignatureData.Signatures))
		for i:=0; i < len(u.SignatureData.Signatures); i++{
			// Encode outer xml of Signature to base64
			b , err := eXml.MarshalIndent(u.SignatureData.Signatures[i],"","    ")
			if err != nil {
				return nil, err
			}
			u.Signatures[i] = (xsdt.Base64Binary)(base64.StdEncoding.EncodeToString(b))
		}
	}

	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdFile
func (u *TxsdFile) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdFile

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Signatures != nil {
		u.SignatureData = &TxsdSignatureData{}
		u.SignatureData.Signatures = make([]*ds.TSignatureType,len(u.Signatures))
		for i:=0; i < len(u.Signatures); i++{
			if u.Signatures[i] != ""{
				// Decode base64 value and unmarshal to XML
				byteValue, err := base64.StdEncoding.DecodeString(string(u.Signatures[i]))
				if err != nil {
					return err
				}
				u.SignatureData.Signatures[i] = &ds.TSignatureType{}
				err = eXml.Unmarshal(byteValue, u.SignatureData.Signatures[i])
			}
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdFile function is not nil (ie. was set by outside code), calls it with this TxsdFile instance as the single argument. Then calls the Walk() method on 8/9 embed(s) and 0/0 field(s) belonging to this TxsdFile instance.
func (me *TxsdFile) Walk() (err error) {
	if fn := WalkHandlers.TxsdFile; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_FileSize.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FileType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SignatureData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AssociatedSoftware.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FileProperties.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FileName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HashData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_File struct {
	Files []*TxsdFile `json:"File,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 File,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_File function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_File instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_File instance.
func (me *XsdGoPkgHasElems_File) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_File; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Files {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFileData struct {
	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasAttr_ObservableId_XsdtId_

	XsdGoPkgHasElems_File
}

//	If the WalkHandlers.TxsdFileData function is not nil (ie. was set by outside code), calls it with this TxsdFileData instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TxsdFileData instance.
func (me *TxsdFileData) Walk() (err error) {
	if fn := WalkHandlers.TxsdFileData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_File.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FileData struct {
	FileDatas []*TxsdFileData `json:"FileData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 FileData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FileData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FileData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FileData instance.
func (me *XsdGoPkgHasElems_FileData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FileData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.FileDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_KeyName struct {
	KeyName xsdt.String `json:"KeyName,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 KeyName,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_KeyName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_KeyName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_KeyName instance.
func (me *XsdGoPkgHasElem_KeyName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_KeyName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_KeyValue struct {
	KeyValue xsdt.String `json:"KeyValue,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 KeyValue,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Value function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Value instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Value instance.
func (me *XsdGoPkgHasElem_KeyValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_KeyValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Value struct {
	Value xsdt.String `json:"value,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Value,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Value function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Value instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Value instance.
func (me *XsdGoPkgHasElem_Value) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Value; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TkeyRegistryactionType xsdt.Nmtoken

//	Returns true if the value of this enumerated TkeyRegistryactionType is "ext-value".
func (me TkeyRegistryactionType) IsExtValue() bool { return me.String() == "ext-value" }

//	Returns true if the value of this enumerated TkeyRegistryactionType is "add-key".
func (me TkeyRegistryactionType) IsAddKey() bool { return me.String() == "add-key" }

//	Returns true if the value of this enumerated TkeyRegistryactionType is "add-value".
func (me TkeyRegistryactionType) IsAddValue() bool { return me.String() == "add-value" }

//	Returns true if the value of this enumerated TkeyRegistryactionType is "delete-value".
func (me TkeyRegistryactionType) IsDeleteValue() bool { return me.String() == "delete-value" }

//	Returns true if the value of this enumerated TkeyRegistryactionType is "modify-value".
func (me TkeyRegistryactionType) IsModifyValue() bool { return me.String() == "modify-value" }

//	Returns true if the value of this enumerated TkeyRegistryactionType is "modify-key".
func (me TkeyRegistryactionType) IsModifyKey() bool { return me.String() == "modify-key" }

//	Since TkeyRegistryactionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TkeyRegistryactionType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TkeyRegistryactionType is just a simple String type, this merely returns the current string value.
func (me TkeyRegistryactionType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TkeyRegistryactionType's alias type xsdt.Nmtoken.
func (me TkeyRegistryactionType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TkeyRegistryactionType is "delete-key".
func (me TkeyRegistryactionType) IsDeleteKey() bool { return me.String() == "delete-key" }

type XsdGoPkgHasAttr_Registryaction_TkeyRegistryactionType_ struct {
	Registryaction TkeyRegistryactionType `json:"registryaction,omitempty" xml:" registryaction,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExtRegistryaction_XsdtString_ struct {
	ExtRegistryaction *xsdt.String `json:"ext-registryaction,omitempty" xml:" ext-registryaction,attr,omitempty"`
}

type TxsdKey struct {
	XsdGoPkgHasAttr_Registryaction_TkeyRegistryactionType_

	XsdGoPkgHasAttr_ExtRegistryaction_XsdtString_

	XsdGoPkgHasAttr_ObservableId_XsdtId_

	XsdGoPkgHasElem_KeyName

	XsdGoPkgHasElem_KeyValue
}

//	If the WalkHandlers.TxsdKey function is not nil (ie. was set by outside code), calls it with this TxsdKey instance as the single argument. Then calls the Walk() method on 2/5 embed(s) and 0/0 field(s) belonging to this TxsdKey instance.
func (me *TxsdKey) Walk() (err error) {
	if fn := WalkHandlers.TxsdKey; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_KeyName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_KeyValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Key struct {
	Keys []*TxsdKey `json:"Key,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Key,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Key function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Key instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Key instance.
func (me *XsdGoPkgHasElems_Key) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Key; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Keys {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdWindowsRegistryKeysModified struct {
	XsdGoPkgHasAttr_ObservableId_XsdtId_

	XsdGoPkgHasElems_Key
}

//	If the WalkHandlers.TxsdWindowsRegistryKeysModified function is not nil (ie. was set by outside code), calls it with this TxsdWindowsRegistryKeysModified instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdWindowsRegistryKeysModified instance.
func (me *TxsdWindowsRegistryKeysModified) Walk() (err error) {
	if fn := WalkHandlers.TxsdWindowsRegistryKeysModified; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Key.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_WindowsRegistryKeysModified struct {
	WindowsRegistryKeysModifieds []*TxsdWindowsRegistryKeysModified `json:"WindowsRegistryKeysModified,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 WindowsRegistryKeysModified,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_WindowsRegistryKeysModified function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_WindowsRegistryKeysModified instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_WindowsRegistryKeysModified instance.
func (me *XsdGoPkgHasElems_WindowsRegistryKeysModified) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_WindowsRegistryKeysModified; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.WindowsRegistryKeysModifieds {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCertificate struct {
	XsdGoPkgHasAttr_ObservableId_XsdtId_

	X509DataEncoded xsdt.Base64Binary `json:"X509Data,omitempty" xml:"-"`

	ds.XsdGoPkgHasElem_X509Data `json:"-"`

	XsdGoPkgHasElems_Description
}

// Custom marshal JSON for TxsdCertificate
func (u *TxsdCertificate) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdCertificate

	// Encode outer XML of X509Data to base64
	if u.X509Data != nil {
		b , err := eXml.MarshalIndent(u.X509Data,"","    ")
		if err != nil {
			return nil, err
		}
		u.X509DataEncoded = (xsdt.Base64Binary)(base64.StdEncoding.EncodeToString(b))
	}

	// Fill data for JSON exclusive struct
	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}

	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdCertificate
func (u *TxsdCertificate) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdCertificate

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Decode base64 value and unmarshal to XML
	byteValue, err := base64.StdEncoding.DecodeString(string(u.X509DataEncoded))
	if err != nil {
		return err
	}
	u.X509Data = &ds.Tx509DataType{}
	err = eXml.Unmarshal(byteValue, u.X509Data)

	if err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			if str, ok := u.Descriptions[i].(string); ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				if m,ok := u.Descriptions[i].(map[string]interface{}); ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdCertificate function is not nil (ie. was set by outside code), calls it with this TxsdCertificate instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdCertificate instance.
func (me *TxsdCertificate) Walk() (err error) {
	if fn := WalkHandlers.TxsdCertificate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Certificate struct {
	Certificates []*TxsdCertificate `json:"Certificate,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Certificate,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Certificate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Certificate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Certificate instance.
func (me *XsdGoPkgHasElems_Certificate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Certificate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Certificates {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCertificateData struct {
	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasAttr_ObservableId_XsdtId_

	XsdGoPkgHasElems_Certificate
}

//	If the WalkHandlers.TxsdCertificateData function is not nil (ie. was set by outside code), calls it with this TxsdCertificateData instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TxsdCertificateData instance.
func (me *TxsdCertificateData) Walk() (err error) {
	if fn := WalkHandlers.TxsdCertificateData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Certificate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_CertificateData struct {
	CertificateDatas []*TxsdCertificateData `json:"CertificateData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 CertificateData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_CertificateData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_CertificateData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_CertificateData instance.
func (me *XsdGoPkgHasElems_CertificateData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_CertificateData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.CertificateDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Offset_XsdtInteger_ struct {
	Offset *xsdt.Integer `json:"offset,omitempty" xml:" offset,attr,omitempty"`
}

type TrecordpatternOffsetunitType xsdt.Nmtoken

//	Returns true if the value of this enumerated TrecordpatternOffsetunitType is "ext-value".
func (me TrecordpatternOffsetunitType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TrecordpatternOffsetunitType is just a simple String type, this merely sets the current value from the specified string.
func (me *TrecordpatternOffsetunitType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TrecordpatternOffsetunitType is just a simple String type, this merely returns the current string value.
func (me TrecordpatternOffsetunitType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TrecordpatternOffsetunitType's alias type xsdt.Nmtoken.
func (me TrecordpatternOffsetunitType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TrecordpatternOffsetunitType is "line".
func (me TrecordpatternOffsetunitType) IsLine() bool { return me.String() == "line" }

//	Returns true if the value of this enumerated TrecordpatternOffsetunitType is "byte".
func (me TrecordpatternOffsetunitType) IsByte() bool { return me.String() == "byte" }

type XsdGoPkgHasAttr_Offsetunit_TrecordpatternOffsetunitType_Line struct {
	Offsetunit *TrecordpatternOffsetunitType `json:"offsetunit,omitempty" xml:" offsetunit,attr,omitempty"`
}

//	Returns the default value for Offsetunit -- "line"
func (me XsdGoPkgHasAttr_Offsetunit_TrecordpatternOffsetunitType_Line) OffsetunitDefault() TrecordpatternOffsetunitType {
	return TrecordpatternOffsetunitType("line")
}

type XsdGoPkgHasAttr_ExtOffsetunit_XsdtString_ struct {
	ExtOffsetunit *xsdt.String `json:"ext-offsetunit,omitempty" xml:" ext-offsetunit,attr,omitempty"`
}

type XsdGoPkgHasAttr_Instance_XsdtInteger_ struct {
	Instance *xsdt.Integer `json:"instance,omitempty" xml:" instance,attr,omitempty"`
}

type TrecordpatternTypeType xsdt.Nmtoken

//	Returns true if the value of this enumerated TrecordpatternTypeType is "xpath".
func (me TrecordpatternTypeType) IsXpath() bool { return me.String() == "xpath" }

//	Returns true if the value of this enumerated TrecordpatternTypeType is "ext-value".
func (me TrecordpatternTypeType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TrecordpatternTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TrecordpatternTypeType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TrecordpatternTypeType is just a simple String type, this merely returns the current string value.
func (me TrecordpatternTypeType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TrecordpatternTypeType's alias type xsdt.Nmtoken.
func (me TrecordpatternTypeType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TrecordpatternTypeType is "regex".
func (me TrecordpatternTypeType) IsRegex() bool { return me.String() == "regex" }

//	Returns true if the value of this enumerated TrecordpatternTypeType is "binary".
func (me TrecordpatternTypeType) IsBinary() bool { return me.String() == "binary" }

type XsdGoPkgHasAttr_Type_TrecordpatternTypeType_ struct {
	Type TrecordpatternTypeType `json:"type,omitempty" xml:" type,attr,omitempty"`
}

type TxsdRecordPattern struct {
	XsdGoPkgHasAttr_Type_TrecordpatternTypeType_

	XsdGoPkgHasAttr_ExtType_XsdtString_

	XsdGoPkgHasAttr_Offset_XsdtInteger_

	XsdGoPkgHasAttr_Offsetunit_TrecordpatternOffsetunitType_Line

	XsdGoPkgHasAttr_ExtOffsetunit_XsdtString_

	XsdGoPkgHasAttr_Instance_XsdtInteger_

	XsdGoPkgHasCdata_Value
}

//	If the WalkHandlers.TxsdRecordPattern function is not nil (ie. was set by outside code), calls it with this TxsdRecordPattern instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TxsdRecordPattern instance.
func (me *TxsdRecordPattern) Walk() (err error) {
	if fn := WalkHandlers.TxsdRecordPattern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata_Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RecordPattern struct {
	RecordPatterns []*TxsdRecordPattern `json:"RecordPattern,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 RecordPattern,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RecordPattern function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RecordPattern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RecordPattern instance.
func (me *XsdGoPkgHasElems_RecordPattern) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RecordPattern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RecordPatterns {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRecordData struct {
	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasAttr_ObservableId_XsdtId_
	
	XsdGoPkgHasElem_DateTime

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElem_Application

	XsdGoPkgHasElems_RecordPattern

	XsdGoPkgHasElems_RecordItem

	XsdGoPkgHasElems_Url

	XsdGoPkgHasElems_FileData

	XsdGoPkgHasElems_WindowsRegistryKeysModified

	XsdGoPkgHasElems_CertificateData

	XsdGoPkgHasElems_AdditionalData
}

// Custom marshal JSON for TxsdRecordData
func (u *TxsdRecordData) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdRecordData

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdRecordData
func (u *TxsdRecordData) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdRecordData

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdRecordData function is not nil (ie. was set by outside code), calls it with this TxsdRecordData instance as the single argument. Then calls the Walk() method on 10/13 embed(s) and 0/0 field(s) belonging to this TxsdRecordData instance.
func (me *TxsdRecordData) Walk() (err error) {
	if fn := WalkHandlers.TxsdRecordData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RecordPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RecordItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_FileData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_WindowsRegistryKeysModified.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_CertificateData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DateTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RecordData struct {
	RecordDatas []*TxsdRecordData `json:"RecordData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 RecordData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RecordData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RecordData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RecordData instance.
func (me *XsdGoPkgHasElems_RecordData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RecordData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RecordDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRecord struct {
	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasElems_RecordData
}

//	If the WalkHandlers.TxsdRecord function is not nil (ie. was set by outside code), calls it with this TxsdRecord instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdRecord instance.
func (me *TxsdRecord) Walk() (err error) {
	if fn := WalkHandlers.TxsdRecord; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_RecordData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Record struct {
	Record *TxsdRecord `json:"Record,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Record,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Record function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Record instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Record instance.
func (me *XsdGoPkgHasElem_Record) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Record; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Record.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OperatingSystem struct {
	OperatingSystems []*TSoftwareType `json:"OperatingSystem,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 OperatingSystem,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OperatingSystem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OperatingSystem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OperatingSystem instance.
func (me *XsdGoPkgHasElems_OperatingSystem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OperatingSystem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OperatingSystems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TyesNoUnknownType xsdt.Nmtoken

//	Since TyesNoUnknownType is just a simple String type, this merely returns the current string value.
func (me TyesNoUnknownType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TyesNoUnknownType's alias type xsdt.Nmtoken.
func (me TyesNoUnknownType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TyesNoUnknownType is "yes".
func (me TyesNoUnknownType) IsYes() bool { return me.String() == "yes" }

//	Returns true if the value of this enumerated TyesNoUnknownType is "no".
func (me TyesNoUnknownType) IsNo() bool { return me.String() == "no" }

//	Returns true if the value of this enumerated TyesNoUnknownType is "unknown".
func (me TyesNoUnknownType) IsUnknown() bool { return me.String() == "unknown" }

//	Since TyesNoUnknownType is just a simple String type, this merely sets the current value from the specified string.
func (me *TyesNoUnknownType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

type XsdGoPkgHasAttr_Virtual_TyesNoUnknownType_Unknown struct {
	Virtual *TyesNoUnknownType `json:"virtual,omitempty" xml:" virtual,attr,omitempty"`
}

//	Returns the default value for Virtual -- "unknown"
func (me XsdGoPkgHasAttr_Virtual_TyesNoUnknownType_Unknown) VirtualDefault() TyesNoUnknownType {
	return TyesNoUnknownType("unknown")
}

type TnoderoleCategoryType xsdt.Nmtoken

//	This convenience method just performs a simple type conversion to TnoderoleCategoryType's alias type xsdt.Nmtoken.
func (me TnoderoleCategoryType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "mail".
func (me TnoderoleCategoryType) IsMail() bool { return me.String() == "mail" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "streaming".
func (me TnoderoleCategoryType) IsStreaming() bool { return me.String() == "streaming" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "fraudulent-site".
func (me TnoderoleCategoryType) IsFraudulentSite() bool { return me.String() == "fraudulent-site" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "client".
func (me TnoderoleCategoryType) IsClient() bool { return me.String() == "client" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "virtualization".
func (me TnoderoleCategoryType) IsVirtualization() bool { return me.String() == "virtualization" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "honeypot".
func (me TnoderoleCategoryType) IsHoneypot() bool { return me.String() == "honeypot" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "www".
func (me TnoderoleCategoryType) IsWww() bool { return me.String() == "www" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "file".
func (me TnoderoleCategoryType) IsFile() bool { return me.String() == "file" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "dhcp".
func (me TnoderoleCategoryType) IsDhcp() bool { return me.String() == "dhcp" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "remote-access".
func (me TnoderoleCategoryType) IsRemoteAccess() bool { return me.String() == "remote-access" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "database".
func (me TnoderoleCategoryType) IsDatabase() bool { return me.String() == "database" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "infra-router".
func (me TnoderoleCategoryType) IsInfraRouter() bool { return me.String() == "infra-router" }

//	Since TnoderoleCategoryType is just a simple String type, this merely sets the current value from the specified string.
func (me *TnoderoleCategoryType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TnoderoleCategoryType is just a simple String type, this merely returns the current string value.
func (me TnoderoleCategoryType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "malware-distribution".
func (me TnoderoleCategoryType) IsMalwareDistribution() bool {
	return me.String() == "malware-distribution"
}

//	Returns true if the value of this enumerated TnoderoleCategoryType is "credential".
func (me TnoderoleCategoryType) IsCredential() bool { return me.String() == "credential" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "ext-value".
func (me TnoderoleCategoryType) IsExtValue() bool { return me.String() == "ext-value" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "name".
func (me TnoderoleCategoryType) IsName() bool { return me.String() == "name" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "monitoring".
func (me TnoderoleCategoryType) IsMonitoring() bool { return me.String() == "monitoring" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "infra-switch".
func (me TnoderoleCategoryType) IsInfraSwitch() bool { return me.String() == "infra-switch" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "drop-server".
func (me TnoderoleCategoryType) IsDropServer() bool { return me.String() == "drop-server" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "webmail".
func (me TnoderoleCategoryType) IsWebmail() bool { return me.String() == "webmail" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "hop-point".
func (me TnoderoleCategoryType) IsHopPoint() bool { return me.String() == "hop-point" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "log".
func (me TnoderoleCategoryType) IsLog() bool { return me.String() == "log" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "client-remote".
func (me TnoderoleCategoryType) IsClientRemote() bool { return me.String() == "client-remote" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "client-mobile".
func (me TnoderoleCategoryType) IsClientMobile() bool { return me.String() == "client-mobile" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "config-management".
func (me TnoderoleCategoryType) IsConfigManagement() bool { return me.String() == "config-management" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "infra".
func (me TnoderoleCategoryType) IsInfra() bool { return me.String() == "infra" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "backup".
func (me TnoderoleCategoryType) IsBackup() bool { return me.String() == "backup" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "scada-supervisory".
func (me TnoderoleCategoryType) IsScadaSupervisory() bool { return me.String() == "scada-supervisory" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "anonymization".
func (me TnoderoleCategoryType) IsAnonymization() bool { return me.String() == "anonymization" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "spear-phishing-site".
func (me TnoderoleCategoryType) IsSpearPhishingSite() bool {
	return me.String() == "spear-phishing-site"
}

//	Returns true if the value of this enumerated TnoderoleCategoryType is "client-kiosk".
func (me TnoderoleCategoryType) IsClientKiosk() bool { return me.String() == "client-kiosk" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "p2p".
func (me TnoderoleCategoryType) IsP2P() bool { return me.String() == "p2p" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "directory".
func (me TnoderoleCategoryType) IsDirectory() bool { return me.String() == "directory" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "application".
func (me TnoderoleCategoryType) IsApplication() bool { return me.String() == "application" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "server-public".
func (me TnoderoleCategoryType) IsServerPublic() bool { return me.String() == "server-public" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "proxy".
func (me TnoderoleCategoryType) IsProxy() bool { return me.String() == "proxy" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "client-enterprise".
func (me TnoderoleCategoryType) IsClientEnterprise() bool { return me.String() == "client-enterprise" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "server-internal".
func (me TnoderoleCategoryType) IsServerInternal() bool { return me.String() == "server-internal" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "voice".
func (me TnoderoleCategoryType) IsVoice() bool { return me.String() == "voice" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "ftp".
func (me TnoderoleCategoryType) IsFtp() bool { return me.String() == "ftp" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "scada".
func (me TnoderoleCategoryType) IsScada() bool { return me.String() == "scada" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "sinkhole".
func (me TnoderoleCategoryType) IsSinkhole() bool { return me.String() == "sinkhole" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "c2-server".
func (me TnoderoleCategoryType) IsC2Server() bool { return me.String() == "c2-server" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "reflector".
func (me TnoderoleCategoryType) IsReflector() bool { return me.String() == "reflector" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "camera".
func (me TnoderoleCategoryType) IsCamera() bool { return me.String() == "camera" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "pos".
func (me TnoderoleCategoryType) IsPos() bool { return me.String() == "pos" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "phishing-site".
func (me TnoderoleCategoryType) IsPhishingSite() bool { return me.String() == "phishing-site" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "messaging".
func (me TnoderoleCategoryType) IsMessaging() bool { return me.String() == "messaging" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "assessment".
func (me TnoderoleCategoryType) IsAssessment() bool { return me.String() == "assessment" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "source-control".
func (me TnoderoleCategoryType) IsSourceControl() bool { return me.String() == "source-control" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "infra-firewall".
func (me TnoderoleCategoryType) IsInfraFirewall() bool { return me.String() == "infra-firewall" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "client-partner".
func (me TnoderoleCategoryType) IsClientPartner() bool { return me.String() == "client-partner" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "print".
func (me TnoderoleCategoryType) IsPrint() bool { return me.String() == "print" }

//	Returns true if the value of this enumerated TnoderoleCategoryType is "recruiting-site".
func (me TnoderoleCategoryType) IsRecruitingSite() bool { return me.String() == "recruiting-site" }

type XsdGoPkgHasAttr_Category_TnoderoleCategoryType_ struct {
	Category TnoderoleCategoryType `json:"category,omitempty" xml:" category,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExtCategory_XsdtString_ struct {
	ExtCategory *xsdt.String `json:"ext-category,omitempty" xml:" ext-category,attr,omitempty"`
}

type TxsdNodeRole struct {
	XsdGoPkgHasAttr_Category_TnoderoleCategoryType_

	XsdGoPkgHasAttr_ExtCategory_XsdtString_

	XsdGoPkgHasElems_Description
}

// Custom marshal JSON for TxsdNodeRole
func (u *TxsdNodeRole) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdNodeRole
	
	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdNodeRole
func (u *TxsdNodeRole) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdNodeRole

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdNodeRole function is not nil (ie. was set by outside code), calls it with this TxsdNodeRole instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdNodeRole instance.
func (me *TxsdNodeRole) Walk() (err error) {
	if fn := WalkHandlers.TxsdNodeRole; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NodeRole struct {
	NodeRoles []*TxsdNodeRole `json:"NodeRole,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 NodeRole,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NodeRole function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NodeRole instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NodeRole instance.
func (me *XsdGoPkgHasElems_NodeRole) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NodeRole; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NodeRoles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssetIDsequenceTxsdSystemSystemschema_AssetID_XsdtString_ struct {
	AssetIDs []xsdt.String `json:"AssetID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 AssetID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssetIDsequenceTxsdSystemSystemschema_AssetID_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssetIDsequenceTxsdSystemSystemschema_AssetID_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssetIDsequenceTxsdSystemSystemschema_AssetID_XsdtString_ instance.
func (me *XsdGoPkgHasElems_AssetIDsequenceTxsdSystemSystemschema_AssetID_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssetIDsequenceTxsdSystemSystemschema_AssetID_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TsystemCategoryType xsdt.Nmtoken

//	Since TsystemCategoryType is just a simple String type, this merely sets the current value from the specified string.
func (me *TsystemCategoryType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TsystemCategoryType is "source".
func (me TsystemCategoryType) IsSource() bool { return me.String() == "source" }

//	Returns true if the value of this enumerated TsystemCategoryType is "target".
func (me TsystemCategoryType) IsTarget() bool { return me.String() == "target" }

//	Returns true if the value of this enumerated TsystemCategoryType is "intermediate".
func (me TsystemCategoryType) IsIntermediate() bool { return me.String() == "intermediate" }

//	Returns true if the value of this enumerated TsystemCategoryType is "sensor".
func (me TsystemCategoryType) IsSensor() bool { return me.String() == "sensor" }

//	Returns true if the value of this enumerated TsystemCategoryType is "infrastructure".
func (me TsystemCategoryType) IsInfrastructure() bool { return me.String() == "infrastructure" }

//	Since TsystemCategoryType is just a simple String type, this merely returns the current string value.
func (me TsystemCategoryType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TsystemCategoryType's alias type xsdt.Nmtoken.
func (me TsystemCategoryType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TsystemCategoryType is "ext-value".
func (me TsystemCategoryType) IsExtValue() bool { return me.String() == "ext-value" }

type XsdGoPkgHasAttr_Category_TsystemCategoryType_ struct {
	Category TsystemCategoryType `json:"category,omitempty" xml:" category,attr,omitempty"`
}

type XsdGoPkgHasAttr_Interface_XsdtString_ struct {
	Interface xsdt.String `json:"interface,omitempty" xml:" interface,attr,omitempty"`
}

type XsdGoPkgHasAttr_Spoofed_TyesNoUnknownType_Unknown struct {
	Spoofed TyesNoUnknownType `json:"spoofed,omitempty" xml:" spoofed,attr,omitempty"`
}

//	Returns the default value for Spoofed -- "unknown"
func (me XsdGoPkgHasAttr_Spoofed_TyesNoUnknownType_Unknown) SpoofedDefault() TyesNoUnknownType {
	return TyesNoUnknownType("unknown")
}

type TsystemOwnershipType xsdt.Nmtoken

//	Returns true if the value of this enumerated TsystemOwnershipType is "partner".
func (me TsystemOwnershipType) IsPartner() bool { return me.String() == "partner" }

//	Returns true if the value of this enumerated TsystemOwnershipType is "no-relationship".
func (me TsystemOwnershipType) IsNoRelationship() bool { return me.String() == "no-relationship" }

//	Returns true if the value of this enumerated TsystemOwnershipType is "ext-value".
func (me TsystemOwnershipType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TsystemOwnershipType is just a simple String type, this merely sets the current value from the specified string.
func (me *TsystemOwnershipType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TsystemOwnershipType is just a simple String type, this merely returns the current string value.
func (me TsystemOwnershipType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TsystemOwnershipType's alias type xsdt.Nmtoken.
func (me TsystemOwnershipType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TsystemOwnershipType is "organization".
func (me TsystemOwnershipType) IsOrganization() bool { return me.String() == "organization" }

//	Returns true if the value of this enumerated TsystemOwnershipType is "personal".
func (me TsystemOwnershipType) IsPersonal() bool { return me.String() == "personal" }

//	Returns true if the value of this enumerated TsystemOwnershipType is "customer".
func (me TsystemOwnershipType) IsCustomer() bool { return me.String() == "customer" }

//	Returns true if the value of this enumerated TsystemOwnershipType is "unknown".
func (me TsystemOwnershipType) IsUnknown() bool { return me.String() == "unknown" }

type XsdGoPkgHasAttr_Ownership_TsystemOwnershipType_ struct {
	Ownership *TsystemOwnershipType `json:"ownership,omitempty" xml:" ownership,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExtOwnership_XsdtString_ struct {
	ExtOwnership *xsdt.String `json:"ext-ownership,omitempty" xml:" ext-ownership,attr,omitempty"`
}

type XsdGoPkgHasElem_PostalAddress struct {
	PostalAddress *TxsdPostalAddress `json:"PostalAddress,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 PostalAddress,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PostalAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PostalAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PostalAddress instance.
func (me *XsdGoPkgHasElem_PostalAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PostalAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PostalAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Location struct {
	Locations   []interface{}    `json:"Location,omitempty" xml:"-"`
	LocationMLs []*TMLStringType `json:"-" xml:"urn:ietf:params:xml:ns:iodef-2.0 Location,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Location function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Location instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Location instance.
func (me *XsdGoPkgHasElems_Location) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Location; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.LocationMLs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RelatedDNS struct {
	RelatedDNSs []*TExtensionType `json:"RelatedDNS,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 RelatedDNS,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RelatedDNS function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RelatedDNS instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RelatedDNS instance.
func (me *XsdGoPkgHasElems_RelatedDNS) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RelatedDNS; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RelatedDNSs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ExtDomainStatus_XsdtString_ struct {
	ExtDomainStatus *xsdt.String `json:"ext-domain-status,omitempty" xml:" ext-domain-status,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExtSystemStatus_XsdtString_ struct {
	ExtSystemStatus *xsdt.String `json:"ext-system-status,omitempty" xml:" ext-system-status,attr,omitempty"`
}

type XsdGoPkgHasElem_ExpirationDate struct {
	ExpirationDate xsdt.DateTime `json:"ExpirationDate,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ExpirationDate,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ExpirationDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ExpirationDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ExpirationDate instance.
func (me *XsdGoPkgHasElem_ExpirationDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ExpirationDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Server struct {
	Server xsdt.String `json:"Server,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Server,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Server function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Server instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Server instance.
func (me *XsdGoPkgHasElem_Server) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Server; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_VlanName_XsdtString_ struct {
	VlanName xsdt.String `json:"vlan-name,omitempty" xml:" vlan-name,attr,omitempty"`
}

type XsdGoPkgHasAttr_VlanNum_XsdtInteger_ struct {
	VlanNum *xsdt.Integer `json:"vlan-num,omitempty" xml:" vlan-num,attr,omitempty"`
}

type TaddressCategoryType xsdt.Nmtoken

//	Returns true if the value of this enumerated TaddressCategoryType is "ipv4-net-masked".
func (me TaddressCategoryType) IsIpv4NetMasked() bool { return me.String() == "ipv4-net-masked" }

//	Returns true if the value of this enumerated TaddressCategoryType is "ipv6-addr".
func (me TaddressCategoryType) IsIpv6Addr() bool { return me.String() == "ipv6-addr" }

//	Returns true if the value of this enumerated TaddressCategoryType is "ipv6-net-masked".
func (me TaddressCategoryType) IsIpv6NetMasked() bool { return me.String() == "ipv6-net-masked" }

//	Returns true if the value of this enumerated TaddressCategoryType is "site-uri".
func (me TaddressCategoryType) IsSiteUri() bool { return me.String() == "site-uri" }

//	This convenience method just performs a simple type conversion to TaddressCategoryType's alias type xsdt.Nmtoken.
func (me TaddressCategoryType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TaddressCategoryType is "asn".
func (me TaddressCategoryType) IsAsn() bool { return me.String() == "asn" }

//	Returns true if the value of this enumerated TaddressCategoryType is "atm".
func (me TaddressCategoryType) IsAtm() bool { return me.String() == "atm" }

//	Returns true if the value of this enumerated TaddressCategoryType is "ipv6-net".
func (me TaddressCategoryType) IsIpv6Net() bool { return me.String() == "ipv6-net" }

//	Since TaddressCategoryType is just a simple String type, this merely returns the current string value.
func (me TaddressCategoryType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TaddressCategoryType is "mac".
func (me TaddressCategoryType) IsMac() bool { return me.String() == "mac" }

//	Returns true if the value of this enumerated TaddressCategoryType is "ipv4-net".
func (me TaddressCategoryType) IsIpv4Net() bool { return me.String() == "ipv4-net" }

//	Since TaddressCategoryType is just a simple String type, this merely sets the current value from the specified string.
func (me *TaddressCategoryType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TaddressCategoryType is "ext-value".
func (me TaddressCategoryType) IsExtValue() bool { return me.String() == "ext-value" }

//	Returns true if the value of this enumerated TaddressCategoryType is "e-mail".
func (me TaddressCategoryType) IsEMail() bool { return me.String() == "e-mail" }

//	Returns true if the value of this enumerated TaddressCategoryType is "ipv4-addr".
func (me TaddressCategoryType) IsIpv4Addr() bool { return me.String() == "ipv4-addr" }

//	Returns true if the value of this enumerated TaddressCategoryType is "ipv4-net-mask".
func (me TaddressCategoryType) IsIpv4NetMask() bool { return me.String() == "ipv4-net-mask" }

type XsdGoPkgHasAttr_Category_TaddressCategoryType_Ipv6Addr struct {
	Category TaddressCategoryType `json:"category,omitempty" xml:" category,attr,omitempty"`
}

//	Returns the default value for Category -- "ipv6-addr"
func (me XsdGoPkgHasAttr_Category_TaddressCategoryType_Ipv6Addr) CategoryDefault() TaddressCategoryType {
	return TaddressCategoryType("ipv6-addr")
}

type TxsdAddress struct {
	XsdGoPkgHasCdata_Value

	XsdGoPkgHasAttr_Category_TaddressCategoryType_Ipv6Addr

	XsdGoPkgHasAttr_ExtCategory_XsdtString_

	XsdGoPkgHasAttr_VlanName_XsdtString_

	XsdGoPkgHasAttr_VlanNum_XsdtInteger_

	XsdGoPkgHasAttr_ObservableId_XsdtId_
}

//	If the WalkHandlers.TxsdAddress function is not nil (ie. was set by outside code), calls it with this TxsdAddress instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdAddress instance.
func (me *TxsdAddress) Walk() (err error) {
	if fn := WalkHandlers.TxsdAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata_Value.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Address struct {
	Addresses []*TxsdAddress `json:"Address,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Address,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Address function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Address instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Address instance.
func (me *XsdGoPkgHasElems_Address) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Address; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Addresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdNameservers struct {
	XsdGoPkgHasElem_Server

	XsdGoPkgHasElems_Address
}

//	If the WalkHandlers.TxsdNameservers function is not nil (ie. was set by outside code), calls it with this TxsdNameservers instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdNameservers instance.
func (me *TxsdNameservers) Walk() (err error) {
	if fn := WalkHandlers.TxsdNameservers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Server.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Nameservers struct {
	Nameserverses []*TxsdNameservers `json:"NameServers,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Nameservers,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Nameservers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Nameservers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Nameservers instance.
func (me *XsdGoPkgHasElems_Nameservers) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Nameservers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Nameserverses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SameDomainContact struct {
	SameDomainContact xsdt.String `json:"SameDomainContact,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 SameDomainContact,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SameDomainContact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SameDomainContact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_SameDomainContact instance.
func (me *XsdGoPkgHasElem_SameDomainContact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SameDomainContact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdDomainContacts struct {
	XsdGoPkgHasElem_SameDomainContact

	XsdGoPkgHasElems_Contact
}

//	If the WalkHandlers.TxsdDomainContacts function is not nil (ie. was set by outside code), calls it with this TxsdDomainContacts instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdDomainContacts instance.
func (me *TxsdDomainContacts) Walk() (err error) {
	if fn := WalkHandlers.TxsdDomainContacts; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Contact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_SameDomainContact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DomainContacts struct {
	DomainContacts *TxsdDomainContacts `json:"DomainContacts,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 DomainContacts,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DomainContacts function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DomainContacts instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DomainContacts instance.
func (me *XsdGoPkgHasElem_DomainContacts) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DomainContacts; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DomainContacts.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TdomaindataDomainStatusType xsdt.String

//	Returns true if the value of this enumerated TdomaindataDomainStatusType is "assignedAndOnHold".
func (me TdomaindataDomainStatusType) IsAssignedAndOnHold() bool {
	return me.String() == "assignedAndOnHold"
}

//	Returns true if the value of this enumerated TdomaindataDomainStatusType is "registryLock".
func (me TdomaindataDomainStatusType) IsRegistryLock() bool { return me.String() == "registryLock" }

//	Returns true if the value of this enumerated TdomaindataDomainStatusType is "ext-value".
func (me TdomaindataDomainStatusType) IsExtValue() bool { return me.String() == "ext-value" }

//	This convenience method just performs a simple type conversion to TdomaindataDomainStatusType's alias type xsdt.String.
func (me TdomaindataDomainStatusType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TdomaindataDomainStatusType is "assignedAndActive".
func (me TdomaindataDomainStatusType) IsAssignedAndActive() bool {
	return me.String() == "assignedAndActive"
}

//	Returns true if the value of this enumerated TdomaindataDomainStatusType is "registrarLock".
func (me TdomaindataDomainStatusType) IsRegistrarLock() bool { return me.String() == "registrarLock" }

//	Returns true if the value of this enumerated TdomaindataDomainStatusType is "other".
func (me TdomaindataDomainStatusType) IsOther() bool { return me.String() == "other" }

//	Returns true if the value of this enumerated TdomaindataDomainStatusType is "revoked".
func (me TdomaindataDomainStatusType) IsRevoked() bool { return me.String() == "revoked" }

//	Returns true if the value of this enumerated TdomaindataDomainStatusType is "transferPending".
func (me TdomaindataDomainStatusType) IsTransferPending() bool {
	return me.String() == "transferPending"
}

//	Since TdomaindataDomainStatusType is just a simple String type, this merely returns the current string value.
func (me TdomaindataDomainStatusType) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TdomaindataDomainStatusType is "assignedAndInactive".
func (me TdomaindataDomainStatusType) IsAssignedAndInactive() bool {
	return me.String() == "assignedAndInactive"
}

//	Returns true if the value of this enumerated TdomaindataDomainStatusType is "unknown".
func (me TdomaindataDomainStatusType) IsUnknown() bool { return me.String() == "unknown" }

//	Since TdomaindataDomainStatusType is just a simple String type, this merely sets the current value from the specified string.
func (me *TdomaindataDomainStatusType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Returns true if the value of this enumerated TdomaindataDomainStatusType is "reservedDelegation".
func (me TdomaindataDomainStatusType) IsReservedDelegation() bool {
	return me.String() == "reservedDelegation"
}

type XsdGoPkgHasAttr_DomainStatus_TdomaindataDomainStatusType_ struct {
	DomainStatus TdomaindataDomainStatusType `json:"domain-status,omitempty" xml:" domain-status,attr,omitempty"`
}

type XsdGoPkgHasElem_Name struct {
	Name xsdt.String `json:"Name,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Name,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Name function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Name instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Name instance.
func (me *XsdGoPkgHasElem_Name) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Name; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DateDomainWasChecked struct {
	DateDomainWasChecked xsdt.DateTime `json:"DateDomainWasChecked,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 DateDomainWasChecked,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DateDomainWasChecked function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DateDomainWasChecked instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DateDomainWasChecked instance.
func (me *XsdGoPkgHasElem_DateDomainWasChecked) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DateDomainWasChecked; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RegistrationDate struct {
	RegistrationDate xsdt.DateTime `json:"RegistrationDate,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 RegistrationDate,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RegistrationDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RegistrationDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_RegistrationDate instance.
func (me *XsdGoPkgHasElem_RegistrationDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RegistrationDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TdomaindataSystemStatusType xsdt.String

//	Since TdomaindataSystemStatusType is just a simple String type, this merely returns the current string value.
func (me TdomaindataSystemStatusType) String() string { return xsdt.String(me).String() }

//	Returns true if the value of this enumerated TdomaindataSystemStatusType is "fraudulent".
func (me TdomaindataSystemStatusType) IsFraudulent() bool { return me.String() == "fraudulent" }

//	Returns true if the value of this enumerated TdomaindataSystemStatusType is "innocent-hijacked".
func (me TdomaindataSystemStatusType) IsInnocentHijacked() bool {
	return me.String() == "innocent-hijacked"
}

//	Returns true if the value of this enumerated TdomaindataSystemStatusType is "unknown".
func (me TdomaindataSystemStatusType) IsUnknown() bool { return me.String() == "unknown" }

//	Returns true if the value of this enumerated TdomaindataSystemStatusType is "ext-value".
func (me TdomaindataSystemStatusType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TdomaindataSystemStatusType is just a simple String type, this merely sets the current value from the specified string.
func (me *TdomaindataSystemStatusType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TdomaindataSystemStatusType's alias type xsdt.String.
func (me TdomaindataSystemStatusType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Returns true if the value of this enumerated TdomaindataSystemStatusType is "spoofed".
func (me TdomaindataSystemStatusType) IsSpoofed() bool { return me.String() == "spoofed" }

//	Returns true if the value of this enumerated TdomaindataSystemStatusType is "innocent-hacked".
func (me TdomaindataSystemStatusType) IsInnocentHacked() bool {
	return me.String() == "innocent-hacked"
}

type XsdGoPkgHasAttr_SystemStatus_TdomaindataSystemStatusType_ struct {
	SystemStatus TdomaindataSystemStatusType `json:"system-status,omitempty" xml:" system-status,attr,omitempty"`
}

type TxsdDomainData struct {
	XsdGoPkgHasAttr_SystemStatus_TdomaindataSystemStatusType_

	XsdGoPkgHasAttr_ExtSystemStatus_XsdtString_

	XsdGoPkgHasAttr_DomainStatus_TdomaindataDomainStatusType_

	XsdGoPkgHasAttr_ExtDomainStatus_XsdtString_

	XsdGoPkgHasAttr_ObservableId_XsdtId_

	XsdGoPkgHasElem_Name

	XsdGoPkgHasElem_DateDomainWasChecked

	XsdGoPkgHasElem_RegistrationDate

	XsdGoPkgHasElem_ExpirationDate

	XsdGoPkgHasElems_RelatedDNS

	XsdGoPkgHasElems_Nameservers

	XsdGoPkgHasElem_DomainContacts
}

//	If the WalkHandlers.TxsdDomainData function is not nil (ie. was set by outside code), calls it with this TxsdDomainData instance as the single argument. Then calls the Walk() method on 7/12 embed(s) and 0/0 field(s) belonging to this TxsdDomainData instance.
func (me *TxsdDomainData) Walk() (err error) {
	if fn := WalkHandlers.TxsdDomainData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Name.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DateDomainWasChecked.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RegistrationDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ExpirationDate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Nameservers.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DomainContacts.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RelatedDNS.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DomainData struct {
	DomainDatas []*TxsdDomainData `json:"DomainData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 DomainData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DomainData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DomainData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DomainData instance.
func (me *XsdGoPkgHasElems_DomainData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DomainData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DomainDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdNode struct {
	XsdGoPkgHasElems_DomainData

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElem_PostalAddress

	XsdGoPkgHasElems_Location

	XsdGoPkgHasElems_Counter
}

// Custom marshal JSON for TxsdNode
func (u *TxsdNode) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdNode

	if u.Locations == nil {
		for _, location := range u.LocationMLs{
			u.Locations = append(u.Locations,location)
		}
	}

	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdNode
func (u *TxsdNode) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdNode

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Locations != nil {
		u.LocationMLs = make([]*TMLStringType, len(u.Locations))
		for i:=0; i<len(u.Locations); i++{
			// Check if field is string
			str, ok := u.Locations[i].(string)
			if ok {
				u.LocationMLs[i] = &TMLStringType{}
				u.LocationMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Locations[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.LocationMLs[i] = &TMLStringType{}
					FillStruct(m, u.LocationMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdNode function is not nil (ie. was set by outside code), calls it with this TxsdNode instance as the single argument. Then calls the Walk() method on 5/5 embed(s) and 0/0 field(s) belonging to this TxsdNode instance.
func (me *TxsdNode) Walk() (err error) {
	if fn := WalkHandlers.TxsdNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_DomainData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PostalAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Location.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Counter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Node struct {
	Node *TxsdNode `json:"Node,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Node,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Node function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Node instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Node instance.
func (me *XsdGoPkgHasElem_Node) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Node; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Node.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ProtoCode struct {
	ProtoCode *xsdt.Integer `json:"ProtoCode,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ProtoCode,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProtoCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProtoCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ProtoCode instance.
func (me *XsdGoPkgHasElem_ProtoCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProtoCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ApplicationHeaderField struct {
	ApplicationHeaderFields []*TExtensionType `json:"ApplicationHeaderField,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ApplicationHeaderField,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ApplicationHeaderField function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ApplicationHeaderField instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ApplicationHeaderField instance.
func (me *XsdGoPkgHasElems_ApplicationHeaderField) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ApplicationHeaderField; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ApplicationHeaderFields {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdApplicationHeader struct {
	XsdGoPkgHasElems_ApplicationHeaderField
}

//	If the WalkHandlers.TxsdApplicationHeader function is not nil (ie. was set by outside code), calls it with this TxsdApplicationHeader instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdApplicationHeader instance.
func (me *TxsdApplicationHeader) Walk() (err error) {
	if fn := WalkHandlers.TxsdApplicationHeader; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_ApplicationHeaderField.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ApplicationHeader struct {
	ApplicationHeader *TxsdApplicationHeader `json:"ApplicationHeader,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ApplicationHeader,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ApplicationHeader function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ApplicationHeader instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ApplicationHeader instance.
func (me *XsdGoPkgHasElem_ApplicationHeader) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ApplicationHeader; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ApplicationHeader.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ProtoType struct {
	ProtoType *xsdt.Integer `json:"ProtoType,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ProtoType,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProtoType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProtoType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ProtoType instance.
func (me *XsdGoPkgHasElem_ProtoType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProtoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Port struct {
	Port *xsdt.Integer `json:"Port,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Port,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Port function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Port instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Port instance.
func (me *XsdGoPkgHasElem_Port) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Port; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPortlistType xsdt.String

//	This convenience method just performs a simple type conversion to TPortlistType's alias type xsdt.String.
func (me TPortlistType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TPortlistType is just a simple String type, this merely sets the current value from the specified string.
func (me *TPortlistType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TPortlistType is just a simple String type, this merely returns the current string value.
func (me TPortlistType) String() string { return xsdt.String(me).String() }

type XsdGoPkgHasElem_Portlist struct {
	Portlist TPortlistType `json:"Portlist,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Portlist,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Portlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Portlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Portlist instance.
func (me *XsdGoPkgHasElem_Portlist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Portlist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ProtoField struct {
	ProtoField *xsdt.Integer `json:"ProtoField,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ProtoField,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProtoField function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProtoField instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ProtoField instance.
func (me *XsdGoPkgHasElem_ProtoField) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProtoField; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EmailBody struct {
	EmailBody xsdt.String `json:"EmailBody,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailBody,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EmailBody function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EmailBody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EmailBody instance.
func (me *XsdGoPkgHasElem_EmailBody) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EmailBody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EmailMessage struct {
	EmailMessage xsdt.String `json:"EmailMessage,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailMessage,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EmailMessage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EmailMessage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EmailMessage instance.
func (me *XsdGoPkgHasElem_EmailMessage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EmailMessage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HashData struct {
	HashDatas []*TxsdHashData `json:"HashData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 HashData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HashData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HashData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HashData instance.
func (me *XsdGoPkgHasElems_HashData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HashData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.HashDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EmailFrom struct {
	EmailFrom xsdt.String `json:"EmailFrom,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailFrom,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EmailFrom function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EmailFrom instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EmailFrom instance.
func (me *XsdGoPkgHasElem_EmailFrom) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EmailFrom; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EmailSubject struct {
	EmailSubject xsdt.String `json:"EmailSubject,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailSubject,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EmailSubject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EmailSubject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EmailSubject instance.
func (me *XsdGoPkgHasElem_EmailSubject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EmailSubject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EmailXMailer struct {
	EmailXMailer xsdt.String `json:"EmailX-Mailer,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailX-Mailer,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EmailXMailer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EmailXMailer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EmailXMailer instance.
func (me *XsdGoPkgHasElem_EmailXMailer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EmailXMailer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EmailHeaderField struct {
	EmailHeaderFields []*TExtensionType `json:"EmailHeaderField,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailHeaderField,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EmailHeaderField function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EmailHeaderField instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EmailHeaderField instance.
func (me *XsdGoPkgHasElems_EmailHeaderField) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EmailHeaderField; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EmailHeaderFields {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EmailHeaders struct {
	EmailHeaders xsdt.String `json:"EmailHeaders,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailHeaders,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EmailHeaders function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EmailHeaders instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EmailHeaders instance.
func (me *XsdGoPkgHasElem_EmailHeaders) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EmailHeaders; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EmailTo struct {
	EmailTos []xsdt.String `json:"EmailTo,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailTo,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EmailTo function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EmailTo instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EmailTo instance.
func (me *XsdGoPkgHasElems_EmailTo) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EmailTo; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SignatureData struct {
	SignatureDatas []*TxsdSignatureData `json:"SignatureData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 SignatureData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SignatureData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SignatureData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SignatureData instance.
func (me *XsdGoPkgHasElems_SignatureData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SignatureData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SignatureDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdEmailData struct {
	XsdGoPkgHasAttr_ObservableId_XsdtId_

	XsdGoPkgHasElems_EmailTo

	XsdGoPkgHasElem_EmailFrom

	XsdGoPkgHasElem_EmailSubject

	XsdGoPkgHasElem_EmailXMailer

	XsdGoPkgHasElems_EmailHeaderField

	XsdGoPkgHasElem_EmailHeaders

	XsdGoPkgHasElem_EmailBody

	XsdGoPkgHasElem_EmailMessage

	XsdGoPkgHasElems_HashData

	Signatures []xsdt.Base64Binary `json:"Signature,omitempty" xml:"-"`

	XsdGoPkgHasElems_SignatureData `json:"-"`
}

// Custom marshal JSON for TxsdEmailData
func (u *TxsdEmailData) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdEmailData

	// Encode outer XML of Signature to base64
	if u.Signatures == nil {
		for _, data := range u.SignatureDatas{
			for i:=0; i < len(data.Signatures); i++{
				b , err := eXml.MarshalIndent(data.Signatures[i],"","    ")
				if err != nil {
					return nil, err
				}
				u.Signatures = append(u.Signatures, (xsdt.Base64Binary)(base64.StdEncoding.EncodeToString(b)))
			}
		}
	}

	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdEmailData
func (u *TxsdEmailData) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdEmailData

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Signatures != nil {
		u.SignatureDatas = make([]*TxsdSignatureData, 1)
		u.SignatureDatas[0] = &TxsdSignatureData{}
		u.SignatureDatas[0].Signatures = make([]*ds.TSignatureType,len(u.Signatures))
		for i:=0; i < len(u.Signatures); i++{
			if u.Signatures[i] != ""{
				// Decode base64 value and unmarshal to XML
				byteValue, err := base64.StdEncoding.DecodeString(string(u.Signatures[i]))
				if err != nil {
					return err
				}
				u.SignatureDatas[0].Signatures[i] = &ds.TSignatureType{}
				err = eXml.Unmarshal(byteValue, u.SignatureDatas[0].Signatures[i])
			}
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdEmailData function is not nil (ie. was set by outside code), calls it with this TxsdEmailData instance as the single argument. Then calls the Walk() method on 10/11 embed(s) and 0/0 field(s) belonging to this TxsdEmailData instance.
func (me *TxsdEmailData) Walk() (err error) {
	if fn := WalkHandlers.TxsdEmailData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_EmailHeaderField.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EmailHeaders.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EmailBody.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EmailMessage.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_HashData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EmailFrom.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EmailSubject.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EmailXMailer.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EmailTo.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_SignatureData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EmailData struct {
	EmailData *TxsdEmailData `json:"EmailData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EmailData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EmailData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EmailData instance.
func (me *XsdGoPkgHasElem_EmailData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EmailData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EmailData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_IpProtocol_XsdtInteger_ struct {
	IpProtocol *xsdt.Integer `json:"ip-protocol,omitempty" xml:" ip-protocol,attr,omitempty"`
}

type XsdGoPkgHasElem_IANAService struct {
	IANAService xsdt.String `json:"IANAService,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 IANAService,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IANAService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IANAService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IANAService instance.
func (me *XsdGoPkgHasElem_IANAService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IANAService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdServiceName struct {
	XsdGoPkgHasElem_IANAService

	XsdGoPkgHasElems_Url

	XsdGoPkgHasElems_Description
}

// Custom marshal JSON for TxsdServiceName
func (u *TxsdServiceName) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdServiceName

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdServiceName
func (u *TxsdServiceName) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdServiceName

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdServiceName function is not nil (ie. was set by outside code), calls it with this TxsdServiceName instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdServiceName instance.
func (me *TxsdServiceName) Walk() (err error) {
	if fn := WalkHandlers.TxsdServiceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IANAService.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ServiceName struct {
	ServiceName *TxsdServiceName `json:"ServiceName,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ServiceName,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ServiceName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ServiceName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ServiceName instance.
func (me *XsdGoPkgHasElem_ServiceName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ServiceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ServiceName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdService struct {
	XsdGoPkgHasAttr_IpProtocol_XsdtInteger_

	XsdGoPkgHasAttr_ObservableId_XsdtId_

	XsdGoPkgHasElem_ServiceName

	XsdGoPkgHasElem_Port

	XsdGoPkgHasElem_Portlist

	XsdGoPkgHasElem_ProtoCode

	XsdGoPkgHasElem_ProtoType

	XsdGoPkgHasElem_ProtoField

	XsdGoPkgHasElems_ApplicationHeaderField `xml:"-"`

	XsdGoPkgHasElem_ApplicationHeader `json:"-"`

	XsdGoPkgHasElem_EmailData

	XsdGoPkgHasElem_Application
}

// Custom marshal JSON for TxsdService
func (u *TxsdService) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdService

	if u.ApplicationHeader != nil {
		u.ApplicationHeaderFields = u.ApplicationHeader.ApplicationHeaderFields
	}

	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdService
func (u *TxsdService) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdService

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.ApplicationHeaderFields != nil {
		u.ApplicationHeader = &TxsdApplicationHeader{}
		u.ApplicationHeader.ApplicationHeaderFields = u.ApplicationHeaderFields
	}

	return nil
}

//	If the WalkHandlers.TxsdService function is not nil (ie. was set by outside code), calls it with this TxsdService instance as the single argument. Then calls the Walk() method on 9/11 embed(s) and 0/0 field(s) belonging to this TxsdService instance.
func (me *TxsdService) Walk() (err error) {
	if fn := WalkHandlers.TxsdService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ServiceName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Port.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Portlist.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProtoField.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EmailData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProtoType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProtoCode.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_ApplicationHeaderField.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ApplicationHeader.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Service struct {
	Services []*TxsdService `json:"Service,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Service,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Service function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Service instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Service instance.
func (me *XsdGoPkgHasElems_Service) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Service; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Services {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSystem struct {
	XsdGoPkgHasAttr_Category_TsystemCategoryType_

	XsdGoPkgHasAttr_ExtCategory_XsdtString_

	XsdGoPkgHasAttr_Interface_XsdtString_

	XsdGoPkgHasAttr_Spoofed_TyesNoUnknownType_Unknown

	XsdGoPkgHasAttr_Virtual_TyesNoUnknownType_Unknown

	XsdGoPkgHasAttr_Ownership_TsystemOwnershipType_

	XsdGoPkgHasAttr_ExtOwnership_XsdtString_

	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasAttr_ObservableId_XsdtId_

	XsdGoPkgHasElem_Node

	XsdGoPkgHasElems_NodeRole

	XsdGoPkgHasElems_Service

	XsdGoPkgHasElems_OperatingSystem

	XsdGoPkgHasElems_Counter

	XsdGoPkgHasElems_AssetIDsequenceTxsdSystemSystemschema_AssetID_XsdtString_

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElems_AdditionalData
}

// Custom marshal JSON for TxsdSystem
func (u *TxsdSystem) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdSystem

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdSystem
func (u *TxsdSystem) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdSystem

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdSystem function is not nil (ie. was set by outside code), calls it with this TxsdSystem instance as the single argument. Then calls the Walk() method on 8/18 embed(s) and 0/0 field(s) belonging to this TxsdSystem instance.
func (me *TxsdSystem) Walk() (err error) {
	if fn := WalkHandlers.TxsdSystem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Node.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Service.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Counter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_OperatingSystem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_NodeRole.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AssetIDsequenceTxsdSystemSystemschema_AssetID_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_System struct {
	Systems []*TxsdSystem `json:"System,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 System,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_System function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_System instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_System instance.
func (me *XsdGoPkgHasElems_System) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_System; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Systems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFlow struct {
	XsdGoPkgHasElems_System
}

//	If the WalkHandlers.TxsdFlow function is not nil (ie. was set by outside code), calls it with this TxsdFlow instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdFlow instance.
func (me *TxsdFlow) Walk() (err error) {
	if fn := WalkHandlers.TxsdFlow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_System.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Flow struct {
	Flows []*TxsdFlow `json:"Flow,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Flow,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Flow function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Flow instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Flow instance.
func (me *XsdGoPkgHasElems_Flow) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Flow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Flows {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EndTime struct {
	EndTime xsdt.DateTime `json:"EndTime,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EndTime,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EndTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EndTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EndTime instance.
func (me *XsdGoPkgHasElem_EndTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EndTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Assessment struct {
	Assessment *TxsdAssessment `json:"Assessment,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Assessment,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Assessment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Assessment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Assessment instance.
func (me *XsdGoPkgHasElem_Assessment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Assessment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Assessment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Action_TactionType_Other struct {
	Action TactionType `json:"action,omitempty" xml:" action,attr,omitempty"`
}

//	Returns the default value for Action -- "other"
func (me XsdGoPkgHasAttr_Action_TactionType_Other) ActionDefault() TactionType {
	return TactionType("other")
}

type TxsdExpectation struct {
	XsdGoPkgHasAttr_Action_TactionType_Other

	XsdGoPkgHasAttr_ExtAction_XsdtString_

	XsdGoPkgHasAttr_Severity_TseverityType_

	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasAttr_ObservableId_XsdtId_

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElems_DefinedCOA

	XsdGoPkgHasElem_StartTime

	XsdGoPkgHasElem_EndTime

	XsdGoPkgHasElem_Contact
}

// Custom marshal JSON for TxsdExpectation
func (u *TxsdExpectation) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdExpectation

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdExpectation
func (u *TxsdExpectation) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdExpectation

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdExpectation function is not nil (ie. was set by outside code), calls it with this TxsdExpectation instance as the single argument. Then calls the Walk() method on 5/11 embed(s) and 0/0 field(s) belonging to this TxsdExpectation instance.
func (me *TxsdExpectation) Walk() (err error) {
	if fn := WalkHandlers.TxsdExpectation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_EndTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Contact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_DefinedCOA.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StartTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Expectation struct {
	Expectations []*TxsdExpectation `json:"Expectation,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Expectation,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Expectation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Expectation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Expectation instance.
func (me *XsdGoPkgHasElems_Expectation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Expectation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Expectations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdEventData struct {
	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasAttr_ObservableId_XsdtId_

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElem_DetectTime

	XsdGoPkgHasElem_StartTime

	XsdGoPkgHasElem_EndTime

	XsdGoPkgHasElem_RecoveryTime

	XsdGoPkgHasElem_ReportTime

	XsdGoPkgHasElems_Contact

	XsdGoPkgHasElems_Discovery

	XsdGoPkgHasElem_Assessment

	XsdGoPkgHasElems_Method

	XsdGoPkgHasElems_System `xml:"-"`

	XsdGoPkgHasElems_Flow `json:"-"`

	XsdGoPkgHasElems_Expectation
	
	XsdGoPkgHasElems_RecordData `xml:"-"`

	XsdGoPkgHasElem_Record `json:"-"`

	XsdGoPkgHasElems_EventData

	XsdGoPkgHasElems_AdditionalData
}

// Custom marshal JSON for TxsdEventData
func (u *TxsdEventData) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdEventData

	if u.Systems == nil {
		for _, flow := range u.Flows{
			for _,system := range flow.Systems{
				u.Systems = append(u.Systems, system)
			}
		}
	}
	if u.Record != nil {
		u.RecordDatas = u.Record.RecordDatas
	}

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdEventData
func (u *TxsdEventData) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdEventData

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Systems != nil {
		u.Flows = make([]*TxsdFlow,1)
		u.Flows[0] = &TxsdFlow{}
		u.Flows[0].Systems = make([]*TxsdSystem, len(u.Systems))
		var systems = u.Flows[0].Systems
		for i:=0;i<len(u.Systems);i++{
			systems[i] = u.Systems[i]
		}
	}

	if u.RecordDatas != nil {
		u.Record = &TxsdRecord{}
		u.Record.RecordDatas = u.RecordDatas
	}

	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdEventData function is not nil (ie. was set by outside code), calls it with this TxsdEventData instance as the single argument. Then calls the Walk() method on 14/18 embed(s) and 0/0 field(s) belonging to this TxsdEventData instance.
func (me *TxsdEventData) Walk() (err error) {
	if fn := WalkHandlers.TxsdEventData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Contact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RecordData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Record.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DetectTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RecoveryTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReportTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StartTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Method.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}

		if err = me.XsdGoPkgHasElems_System.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Flow.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Discovery.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Assessment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Expectation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EventData struct {
	EventDatas []*TxsdEventData `json:"EventData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EventData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EventData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EventData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EventData instance.
func (me *XsdGoPkgHasElems_EventData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EventData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EventDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_UidRef_XsdtIdref_ struct {
	UidRef *xsdt.Idref `json:"uid-ref,omitempty" xml:"uid-ref,attr,omitempty"`
}

type XsdGoPkgHasAttr_EuidRef_XsdtString_ struct {
	EuidRef *xsdt.String `json:"euid-ref,omitempty" xml:" euid-ref,attr,omitempty"`
}

type TxsdIndicatorReference struct {
	XsdGoPkgHasAttr_UidRef_XsdtIdref_

	XsdGoPkgHasAttr_EuidRef_XsdtString_

	XsdGoPkgHasAttr_Version_XsdtString_
}

//	If the WalkHandlers.TxsdIndicatorReference function is not nil (ie. was set by outside code), calls it with this TxsdIndicatorReference instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdIndicatorReference instance.
func (me *TxsdIndicatorReference) Walk() (err error) {
	if fn := WalkHandlers.TxsdIndicatorReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IndicatorReference struct {
	IndicatorReference *TxsdIndicatorReference `json:"IndicatorReference,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 IndicatorReference,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IndicatorReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IndicatorReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IndicatorReference instance.
func (me *XsdGoPkgHasElem_IndicatorReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IndicatorReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IndicatorReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Confidence struct {
	Confidences []*TxsdConfidence `json:"Confidence,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Confidence,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Confidence function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Confidence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Confidence instance.
func (me *XsdGoPkgHasElems_Confidence) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Confidence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Confidences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TindicatorexpressionOperatorType xsdt.Nmtoken

//	Returns true if the value of this enumerated TindicatorexpressionOperatorType is "or".
func (me TindicatorexpressionOperatorType) IsOr() bool { return me.String() == "or" }

//	Returns true if the value of this enumerated TindicatorexpressionOperatorType is "xor".
func (me TindicatorexpressionOperatorType) IsXor() bool { return me.String() == "xor" }

//	Since TindicatorexpressionOperatorType is just a simple String type, this merely sets the current value from the specified string.
func (me *TindicatorexpressionOperatorType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TindicatorexpressionOperatorType is just a simple String type, this merely returns the current string value.
func (me TindicatorexpressionOperatorType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TindicatorexpressionOperatorType's alias type xsdt.Nmtoken.
func (me TindicatorexpressionOperatorType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TindicatorexpressionOperatorType is "not".
func (me TindicatorexpressionOperatorType) IsNot() bool { return me.String() == "not" }

//	Returns true if the value of this enumerated TindicatorexpressionOperatorType is "and".
func (me TindicatorexpressionOperatorType) IsAnd() bool { return me.String() == "and" }

type XsdGoPkgHasAttr_Operator_TindicatorexpressionOperatorType_And struct {
	Operator *TindicatorexpressionOperatorType `json:"operator,omitempty" xml:" operator,attr,omitempty"`
}

//	Returns the default value for Operator -- "and"
func (me XsdGoPkgHasAttr_Operator_TindicatorexpressionOperatorType_And) OperatorDefault() TindicatorexpressionOperatorType {
	return TindicatorexpressionOperatorType("and")
}

type XsdGoPkgHasAttr_ExtOperator_XsdtString_ struct {
	ExtOperator *xsdt.String `json:"ext-operator,omitempty" xml:" ext-operator,attr,omitempty"`
}

type XsdGoPkgHasElem_DomainData struct {
	DomainData *TxsdDomainData `json:"DomainData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 DomainData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DomainData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DomainData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DomainData instance.
func (me *XsdGoPkgHasElem_DomainData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DomainData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DomainData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Service struct {
	Service *TxsdService `json:"Service,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Service,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Service function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Service instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Service instance.
func (me *XsdGoPkgHasElem_Service) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Service; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Service.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_WindowsRegistryKeysModified struct {
	WindowsRegistryKeysModified *TxsdWindowsRegistryKeysModified `json:"WindowsRegistryKeysModified,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 WindowsRegistryKeysModified,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_WindowsRegistryKeysModified function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_WindowsRegistryKeysModified instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_WindowsRegistryKeysModified instance.
func (me *XsdGoPkgHasElem_WindowsRegistryKeysModified) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_WindowsRegistryKeysModified; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.WindowsRegistryKeysModified.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FileData struct {
	FileData *TxsdFileData `json:"FileData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 FileData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FileData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FileData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FileData instance.
func (me *XsdGoPkgHasElem_FileData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FileData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FileData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CertificateData struct {
	CertificateData *TxsdCertificateData `json:"CertificateData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 CertificateData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CertificateData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CertificateData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_CertificateData instance.
func (me *XsdGoPkgHasElem_CertificateData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CertificateData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.CertificateData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Incident struct {
	Incident *TxsdIncident `json:"Incident,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Incident,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Incident function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Incident instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Incident instance.
func (me *XsdGoPkgHasElem_Incident) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Incident; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_System struct {
	System *TxsdSystem `json:"System,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 System,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_System function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_System instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_System instance.
func (me *XsdGoPkgHasElem_System) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_System; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.System.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RegistryHandle struct {
	RegistryHandle *TxsdRegistryHandle `json:"RegistryHandle,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 RegistryHandle,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RegistryHandle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RegistryHandle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RegistryHandle instance.
func (me *XsdGoPkgHasElem_RegistryHandle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RegistryHandle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RegistryHandle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HistoryItem struct {
	HistoryItem *TxsdHistoryItem `json:"HistoryItem,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 HistoryItem,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HistoryItem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HistoryItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HistoryItem instance.
func (me *XsdGoPkgHasElem_HistoryItem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HistoryItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.HistoryItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EventData struct {
	EventData *TxsdEventData `json:"EventData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EventData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EventData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EventData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EventData instance.
func (me *XsdGoPkgHasElem_EventData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EventData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EventData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Hash struct {
	Hash *TxsdHash `json:"Hash,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Hash,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Hash function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Hash instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Hash instance.
func (me *XsdGoPkgHasElem_Hash) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Hash; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Hash.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdBulkObservableFormat struct {
	XsdGoPkgHasElem_Hash

	XsdGoPkgHasElems_AdditionalData
}

//	If the WalkHandlers.TxsdBulkObservableFormat function is not nil (ie. was set by outside code), calls it with this TxsdBulkObservableFormat instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdBulkObservableFormat instance.
func (me *TxsdBulkObservableFormat) Walk() (err error) {
	if fn := WalkHandlers.TxsdBulkObservableFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Hash.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BulkObservableFormat struct {
	BulkObservableFormat *TxsdBulkObservableFormat `json:"BulkObservableFormat,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 BulkObservableFormat,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BulkObservableFormat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BulkObservableFormat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BulkObservableFormat instance.
func (me *XsdGoPkgHasElem_BulkObservableFormat) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BulkObservableFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BulkObservableFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BulkObservableListsequenceTxsdBulkObservableBulkObservableschema_BulkObservableList_XsdtString_ struct {
	BulkObservableList xsdt.String `json:"BulkObservableList,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 BulkObservableList,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BulkObservableListsequenceTxsdBulkObservableBulkObservableschema_BulkObservableList_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BulkObservableListsequenceTxsdBulkObservableBulkObservableschema_BulkObservableList_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_BulkObservableListsequenceTxsdBulkObservableBulkObservableschema_BulkObservableList_XsdtString_ instance.
func (me *XsdGoPkgHasElem_BulkObservableListsequenceTxsdBulkObservableBulkObservableschema_BulkObservableList_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BulkObservableListsequenceTxsdBulkObservableBulkObservableschema_BulkObservableList_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TbulkobservableTypeType xsdt.Nmtoken

//	Returns true if the value of this enumerated TbulkobservableTypeType is "e-mail".
func (me TbulkobservableTypeType) IsEMail() bool { return me.String() == "e-mail" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "email-x-mailer".
func (me TbulkobservableTypeType) IsEmailXMailer() bool { return me.String() == "email-x-mailer" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "user-name".
func (me TbulkobservableTypeType) IsUserName() bool { return me.String() == "user-name" }

//	Since TbulkobservableTypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TbulkobservableTypeType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "ipv4-net".
func (me TbulkobservableTypeType) IsIpv4Net() bool { return me.String() == "ipv4-net" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "ipv4-net-mask".
func (me TbulkobservableTypeType) IsIpv4NetMask() bool { return me.String() == "ipv4-net-mask" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "mac".
func (me TbulkobservableTypeType) IsMac() bool { return me.String() == "mac" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "file-path".
func (me TbulkobservableTypeType) IsFilePath() bool { return me.String() == "file-path" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "domain-to-ipv4-timestamp".
func (me TbulkobservableTypeType) IsDomainToIpv4Timestamp() bool {
	return me.String() == "domain-to-ipv4-timestamp"
}

//	Returns true if the value of this enumerated TbulkobservableTypeType is "file-hash".
func (me TbulkobservableTypeType) IsFileHash() bool { return me.String() == "file-hash" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "email-subject".
func (me TbulkobservableTypeType) IsEmailSubject() bool { return me.String() == "email-subject" }

//	This convenience method just performs a simple type conversion to TbulkobservableTypeType's alias type xsdt.Nmtoken.
func (me TbulkobservableTypeType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "atm".
func (me TbulkobservableTypeType) IsAtm() bool { return me.String() == "atm" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "ipv4-addr".
func (me TbulkobservableTypeType) IsIpv4Addr() bool { return me.String() == "ipv4-addr" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "domain-name".
func (me TbulkobservableTypeType) IsDomainName() bool { return me.String() == "domain-name" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "ipv6-addr".
func (me TbulkobservableTypeType) IsIpv6Addr() bool { return me.String() == "ipv6-addr" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "domain-to-ipv6-timestamp".
func (me TbulkobservableTypeType) IsDomainToIpv6Timestamp() bool {
	return me.String() == "domain-to-ipv6-timestamp"
}

//	Returns true if the value of this enumerated TbulkobservableTypeType is "http-user-agent".
func (me TbulkobservableTypeType) IsHttpUserAgent() bool { return me.String() == "http-user-agent" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "http-request-uri".
func (me TbulkobservableTypeType) IsHttpRequestUri() bool { return me.String() == "http-request-uri" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "ipv6-port".
func (me TbulkobservableTypeType) IsIpv6Port() bool { return me.String() == "ipv6-port" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "mutex".
func (me TbulkobservableTypeType) IsMutex() bool { return me.String() == "mutex" }

//	Since TbulkobservableTypeType is just a simple String type, this merely returns the current string value.
func (me TbulkobservableTypeType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "asn".
func (me TbulkobservableTypeType) IsAsn() bool { return me.String() == "asn" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "ipv6-net".
func (me TbulkobservableTypeType) IsIpv6Net() bool { return me.String() == "ipv6-net" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "domain-to-ipv4".
func (me TbulkobservableTypeType) IsDomainToIpv4() bool { return me.String() == "domain-to-ipv4" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "windows-reg-key".
func (me TbulkobservableTypeType) IsWindowsRegKey() bool { return me.String() == "windows-reg-key" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "ipv6-net-mask".
func (me TbulkobservableTypeType) IsIpv6NetMask() bool { return me.String() == "ipv6-net-mask" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "site-uri".
func (me TbulkobservableTypeType) IsSiteUri() bool { return me.String() == "site-uri" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "domain-to-ipv6".
func (me TbulkobservableTypeType) IsDomainToIpv6() bool { return me.String() == "domain-to-ipv6" }

//	Returns true if the value of this enumerated TbulkobservableTypeType is "ipv4-port".
func (me TbulkobservableTypeType) IsIpv4Port() bool { return me.String() == "ipv4-port" }

type XsdGoPkgHasAttr_Type_TbulkobservableTypeType_ struct {
	Type TbulkobservableTypeType `json:"type,omitempty" xml:" type,attr,omitempty"`
}

type TxsdBulkObservable struct {
	XsdGoPkgHasAttr_Type_TbulkobservableTypeType_

	XsdGoPkgHasAttr_ExtType_XsdtString_

	XsdGoPkgHasElem_BulkObservableFormat

	XsdGoPkgHasElem_BulkObservableListsequenceTxsdBulkObservableBulkObservableschema_BulkObservableList_XsdtString_

	XsdGoPkgHasElems_AdditionalData
}

//	If the WalkHandlers.TxsdBulkObservable function is not nil (ie. was set by outside code), calls it with this TxsdBulkObservable instance as the single argument. Then calls the Walk() method on 3/5 embed(s) and 0/0 field(s) belonging to this TxsdBulkObservable instance.
func (me *TxsdBulkObservable) Walk() (err error) {
	if fn := WalkHandlers.TxsdBulkObservable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_BulkObservableFormat.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BulkObservableListsequenceTxsdBulkObservableBulkObservableschema_BulkObservableList_XsdtString_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BulkObservable struct {
	BulkObservable *TxsdBulkObservable `json:"BulkObservable,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 BulkObservable,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BulkObservable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BulkObservable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BulkObservable instance.
func (me *XsdGoPkgHasElem_BulkObservable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BulkObservable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BulkObservable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Address struct {
	Address *TxsdAddress `json:"Address,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Address,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Address function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Address instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Address instance.
func (me *XsdGoPkgHasElem_Address) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Address; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RecordData struct {
	RecordData *TxsdRecordData `json:"RecordData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 RecordData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RecordData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RecordData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RecordData instance.
func (me *XsdGoPkgHasElem_RecordData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RecordData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RecordData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Expectation struct {
	Expectation *TxsdExpectation `json:"Expectation,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Expectation,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Expectation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Expectation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Expectation instance.
func (me *XsdGoPkgHasElem_Expectation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Expectation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Expectation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Reference struct {
	Reference *TxsdReference `json:"Reference,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Reference,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Reference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Reference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Reference instance.
func (me *XsdGoPkgHasElem_Reference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Reference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Reference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DetectionPattern struct {
	DetectionPattern *TxsdDetectionPattern `json:"DetectionPattern,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 DetectionPattern,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DetectionPattern function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DetectionPattern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_DetectionPattern instance.
func (me *XsdGoPkgHasElem_DetectionPattern) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DetectionPattern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.DetectionPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdObservable struct {
	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasElem_System

	XsdGoPkgHasElem_Address

	XsdGoPkgHasElem_DomainData

	XsdGoPkgHasElem_Service

	XsdGoPkgHasElem_EmailData

	XsdGoPkgHasElem_WindowsRegistryKeysModified

	XsdGoPkgHasElem_FileData

	XsdGoPkgHasElem_CertificateData

	XsdGoPkgHasElem_RegistryHandle

	XsdGoPkgHasElem_RecordData

	XsdGoPkgHasElem_EventData

	XsdGoPkgHasElem_Incident

	XsdGoPkgHasElem_Expectation

	XsdGoPkgHasElem_Reference

	XsdGoPkgHasElem_Assessment

	XsdGoPkgHasElem_DetectionPattern

	XsdGoPkgHasElem_HistoryItem

	XsdGoPkgHasElem_BulkObservable

	XsdGoPkgHasElems_AdditionalData
}

//	If the WalkHandlers.TxsdObservable function is not nil (ie. was set by outside code), calls it with this TxsdObservable instance as the single argument. Then calls the Walk() method on 19/21 embed(s) and 0/0 field(s) belonging to this TxsdObservable instance.
func (me *TxsdObservable) Walk() (err error) {
	if fn := WalkHandlers.TxsdObservable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Expectation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Reference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Assessment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DetectionPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EmailData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RecordData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_FileData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_CertificateData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Incident.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DomainData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Service.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_WindowsRegistryKeysModified.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_System.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RegistryHandle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_HistoryItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EventData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_BulkObservable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Observable struct {
	Observable *TxsdObservable `json:"Observable,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Observable,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Observable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Observable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Observable instance.
func (me *XsdGoPkgHasElem_Observable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Observable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Observable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdObservableReference struct {
	XsdGoPkgHasAttr_UidRef_XsdtIdref_
}

//	If the WalkHandlers.TxsdObservableReference function is not nil (ie. was set by outside code), calls it with this TxsdObservableReference instance as the single argument. Then calls the Walk() method on 0/1 embed(s) and 0/0 field(s) belonging to this TxsdObservableReference instance.
func (me *TxsdObservableReference) Walk() (err error) {
	if fn := WalkHandlers.TxsdObservableReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ObservableReference struct {
	ObservableReference *TxsdObservableReference `json:"-" xml:"urn:ietf:params:xml:ns:iodef-2.0 ObservableReference,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ObservableReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ObservableReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ObservableReference instance.
func (me *XsdGoPkgHasElem_ObservableReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ObservableReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ObservableReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdIndicatorExpression struct {
	XsdGoPkgHasAttr_Operator_TindicatorexpressionOperatorType_And

	XsdGoPkgHasAttr_ExtOperator_XsdtString_

	XsdGoPkgHasElems_IndicatorExpression

	XsdGoPkgHasElems_Observable

	Uidrefs []*xsdt.Idref `json:"uid-ref,omitempty" xml:"-"`
	XsdGoPkgHasElems_ObservableReference `json:"-"`

	XsdGoPkgHasElems_IndicatorReference

	XsdGoPkgHasElem_Confidence

	XsdGoPkgHasElems_AdditionalData
}

// Custom marshal JSON for TxsdIndicatorExpression
func (u *TxsdIndicatorExpression) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdIndicatorExpression

	if u.Uidrefs == nil {
		for _, idref := range u.ObservableReferences{
			u.Uidrefs = append(u.Uidrefs,idref.UidRef)
		}
	}

	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdIndicatorExpression
func (u *TxsdIndicatorExpression) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdIndicatorExpression

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Uidrefs != nil {
		u.ObservableReferences = make([]*TxsdObservableReference, len(u.Uidrefs))
		for i:=0; i<len(u.Uidrefs); i++{
			u.ObservableReferences[i] = &TxsdObservableReference{}
			u.ObservableReferences[i].UidRef = u.Uidrefs[i]
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdIndicatorExpression function is not nil (ie. was set by outside code), calls it with this TxsdIndicatorExpression instance as the single argument. Then calls the Walk() method on 5/8 embed(s) and 0/0 field(s) belonging to this TxsdIndicatorExpression instance.
func (me *TxsdIndicatorExpression) Walk() (err error) {
	if fn := WalkHandlers.TxsdIndicatorExpression; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}

		if err = me.XsdGoPkgHasElems_ObservableReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_IndicatorReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Confidence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Observable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IndicatorExpression struct {
	IndicatorExpression *TxsdIndicatorExpression `json:"IndicatorExpression,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 IndicatorExpression,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IndicatorExpression function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IndicatorExpression instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IndicatorExpression instance.
func (me *XsdGoPkgHasElem_IndicatorExpression) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IndicatorExpression; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IndicatorExpression.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IndicatorID struct {
	IndicatorID *TxsdIndicatorID `json:"IndicatorID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 IndicatorID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IndicatorID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IndicatorID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IndicatorID instance.
func (me *XsdGoPkgHasElem_IndicatorID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IndicatorID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IndicatorID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AttackPhaseID struct {
	AttackPhaseIDs []xsdt.String `json:"AttackPhaseID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 AttackPhaseID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AttackPhaseID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AttackPhaseID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AttackPhaseID instance.
func (me *XsdGoPkgHasElems_AttackPhaseID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AttackPhaseID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAttackPhase struct {
	XsdGoPkgHasElems_AttackPhaseID

	XsdGoPkgHasElems_Url

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElems_AdditionalData
}

// Custom marshal JSON for TxsdAttackPhase
func (u *TxsdAttackPhase) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdAttackPhase

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdAttackPhase
func (u *TxsdAttackPhase) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdAttackPhase

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdAttackPhase function is not nil (ie. was set by outside code), calls it with this TxsdAttackPhase instance as the single argument. Then calls the Walk() method on 4/4 embed(s) and 0/0 field(s) belonging to this TxsdAttackPhase instance.
func (me *TxsdAttackPhase) Walk() (err error) {
	if fn := WalkHandlers.TxsdAttackPhase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_AttackPhaseID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AttackPhase struct {
	AttackPhases []*TxsdAttackPhase `json:"AttackPhase,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 AttackPhase,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AttackPhase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AttackPhase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AttackPhase instance.
func (me *XsdGoPkgHasElems_AttackPhase) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AttackPhase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttackPhases {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAlternativeIndicatorID struct {
	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasElems_IndicatorID
}

//	If the WalkHandlers.TxsdAlternativeIndicatorID function is not nil (ie. was set by outside code), calls it with this TxsdAlternativeIndicatorID instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdAlternativeIndicatorID instance.
func (me *TxsdAlternativeIndicatorID) Walk() (err error) {
	if fn := WalkHandlers.TxsdAlternativeIndicatorID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_IndicatorID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AlternativeIndicatorID struct {
	AlternativeIndicatorIDs []*TxsdAlternativeIndicatorID `json:"AlternativeIndicatorID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 AlternativeIndicatorID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AlternativeIndicatorID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AlternativeIndicatorID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AlternativeIndicatorID instance.
func (me *XsdGoPkgHasElems_AlternativeIndicatorID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AlternativeIndicatorID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AlternativeIndicatorIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdIndicator struct {
	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasElem_IndicatorID

	XsdGoPkgHasElems_AlternativeIndicatorID

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElem_StartTime

	XsdGoPkgHasElem_EndTime

	XsdGoPkgHasElem_Confidence

	XsdGoPkgHasElems_Contact

	XsdGoPkgHasElem_Observable

	UidRef *xsdt.Idref `json:"uid-ref,omitempty" xml:"-"`
	XsdGoPkgHasElem_ObservableReference `json:"-"`

	XsdGoPkgHasElem_IndicatorExpression

	XsdGoPkgHasElem_IndicatorReference

	XsdGoPkgHasElems_NodeRole

	XsdGoPkgHasElems_AttackPhase

	XsdGoPkgHasElems_Reference

	XsdGoPkgHasElems_AdditionalData
}

// Custom marshal JSON for TxsdIndicator
func (u *TxsdIndicator) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdIndicator

	var reference = u.ObservableReference
	if reference != nil {
		u.UidRef = reference.UidRef
	}

	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}

	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdIndicator
func (u *TxsdIndicator) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdIndicator

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.UidRef != nil {
		u.ObservableReference = &TxsdObservableReference{}
		u.ObservableReference.UidRef = u.UidRef
	}

	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdIndicator function is not nil (ie. was set by outside code), calls it with this TxsdIndicator instance as the single argument. Then calls the Walk() method on 15/17 embed(s) and 0/0 field(s) belonging to this TxsdIndicator instance.
func (me *TxsdIndicator) Walk() (err error) {
	if fn := WalkHandlers.TxsdIndicator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IndicatorReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Confidence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IndicatorExpression.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Contact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AttackPhase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Reference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IndicatorID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		
		if err = me.XsdGoPkgHasElem_ObservableReference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Observable.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StartTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_NodeRole.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AlternativeIndicatorID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Indicator struct {
	Indicators []*TxsdIndicator `json:"Indicator,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Indicator,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Indicator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Indicator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Indicator instance.
func (me *XsdGoPkgHasElems_Indicator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Indicator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Indicators {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdIndicatorData struct {
	XsdGoPkgHasElems_Indicator
}

//	If the WalkHandlers.TxsdIndicatorData function is not nil (ie. was set by outside code), calls it with this TxsdIndicatorData instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdIndicatorData instance.
func (me *TxsdIndicatorData) Walk() (err error) {
	if fn := WalkHandlers.TxsdIndicatorData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Indicator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IndicatorData struct {
	IndicatorData *TxsdIndicatorData `xml:"urn:ietf:params:xml:ns:iodef-2.0 IndicatorData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IndicatorData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IndicatorData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IndicatorData instance.
func (me *XsdGoPkgHasElem_IndicatorData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IndicatorData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IndicatorData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ExtPurpose_XsdtString_ struct {
	ExtPurpose *xsdt.String `json:"ext-purpose,omitempty" xml:" ext-purpose,attr,omitempty"`
}

type TxsdIncident struct {
	XsdGoPkgHasAttr_Purpose_TincidentPurposeType_

	XsdGoPkgHasAttr_ExtPurpose_XsdtString_

	XsdGoPkgHasAttr_Status_TincidentStatusType_

	XsdGoPkgHasAttr_ExtStatus_XsdtString_

	xml.XsdGoPkgHasAttr_Lang

	XsdGoPkgHasAttr_Restriction_TrestrictionType_Private

	XsdGoPkgHasAttr_ExtRestriction_XsdtString_

	XsdGoPkgHasAttr_ObservableId_XsdtId_

	XsdGoPkgHasElem_IncidentID

	XsdGoPkgHasElem_AlternativeID

	XsdGoPkgHasElems_RelatedActivity

	XsdGoPkgHasElem_DetectTime

	XsdGoPkgHasElem_StartTime

	XsdGoPkgHasElem_EndTime

	XsdGoPkgHasElem_RecoveryTime

	XsdGoPkgHasElem_ReportTime

	XsdGoPkgHasElem_GenerationTime

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElems_Discovery

	XsdGoPkgHasElems_Assessment

	XsdGoPkgHasElems_Method

	XsdGoPkgHasElems_Contact

	XsdGoPkgHasElems_EventData

	XsdGoPkgHasElems_Indicator `xml:"-"`
	XsdGoPkgHasElem_IndicatorData `json:"-"`

	XsdGoPkgHasElem_History

	XsdGoPkgHasElems_AdditionalData
}

// Custom marshal JSON function for TxsdIncident
func (u *TxsdIncident) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdIncident

	// Copy values into exclusive JSON's fields
	if u.IndicatorData != nil {
		u.Indicators = u.IndicatorData.Indicators
	}
	if u.Descriptions == nil {
		for _, description := range u.DescriptionMLs{
			u.Descriptions = append(u.Descriptions,description)
		}
	}
	// Marshal JSON
	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdIncident
func (u *TxsdIncident) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdIncident

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.Indicators != nil {
		u.IndicatorData = &TxsdIndicatorData{}
		u.IndicatorData.Indicators = u.Indicators
	}

	if u.Descriptions != nil {
		u.DescriptionMLs = make([]*TMLStringType, len(u.Descriptions))
		for i:=0; i<len(u.Descriptions); i++{
			// Check if field is string
			str, ok := u.Descriptions[i].(string)
			if ok {
				u.DescriptionMLs[i] = &TMLStringType{}
				u.DescriptionMLs[i].Value = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.Descriptions[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.DescriptionMLs[i] = &TMLStringType{}
					FillStruct(m, u.DescriptionMLs[i])
				}
			}			
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdIncident function is not nil (ie. was set by outside code), calls it with this TxsdIncident instance as the single argument. Then calls the Walk() method on 18/26 embed(s) and 0/0 field(s) belonging to this TxsdIncident instance.
func (me *TxsdIncident) Walk() (err error) {
	if fn := WalkHandlers.TxsdIncident; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_AlternativeID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_RecoveryTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReportTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Contact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_History.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}

		if err = me.XsdGoPkgHasElems_Indicator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IndicatorData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_GenerationTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Assessment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Method.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EventData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Discovery.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IncidentID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RelatedActivity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DetectTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StartTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Incident struct {
	Incidents []*TxsdIncident `json:"Incident,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Incident,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Incident function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Incident instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Incident instance.
func (me *XsdGoPkgHasElems_Incident) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Incident; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Incidents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdIodefDocument struct {
	XsdGoPkgHasAttr_Version_XsdtString_200

	xml.XsdGoPkgHasAttr_Lang

	XsdGoPkgHasAttr_FormatId_XsdtString_

	XsdGoPkgHasAttr_PrivateEnumName_XsdtString_

	XsdGoPkgHasAttr_PrivateEnumId_XsdtString_

	XsdGoPkgHasElems_Incident

	XsdGoPkgHasElems_AdditionalData
}

//	If the WalkHandlers.TxsdIodefDocument function is not nil (ie. was set by outside code), calls it with this TxsdIodefDocument instance as the single argument. Then calls the Walk() method on 2/7 embed(s) and 0/0 field(s) belonging to this TxsdIodefDocument instance.
func (me *TxsdIodefDocument) Walk() (err error) {
	if fn := WalkHandlers.TxsdIodefDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Incident.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IodefDocument struct {
	IodefDocument *TxsdIodefDocument `json:"IODEF-Document,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 IODEF-Document,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IodefDocument function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IodefDocument instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IodefDocument instance.
func (me *XsdGoPkgHasElem_IodefDocument) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IodefDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IodefDocument.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IodefDocument struct {
	IodefDocuments []*TxsdIodefDocument `json:"IODEF-Document,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 IODEF-Document,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IodefDocument function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IodefDocument instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IodefDocument instance.
func (me *XsdGoPkgHasElems_IodefDocument) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IodefDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IodefDocuments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AlternativeID struct {
	AlternativeIDs []*TxsdAlternativeID `json:"AlternativeID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 AlternativeID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AlternativeID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AlternativeID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AlternativeID instance.
func (me *XsdGoPkgHasElems_AlternativeID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AlternativeID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AlternativeIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RelatedActivity struct {
	RelatedActivity *TxsdRelatedActivity `json:"RelatedActivity,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 RelatedActivity,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RelatedActivity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RelatedActivity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RelatedActivity instance.
func (me *XsdGoPkgHasElem_RelatedActivity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RelatedActivity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RelatedActivity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ThreatActor struct {
	ThreatActor *TxsdThreatActor `json:"ThreatActor,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ThreatActor,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ThreatActor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ThreatActor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ThreatActor instance.
func (me *XsdGoPkgHasElem_ThreatActor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ThreatActor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ThreatActor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ThreatActorID struct {
	ThreatActorID xsdt.String `json:"ThreatActorID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ThreatActorID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ThreatActorID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ThreatActorID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ThreatActorID instance.
func (me *XsdGoPkgHasElem_ThreatActorID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ThreatActorID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Campaign struct {
	Campaign *TxsdCampaign `json:"Campaign,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Campaign,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Campaign function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Campaign instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Campaign instance.
func (me *XsdGoPkgHasElem_Campaign) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Campaign; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Campaign.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_CampaignID struct {
	CampaignID xsdt.String `json:"CampaignID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 CampaignID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_CampaignID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_CampaignID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_CampaignID instance.
func (me *XsdGoPkgHasElem_CampaignID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_CampaignID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ContactName struct {
	ContactName *TMLStringType `json:"ContactName,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ContactName,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ContactName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ContactName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ContactName instance.
func (me *XsdGoPkgHasElem_ContactName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ContactName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ContactName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ContactTitle struct {
	ContactTitle *TMLStringType `json:"ContactTitle,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ContactTitle,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ContactTitle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ContactTitle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ContactTitle instance.
func (me *XsdGoPkgHasElem_ContactTitle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ContactTitle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ContactTitle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PAddress struct {
	PAddresses []*TMLStringType `json:"PAddress,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 PAddress,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PAddress instance.
func (me *XsdGoPkgHasElems_PAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PAddresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Telephone struct {
	Telephone *TxsdTelephone `json:"Telephone,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Telephone,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Telephone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Telephone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Telephone instance.
func (me *XsdGoPkgHasElem_Telephone) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Telephone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Telephone.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TelephoneNumber struct {
	TelephoneNumbers []xsdt.String `json:"TelephoneNumber,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 TelephoneNumber,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TelephoneNumber function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TelephoneNumber instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TelephoneNumber instance.
func (me *XsdGoPkgHasElems_TelephoneNumber) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TelephoneNumber; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Email struct {
	Email *TxsdEmail `json:"Email,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Email,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Email function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Email instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Email instance.
func (me *XsdGoPkgHasElem_Email) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Email; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DateTime struct {
	DateTimes []xsdt.DateTime `json:"DateTime,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 DateTime,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DateTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DateTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DateTime instance.
func (me *XsdGoPkgHasElems_DateTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DateTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReportTime struct {
	ReportTimes []xsdt.DateTime `json:"ReportTime,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ReportTime,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReportTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReportTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReportTime instance.
func (me *XsdGoPkgHasElems_ReportTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReportTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DetectTime struct {
	DetectTimes []xsdt.DateTime `json:"DetectTime,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 DetectTime,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DetectTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DetectTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DetectTime instance.
func (me *XsdGoPkgHasElems_DetectTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DetectTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StartTime struct {
	StartTimes []xsdt.DateTime `json:"StartTime,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 StartTime,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StartTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StartTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StartTime instance.
func (me *XsdGoPkgHasElems_StartTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StartTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EndTime struct {
	EndTimes []xsdt.DateTime `json:"EndTime,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EndTime,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EndTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EndTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EndTime instance.
func (me *XsdGoPkgHasElems_EndTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EndTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RecoveryTime struct {
	RecoveryTimes []xsdt.DateTime `json:"RecoveryTime,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 RecoveryTime,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RecoveryTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RecoveryTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RecoveryTime instance.
func (me *XsdGoPkgHasElems_RecoveryTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RecoveryTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_GenerationTime struct {
	GenerationTimes []xsdt.DateTime `json:"GenerationTime,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 GenerationTime,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_GenerationTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_GenerationTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_GenerationTime instance.
func (me *XsdGoPkgHasElems_GenerationTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_GenerationTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Timezone struct {
	Timezones []TimezoneType `json:"Timezone,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Timezone,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Timezone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Timezone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Timezone instance.
func (me *XsdGoPkgHasElems_Timezone) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Timezone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_History struct {
	Histories []*TxsdHistory `json:"History,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 History,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_History function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_History instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_History instance.
func (me *XsdGoPkgHasElems_History) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_History; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Histories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DefinedCOA struct {
	DefinedCOA xsdt.String `json:"DefinedCOA,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 DefinedCOA,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DefinedCOA function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DefinedCOA instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DefinedCOA instance.
func (me *XsdGoPkgHasElem_DefinedCOA) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DefinedCOA; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Discovery struct {
	Discovery *TxsdDiscovery `json:"Discovery,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Discovery,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Discovery function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Discovery instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Discovery instance.
func (me *XsdGoPkgHasElem_Discovery) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Discovery; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Discovery.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Method struct {
	Method *TxsdMethod `json:"Method,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Method,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Method function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Method instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Method instance.
func (me *XsdGoPkgHasElem_Method) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Method; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Method.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IncidentCategory struct {
	IncidentCategory *TMLStringType `json:"IncidentCategory,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 IncidentCategory,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IncidentCategory function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IncidentCategory instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IncidentCategory instance.
func (me *XsdGoPkgHasElem_IncidentCategory) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IncidentCategory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IncidentCategory.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_BusinessImpact struct {
	BusinessImpact *TBusinessImpactType `json:"BusinessImpact,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 BusinessImpact,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_BusinessImpact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_BusinessImpact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_BusinessImpact instance.
func (me *XsdGoPkgHasElem_BusinessImpact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_BusinessImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.BusinessImpact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IntendedImpact struct {
	IntendedImpact *TBusinessImpactType `json:"IntendedImpact,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 IntendedImpact,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IntendedImpact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IntendedImpact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IntendedImpact instance.
func (me *XsdGoPkgHasElem_IntendedImpact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IntendedImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IntendedImpact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MitigatingFactor struct {
	MitigatingFactor *TMLStringType `json:"MitigatingFactor,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 MitigatingFactor,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MitigatingFactor function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MitigatingFactor instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MitigatingFactor instance.
func (me *XsdGoPkgHasElem_MitigatingFactor) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MitigatingFactor; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MitigatingFactor.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Cause struct {
	Cause *TMLStringType `json:"Cause,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Cause,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Cause function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Cause instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Cause instance.
func (me *XsdGoPkgHasElem_Cause) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Cause; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Cause.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_SystemImpact struct {
	SystemImpact *TxsdSystemImpact `json:"SystemImpact,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 SystemImpact,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_SystemImpact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_SystemImpact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_SystemImpact instance.
func (me *XsdGoPkgHasElem_SystemImpact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_SystemImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.SystemImpact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TimeImpact struct {
	TimeImpact *TxsdTimeImpact `json:"TimeImpact,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 TimeImpact,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TimeImpact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TimeImpact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TimeImpact instance.
func (me *XsdGoPkgHasElem_TimeImpact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TimeImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TimeImpact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MonetaryImpact struct {
	MonetaryImpact *TxsdMonetaryImpact `json:"MonetaryImpact,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 MonetaryImpact,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MonetaryImpact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MonetaryImpact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MonetaryImpact instance.
func (me *XsdGoPkgHasElem_MonetaryImpact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MonetaryImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MonetaryImpact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Flow struct {
	Flow *TxsdFlow `json:"Flow,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Flow,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Flow function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Flow instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Flow instance.
func (me *XsdGoPkgHasElem_Flow) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Flow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Flow.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OperatingSystem struct {
	OperatingSystem *TSoftwareType `json:"OperatingSystem,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 OperatingSystem,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OperatingSystem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OperatingSystem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OperatingSystem instance.
func (me *XsdGoPkgHasElem_OperatingSystem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OperatingSystem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OperatingSystem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Node struct {
	Nodes []*TxsdNode `json:"Node,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Node,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Node function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Node instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Node instance.
func (me *XsdGoPkgHasElems_Node) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Node; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Nodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Location struct {
	Location *TMLStringType `json:"Location,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Location,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Location function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Location instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Location instance.
func (me *XsdGoPkgHasElem_Location) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Location; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Location.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NodeRole struct {
	NodeRole *TxsdNodeRole `json:"NodeRole,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 NodeRole,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NodeRole function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NodeRole instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NodeRole instance.
func (me *XsdGoPkgHasElem_NodeRole) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NodeRole; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NodeRole.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Port struct {
	Ports []*xsdt.Integer `json:"Port,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Port,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Port function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Port instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Port instance.
func (me *XsdGoPkgHasElems_Port) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Port; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Portlist struct {
	Portlists []TPortlistType `json:"Portlist,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Portlist,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Portlist function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Portlist instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Portlist instance.
func (me *XsdGoPkgHasElems_Portlist) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Portlist; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProtoType struct {
	ProtoTypes []*xsdt.Integer `json:"ProtoType,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ProtoType,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProtoType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProtoType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProtoType instance.
func (me *XsdGoPkgHasElems_ProtoType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProtoType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProtoCode struct {
	ProtoCodes []*xsdt.Integer `json:"ProtoCode,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ProtoCode,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProtoCode function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProtoCode instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProtoCode instance.
func (me *XsdGoPkgHasElems_ProtoCode) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProtoCode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProtoField struct {
	ProtoFields []*xsdt.Integer `json:"ProtoField,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ProtoField,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProtoField function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProtoField instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProtoField instance.
func (me *XsdGoPkgHasElems_ProtoField) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProtoField; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ApplicationHeader struct {
	ApplicationHeaders []*TxsdApplicationHeader `json:"ApplicationHeader,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ApplicationHeader,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ApplicationHeader function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ApplicationHeader instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ApplicationHeader instance.
func (me *XsdGoPkgHasElems_ApplicationHeader) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ApplicationHeader; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ApplicationHeaders {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ApplicationHeaderField struct {
	ApplicationHeaderField *TExtensionType `json:"ApplicationHeaderField,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ApplicationHeaderField,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ApplicationHeaderField function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ApplicationHeaderField instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ApplicationHeaderField instance.
func (me *XsdGoPkgHasElem_ApplicationHeaderField) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ApplicationHeaderField; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ApplicationHeaderField.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ServiceName struct {
	ServiceNames []*TxsdServiceName `json:"ServiceName,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ServiceName,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ServiceName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ServiceName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ServiceName instance.
func (me *XsdGoPkgHasElems_ServiceName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ServiceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ServiceNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IANAService struct {
	IANAServices []xsdt.String `json:"IANAService,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 IANAService,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IANAService function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IANAService instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IANAService instance.
func (me *XsdGoPkgHasElems_IANAService) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IANAService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Application struct {
	Applications []*TSoftwareType `json:"Application,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Application,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Application function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Application instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Application instance.
func (me *XsdGoPkgHasElems_Application) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Application; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Applications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Counter struct {
	Counter *TxsdCounter `json:"Counter,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Counter,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Counter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Counter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Counter instance.
func (me *XsdGoPkgHasElem_Counter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Counter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Counter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EmailData struct {
	EmailDatas []*TxsdEmailData `json:"EmailData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EmailData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EmailData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EmailData instance.
func (me *XsdGoPkgHasElems_EmailData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EmailData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EmailDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EmailFrom struct {
	EmailFroms []xsdt.String `json:"EmailFrom,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailFrom,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EmailFrom function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EmailFrom instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EmailFrom instance.
func (me *XsdGoPkgHasElems_EmailFrom) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EmailFrom; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EmailSubject struct {
	EmailSubjects []xsdt.String `json:"EmailSubject,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailSubject,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EmailSubject function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EmailSubject instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EmailSubject instance.
func (me *XsdGoPkgHasElems_EmailSubject) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EmailSubject; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EmailXMailer struct {
	EmailXMailers []xsdt.String `json:"EmailX-Mailer,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailX-Mailer,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EmailXMailer function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EmailXMailer instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EmailXMailer instance.
func (me *XsdGoPkgHasElems_EmailXMailer) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EmailXMailer; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EmailHeaderField struct {
	EmailHeaderField *TExtensionType `json:"EmailHeaderField,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailHeaderField,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EmailHeaderField function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EmailHeaderField instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EmailHeaderField instance.
func (me *XsdGoPkgHasElem_EmailHeaderField) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EmailHeaderField; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EmailHeaderField.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EmailHeaders struct {
	EmailHeaderses []xsdt.String `json:"EmailHeaders,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailHeaders,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EmailHeaders function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EmailHeaders instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EmailHeaders instance.
func (me *XsdGoPkgHasElems_EmailHeaders) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EmailHeaders; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EmailBody struct {
	EmailBodies []xsdt.String `json:"EmailBody,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailBody,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EmailBody function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EmailBody instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EmailBody instance.
func (me *XsdGoPkgHasElems_EmailBody) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EmailBody; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EmailMessage struct {
	EmailMessages []xsdt.String `json:"EmailMessage,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 EmailMessage,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EmailMessage function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EmailMessage instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EmailMessage instance.
func (me *XsdGoPkgHasElems_EmailMessage) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EmailMessage; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Name struct {
	Names []xsdt.String `json:"Name,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Name,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Name function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Name instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Name instance.
func (me *XsdGoPkgHasElems_Name) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Name; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DateDomainWasChecked struct {
	DateDomainWasCheckeds []xsdt.DateTime `json:"DateDomainWasChecked,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 DateDomainWasChecked,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DateDomainWasChecked function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DateDomainWasChecked instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DateDomainWasChecked instance.
func (me *XsdGoPkgHasElems_DateDomainWasChecked) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DateDomainWasChecked; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RegistrationDate struct {
	RegistrationDates []xsdt.DateTime `json:"RegistrationDate,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 RegistrationDate,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RegistrationDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RegistrationDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RegistrationDate instance.
func (me *XsdGoPkgHasElems_RegistrationDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RegistrationDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ExpirationDate struct {
	ExpirationDates []xsdt.DateTime `json:"ExpirationDate,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 ExpirationDate,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ExpirationDate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ExpirationDate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ExpirationDate instance.
func (me *XsdGoPkgHasElems_ExpirationDate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ExpirationDate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RelatedDNS struct {
	RelatedDNS *TExtensionType `json:"RelatedDNS,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 RelatedDNS,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RelatedDNS function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RelatedDNS instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RelatedDNS instance.
func (me *XsdGoPkgHasElem_RelatedDNS) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RelatedDNS; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RelatedDNS.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Nameservers struct {
	Nameservers *TxsdNameservers `json:"NameServers,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Nameservers,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Nameservers function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Nameservers instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Nameservers instance.
func (me *XsdGoPkgHasElem_Nameservers) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Nameservers; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Nameservers.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Server struct {
	Servers []xsdt.String `json:"Server,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Server,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Server function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Server instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Server instance.
func (me *XsdGoPkgHasElems_Server) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Server; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DomainContacts struct {
	DomainContactses []*TxsdDomainContacts `json:"DomainContacts,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 DomainContacts,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DomainContacts function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DomainContacts instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DomainContacts instance.
func (me *XsdGoPkgHasElems_DomainContacts) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DomainContacts; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.DomainContactses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SameDomainContact struct {
	SameDomainContacts []xsdt.String `json:"SameDomainContact,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 SameDomainContact,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SameDomainContact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SameDomainContact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SameDomainContact instance.
func (me *XsdGoPkgHasElems_SameDomainContact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SameDomainContact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Record struct {
	Records []*TxsdRecord `json:"Record,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Record,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Record function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Record instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Record instance.
func (me *XsdGoPkgHasElems_Record) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Record; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Records {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RecordPattern struct {
	RecordPattern *TxsdRecordPattern `json:"RecordPattern,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 RecordPattern,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RecordPattern function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RecordPattern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RecordPattern instance.
func (me *XsdGoPkgHasElem_RecordPattern) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RecordPattern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RecordPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RecordItem struct {
	RecordItem *TExtensionType `json:"RecordItem,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 RecordItem,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RecordItem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RecordItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RecordItem instance.
func (me *XsdGoPkgHasElem_RecordItem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RecordItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RecordItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Key struct {
	Key *TxsdKey `json:"Key,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Key,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Key function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Key instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Key instance.
func (me *XsdGoPkgHasElem_Key) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Key; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Key.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_KeyName struct {
	KeyNames []xsdt.String `json:"KeyName,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 KeyName,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_KeyName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_KeyName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_KeyName instance.
func (me *XsdGoPkgHasElems_KeyName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_KeyName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Value struct {
	Values []xsdt.String `json:"Value,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Value,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Value function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Value instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Value instance.
func (me *XsdGoPkgHasElems_Value) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Value; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_File struct {
	File *TxsdFile `json:"File,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 File,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_File function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_File instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_File instance.
func (me *XsdGoPkgHasElem_File) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_File; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.File.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FileName struct {
	FileNames []xsdt.String `json:"FileName,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 FileName,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FileName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FileName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FileName instance.
func (me *XsdGoPkgHasElems_FileName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FileName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FileSize struct {
	FileSizes []*xsdt.Integer `json:"FileSize,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 FileSize,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FileSize function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FileSize instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FileSize instance.
func (me *XsdGoPkgHasElems_FileSize) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FileSize; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_FileType struct {
	FileTypes []xsdt.String `json:"FileType,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 FileType,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_FileType function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_FileType instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_FileType instance.
func (me *XsdGoPkgHasElems_FileType) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_FileType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AssociatedSoftware struct {
	AssociatedSoftwares []*TSoftwareType `json:"AssociatedSoftware,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 AssociatedSoftware,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AssociatedSoftware function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AssociatedSoftware instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AssociatedSoftware instance.
func (me *XsdGoPkgHasElems_AssociatedSoftware) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AssociatedSoftware; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AssociatedSoftwares {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FileProperties struct {
	FileProperties *TExtensionType `json:"FileProperties,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 FileProperties,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FileProperties function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FileProperties instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FileProperties instance.
func (me *XsdGoPkgHasElem_FileProperties) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FileProperties; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FileProperties.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HashTargetID struct {
	HashTargetIDs []xsdt.String `json:"HashTargetID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 HashTargetID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HashTargetID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HashTargetID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HashTargetID instance.
func (me *XsdGoPkgHasElems_HashTargetID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HashTargetID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FuzzyHash struct {
	FuzzyHash *TxsdFuzzyHash `json:"FuzzyHash,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 FuzzyHash,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FuzzyHash function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FuzzyHash instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FuzzyHash instance.
func (me *XsdGoPkgHasElem_FuzzyHash) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FuzzyHash; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FuzzyHash.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_FuzzyHashValue struct {
	FuzzyHashValue *TExtensionType `json:"FuzzyHashValue,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 FuzzyHashValue,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_FuzzyHashValue function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_FuzzyHashValue instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_FuzzyHashValue instance.
func (me *XsdGoPkgHasElem_FuzzyHashValue) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_FuzzyHashValue; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.FuzzyHashValue.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Certificate struct {
	Certificate *TxsdCertificate `json:"Certificate,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Certificate,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Certificate function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Certificate instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Certificate instance.
func (me *XsdGoPkgHasElem_Certificate) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Certificate; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Certificate.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IndicatorData struct {
	IndicatorDatas []*TxsdIndicatorData `json:"IndicatorData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 IndicatorData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IndicatorData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IndicatorData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IndicatorData instance.
func (me *XsdGoPkgHasElems_IndicatorData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IndicatorData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IndicatorDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Indicator struct {
	Indicator *TxsdIndicator `json:"Indicator,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Indicator,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Indicator function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Indicator instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Indicator instance.
func (me *XsdGoPkgHasElem_Indicator) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Indicator; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Indicator.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AlternativeIndicatorID struct {
	AlternativeIndicatorID *TxsdAlternativeIndicatorID `json:"AlternativeIndicatorID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 AlternativeIndicatorID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AlternativeIndicatorID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AlternativeIndicatorID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AlternativeIndicatorID instance.
func (me *XsdGoPkgHasElem_AlternativeIndicatorID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AlternativeIndicatorID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AlternativeIndicatorID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Observable struct {
	Observables []*TxsdObservable `json:"Observable,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Observable,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Observable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Observable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Observable instance.
func (me *XsdGoPkgHasElems_Observable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Observable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Observables {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BulkObservable struct {
	BulkObservables []*TxsdBulkObservable `json:"BulkObservable,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 BulkObservable,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BulkObservable function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BulkObservable instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BulkObservable instance.
func (me *XsdGoPkgHasElems_BulkObservable) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BulkObservable; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BulkObservables {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BulkObservableFormat struct {
	BulkObservableFormats []*TxsdBulkObservableFormat `json:"BulkObservableFormat,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 BulkObservableFormat,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BulkObservableFormat function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BulkObservableFormat instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BulkObservableFormat instance.
func (me *XsdGoPkgHasElems_BulkObservableFormat) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BulkObservableFormat; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.BulkObservableFormats {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_BulkObservableList struct {
	BulkObservableLists []xsdt.String `json:"BulkObservableList,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 BulkObservableList,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_BulkObservableList function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_BulkObservableList instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_BulkObservableList instance.
func (me *XsdGoPkgHasElems_BulkObservableList) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_BulkObservableList; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IndicatorExpression struct {
	IndicatorExpressions []*TxsdIndicatorExpression `json:"IndicatorExpression,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 IndicatorExpression,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IndicatorExpression function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IndicatorExpression instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IndicatorExpression instance.
func (me *XsdGoPkgHasElems_IndicatorExpression) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IndicatorExpression; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IndicatorExpressions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ObservableReference struct {
	ObservableReferences []*TxsdObservableReference `xml:"urn:ietf:params:xml:ns:iodef-2.0 ObservableReference,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ObservableReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ObservableReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ObservableReference instance.
func (me *XsdGoPkgHasElems_ObservableReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ObservableReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ObservableReferences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IndicatorReference struct {
	IndicatorReferences []*TxsdIndicatorReference `json:"IndicatorReference,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 IndicatorReference,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IndicatorReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IndicatorReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IndicatorReference instance.
func (me *XsdGoPkgHasElems_IndicatorReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IndicatorReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IndicatorReferences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AttackPhase struct {
	AttackPhase *TxsdAttackPhase `json:"AttackPhase,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 AttackPhase,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AttackPhase function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AttackPhase instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AttackPhase instance.
func (me *XsdGoPkgHasElem_AttackPhase) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AttackPhase; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttackPhase.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AttackPhaseID struct {
	AttackPhaseID xsdt.String `json:"AttackPhaseID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 AttackPhaseID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AttackPhaseID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AttackPhaseID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AttackPhaseID instance.
func (me *XsdGoPkgHasElem_AttackPhaseID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AttackPhaseID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AdditionalData struct {
	AdditionalData *TExtensionType `json:"AdditionalData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 AdditionalData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AdditionalData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AdditionalData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AdditionalData instance.
func (me *XsdGoPkgHasElem_AdditionalData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AdditionalData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Description struct {
	Description *TMLStringType `json:"Description,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 Description,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Description function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Description instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Description instance.
func (me *XsdGoPkgHasElem_Description) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Description; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Url struct {
	Url *xsdt.AnyURI `json:"URL,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 URL,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Url function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Url instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Url instance.
func (me *XsdGoPkgHasElem_Url) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Url; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_SoftwareReference struct {
	SoftwareReferences []*TxsdSoftwareReference `json:"SoftwareReference,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 SoftwareReference,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_SoftwareReference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_SoftwareReference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_SoftwareReference instance.
func (me *XsdGoPkgHasElems_SoftwareReference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_SoftwareReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.SoftwareReferences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AssetIDsequenceSystemschema_AssetID_XsdtString_ struct {
	AssetID xsdt.String `json:"AssetID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 AssetID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AssetIDsequenceSystemschema_AssetID_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AssetIDsequenceSystemschema_AssetID_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_AssetIDsequenceSystemschema_AssetID_XsdtString_ instance.
func (me *XsdGoPkgHasElem_AssetIDsequenceSystemschema_AssetID_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AssetIDsequenceSystemschema_AssetID_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_ struct {
	DetectionConfiguration xsdt.String `json:"DetectionConfiguration,omitempty" xml:"urn:ietf:params:xml:ns:iodef-2.0 DetectionConfiguration,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_ instance.
func (me *XsdGoPkgHasElem_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 318 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 318 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_PAddress                                                                                                     func(*XsdGoPkgHasElem_PAddress, bool) error
	TxsdHistory                                                                                                                  func(*TxsdHistory, bool) error
	TxsdIncident                                                                                                                 func(*TxsdIncident, bool) error
	XsdGoPkgHasElems_IndicatorData                                                                                               func(*XsdGoPkgHasElems_IndicatorData, bool) error
	XsdGoPkgHasElem_HistoryItem                                                                                                  func(*XsdGoPkgHasElem_HistoryItem, bool) error
	XsdGoPkgHasElems_AlternativeID                                                                                               func(*XsdGoPkgHasElems_AlternativeID, bool) error
	XsdGoPkgHasElems_ServiceName                                                                                                 func(*XsdGoPkgHasElems_ServiceName, bool) error
	XsdGoPkgHasElems_Application                                                                                                 func(*XsdGoPkgHasElems_Application, bool) error
	XsdGoPkgHasElems_EmailFrom                                                                                                   func(*XsdGoPkgHasElems_EmailFrom, bool) error
	XsdGoPkgHasElems_EmailXMailer                                                                                                func(*XsdGoPkgHasElems_EmailXMailer, bool) error
	XsdGoPkgHasElem_FuzzyHashValue                                                                                               func(*XsdGoPkgHasElem_FuzzyHashValue, bool) error
	XsdGoPkgHasElem_MitigatingFactor                                                                                             func(*XsdGoPkgHasElem_MitigatingFactor, bool) error
	XsdGoPkgHasElem_DateTime                                                                                                     func(*XsdGoPkgHasElem_DateTime, bool) error
	XsdGoPkgHasElems_MonetaryImpact                                                                                              func(*XsdGoPkgHasElems_MonetaryImpact, bool) error
	XsdGoPkgHasElems_Location                                                                                                    func(*XsdGoPkgHasElems_Location, bool) error
	TxsdBulkObservableFormat                                                                                                     func(*TxsdBulkObservableFormat, bool) error
	XsdGoPkgHasElem_MonetaryImpact                                                                                               func(*XsdGoPkgHasElem_MonetaryImpact, bool) error
	XsdGoPkgHasElems_FileType                                                                                                    func(*XsdGoPkgHasElems_FileType, bool) error
	XsdGoPkgHasElems_IncidentID                                                                                                  func(*XsdGoPkgHasElems_IncidentID, bool) error
	XsdGoPkgHasElem_Contact                                                                                                      func(*XsdGoPkgHasElem_Contact, bool) error
	TxsdHistoryItem                                                                                                              func(*TxsdHistoryItem, bool) error
	XsdGoPkgHasElem_FileType                                                                                                     func(*XsdGoPkgHasElem_FileType, bool) error
	XsdGoPkgHasElem_EmailSubject                                                                                                 func(*XsdGoPkgHasElem_EmailSubject, bool) error
	XsdGoPkgHasElems_ReportTime                                                                                                  func(*XsdGoPkgHasElems_ReportTime, bool) error
	XsdGoPkgHasElem_NodeRole                                                                                                     func(*XsdGoPkgHasElem_NodeRole, bool) error
	XsdGoPkgHasElems_DateDomainWasChecked                                                                                        func(*XsdGoPkgHasElems_DateDomainWasChecked, bool) error
	XsdGoPkgHasElems_DefinedCOA                                                                                                  func(*XsdGoPkgHasElems_DefinedCOA, bool) error
	TxsdAssessment                                                                                                               func(*TxsdAssessment, bool) error
	XsdGoPkgHasElem_ExpirationDate                                                                                               func(*XsdGoPkgHasElem_ExpirationDate, bool) error
	XsdGoPkgHasElem_EmailMessage                                                                                                 func(*XsdGoPkgHasElem_EmailMessage, bool) error
	XsdGoPkgHasElem_BulkObservableFormat                                                                                         func(*XsdGoPkgHasElem_BulkObservableFormat, bool) error
	XsdGoPkgHasElems_AttackPhaseID                                                                                               func(*XsdGoPkgHasElems_AttackPhaseID, bool) error
	XsdGoPkgHasElem_IndicatorData                                                                                                func(*XsdGoPkgHasElem_IndicatorData, bool) error
	XsdGoPkgHasElems_OperatingSystem                                                                                             func(*XsdGoPkgHasElems_OperatingSystem, bool) error
	TxsdNode                                                                                                                     func(*TxsdNode, bool) error
	XsdGoPkgHasElem_Incident                                                                                                     func(*XsdGoPkgHasElem_Incident, bool) error
	XsdGoPkgHasElem_BusinessImpact                                                                                               func(*XsdGoPkgHasElem_BusinessImpact, bool) error
	XsdGoPkgHasElems_DomainContacts                                                                                              func(*XsdGoPkgHasElems_DomainContacts, bool) error
	XsdGoPkgHasElems_Telephone                                                                                                   func(*XsdGoPkgHasElems_Telephone, bool) error
	XsdGoPkgHasElem_GenerationTime                                                                                               func(*XsdGoPkgHasElem_GenerationTime, bool) error
	XsdGoPkgHasElem_HashData                                                                                                     func(*XsdGoPkgHasElem_HashData, bool) error
	XsdGoPkgHasElems_EmailHeaderField                                                                                            func(*XsdGoPkgHasElems_EmailHeaderField, bool) error
	XsdGoPkgHasElems_GenerationTime                                                                                              func(*XsdGoPkgHasElems_GenerationTime, bool) error
	XsdGoPkgHasElems_EmailBody                                                                                                   func(*XsdGoPkgHasElems_EmailBody, bool) error
	XsdGoPkgHasElem_KeyValue                                                                                                     func(*XsdGoPkgHasElem_KeyValue, bool) error
	XsdGoPkgHasElem_Value                                                                                                        func(*XsdGoPkgHasElem_Value, bool) error
	TxsdDomainContacts                                                                                                           func(*TxsdDomainContacts, bool) error
	XsdGoPkgHasElem_ProtoType                                                                                                    func(*XsdGoPkgHasElem_ProtoType, bool) error
	XsdGoPkgHasElem_Flow                                                                                                         func(*XsdGoPkgHasElem_Flow, bool) error
	TxsdDomainData                                                                                                               func(*TxsdDomainData, bool) error
	XsdGoPkgHasElem_IndicatorID                                                                                                  func(*XsdGoPkgHasElem_IndicatorID, bool) error
	XsdGoPkgHasElem_IncidentCategory                                                                                             func(*XsdGoPkgHasElem_IncidentCategory, bool) error
	XsdGoPkgHasElem_TimeImpact                                                                                                   func(*XsdGoPkgHasElem_TimeImpact, bool) error
	XsdGoPkgHasElems_RelatedActivity                                                                                             func(*XsdGoPkgHasElems_RelatedActivity, bool) error
	TxsdAlternativeID                                                                                                            func(*TxsdAlternativeID, bool) error
	XsdGoPkgHasElems_BulkObservable                                                                                              func(*XsdGoPkgHasElems_BulkObservable, bool) error
	TxsdThreatActor                                                                                                              func(*TxsdThreatActor, bool) error
	XsdGoPkgHasElems_AssetIDsequenceTxsdSystemSystemschema_AssetID_XsdtString_                                                   func(*XsdGoPkgHasElems_AssetIDsequenceTxsdSystemSystemschema_AssetID_XsdtString_, bool) error
	XsdGoPkgHasElems_IANAService                                                                                                 func(*XsdGoPkgHasElems_IANAService, bool) error
	TSoftwareType                                                                                                                func(*TSoftwareType, bool) error
	XsdGoPkgHasElems_HashData                                                                                                    func(*XsdGoPkgHasElems_HashData, bool) error
	XsdGoPkgHasElems_AssociatedSoftware                                                                                          func(*XsdGoPkgHasElems_AssociatedSoftware, bool) error
	XsdGoPkgHasElems_BulkObservableFormat                                                                                        func(*XsdGoPkgHasElems_BulkObservableFormat, bool) error
	XsdGoPkgHasElem_Counter                                                                                                      func(*XsdGoPkgHasElem_Counter, bool) error
	XsdGoPkgHasElem_DetectTime                                                                                                   func(*XsdGoPkgHasElem_DetectTime, bool) error
	XsdGoPkgHasElems_Contact                                                                                                     func(*XsdGoPkgHasElems_Contact, bool) error
	TxsdSoftwareReference                                                                                                        func(*TxsdSoftwareReference, bool) error
	XsdGoPkgHasElems_Reference                                                                                                   func(*XsdGoPkgHasElems_Reference, bool) error
	TxsdEventData                                                                                                                func(*TxsdEventData, bool) error
	XsdGoPkgHasElem_EventData                                                                                                    func(*XsdGoPkgHasElem_EventData, bool) error
	XsdGoPkgHasElem_RecordData                                                                                                   func(*XsdGoPkgHasElem_RecordData, bool) error
	XsdGoPkgHasElems_PostalAddress                                                                                               func(*XsdGoPkgHasElems_PostalAddress, bool) error
	XsdGoPkgHasElems_RecordItem                                                                                                  func(*XsdGoPkgHasElems_RecordItem, bool) error
	TxsdService                                                                                                                  func(*TxsdService, bool) error
	XsdGoPkgHasElem_DomainData                                                                                                   func(*XsdGoPkgHasElem_DomainData, bool) error
	XsdGoPkgHasElem_Key                                                                                                          func(*XsdGoPkgHasElem_Key, bool) error
	XsdGoPkgHasCdata                                                                                                             func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasCdata_Id                                                                                                          func(*XsdGoPkgHasCdata_Id, bool) error
	XsdGoPkgHasCdata_Value                                                                                                       func(*XsdGoPkgHasCdata_Value, bool) error
	XsdGoPkgHasCdata_Value_Number                                                                                                func(*XsdGoPkgHasCdata_Value_Number, bool) error
	XsdGoPkgHasCdata_Handle                                                                                                      func(*XsdGoPkgHasCdata_Handle, bool) error
	XsdGoPkgHasElems_Cause                                                                                                       func(*XsdGoPkgHasElems_Cause, bool) error
	XsdGoPkgHasElems_FuzzyHashValue                                                                                              func(*XsdGoPkgHasElems_FuzzyHashValue, bool) error
	XsdGoPkgHasElem_KeyName                                                                                                      func(*XsdGoPkgHasElem_KeyName, bool) error
	XsdGoPkgHasElems_WindowsRegistryKeysModified                                                                                 func(*XsdGoPkgHasElems_WindowsRegistryKeysModified, bool) error
	XsdGoPkgHasElems_Address                                                                                                     func(*XsdGoPkgHasElems_Address, bool) error
	XsdGoPkgHasElems_ApplicationHeaderField                                                                                      func(*XsdGoPkgHasElems_ApplicationHeaderField, bool) error
	XsdGoPkgHasElems_Email                                                                                                       func(*XsdGoPkgHasElems_Email, bool) error
	TxsdFileData                                                                                                                 func(*TxsdFileData, bool) error
	XsdGoPkgHasElem_ProtoCode                                                                                                    func(*XsdGoPkgHasElem_ProtoCode, bool) error
	XsdGoPkgHasElem_Service                                                                                                      func(*XsdGoPkgHasElem_Service, bool) error
	XsdGoPkgHasElem_TelephoneNumber                                                                                              func(*XsdGoPkgHasElem_TelephoneNumber, bool) error
	XsdGoPkgHasElem_IncidentID                                                                                                   func(*XsdGoPkgHasElem_IncidentID, bool) error
	TxsdWindowsRegistryKeysModified                                                                                              func(*TxsdWindowsRegistryKeysModified, bool) error
	TxsdIndicatorExpression                                                                                                      func(*TxsdIndicatorExpression, bool) error
	XsdGoPkgHasElem_FileProperties                                                                                               func(*XsdGoPkgHasElem_FileProperties, bool) error
	TxsdRelatedActivity                                                                                                          func(*TxsdRelatedActivity, bool) error
	XsdGoPkgHasElems_ContactName                                                                                                 func(*XsdGoPkgHasElems_ContactName, bool) error
	XsdGoPkgHasElem_DetectionPattern                                                                                             func(*XsdGoPkgHasElem_DetectionPattern, bool) error
	XsdGoPkgHasElems_DetectTime                                                                                                  func(*XsdGoPkgHasElems_DetectTime, bool) error
	TxsdKey                                                                                                                      func(*TxsdKey, bool) error
	XsdGoPkgHasElem_ObservableReference                                                                                          func(*XsdGoPkgHasElem_ObservableReference, bool) error
	XsdGoPkgHasElem_Telephone                                                                                                    func(*XsdGoPkgHasElem_Telephone, bool) error
	TxsdCampaign                                                                                                                 func(*TxsdCampaign, bool) error
	XsdGoPkgHasElems_IntendedImpact                                                                                              func(*XsdGoPkgHasElems_IntendedImpact, bool) error
	TxsdFile                                                                                                                     func(*TxsdFile, bool) error
	XsdGoPkgHasElems_EmailData                                                                                                   func(*XsdGoPkgHasElems_EmailData, bool) error
	XsdGoPkgHasElems_IndicatorReference                                                                                          func(*XsdGoPkgHasElems_IndicatorReference, bool) error
	XsdGoPkgHasElems_FileData                                                                                                    func(*XsdGoPkgHasElems_FileData, bool) error
	XsdGoPkgHasElem_Port                                                                                                         func(*XsdGoPkgHasElem_Port, bool) error
	XsdGoPkgHasElem_ProtoField                                                                                                   func(*XsdGoPkgHasElem_ProtoField, bool) error
	TxsdSystem                                                                                                                   func(*TxsdSystem, bool) error
	XsdGoPkgHasElem_Certificate                                                                                                  func(*XsdGoPkgHasElem_Certificate, bool) error
	XsdGoPkgHasElems_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_ func(*XsdGoPkgHasElems_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_, bool) error
	TxsdDetectionPattern                                                                                                         func(*TxsdDetectionPattern, bool) error
	TxsdExpectation                                                                                                              func(*TxsdExpectation, bool) error
	XsdGoPkgHasElem_Discovery                                                                                                    func(*XsdGoPkgHasElem_Discovery, bool) error
	XsdGoPkgHasElems_Key                                                                                                         func(*XsdGoPkgHasElems_Key, bool) error
	XsdGoPkgHasElem_Record                                                                                                       func(*XsdGoPkgHasElem_Record, bool) error
	XsdGoPkgHasElems_NodeRole                                                                                                    func(*XsdGoPkgHasElems_NodeRole, bool) error
	XsdGoPkgHasElem_EmailHeaders                                                                                                 func(*XsdGoPkgHasElem_EmailHeaders, bool) error
	XsdGoPkgHasElems_ExpirationDate                                                                                              func(*XsdGoPkgHasElems_ExpirationDate, bool) error
	XsdGoPkgHasElem_Description                                                                                                  func(*XsdGoPkgHasElem_Description, bool) error
	XsdGoPkgHasElem_StartTime                                                                                                    func(*XsdGoPkgHasElem_StartTime, bool) error
	XsdGoPkgHasElem_SignatureData                                                                                                func(*XsdGoPkgHasElem_SignatureData, bool) error
	XsdGoPkgHasElem_PostalAddress                                                                                                func(*XsdGoPkgHasElem_PostalAddress, bool) error
	XsdGoPkgHasElem_ThreatActor                                                                                                  func(*XsdGoPkgHasElem_ThreatActor, bool) error
	XsdGoPkgHasElem_Campaign                                                                                                     func(*XsdGoPkgHasElem_Campaign, bool) error
	XsdGoPkgHasElems_StartTime                                                                                                   func(*XsdGoPkgHasElems_StartTime, bool) error
	XsdGoPkgHasElem_Nameservers                                                                                                  func(*XsdGoPkgHasElem_Nameservers, bool) error
	XsdGoPkgHasElems_CampaignID                                                                                                  func(*XsdGoPkgHasElems_CampaignID, bool) error
	XsdGoPkgHasElem_EmailTo                                                                                                      func(*XsdGoPkgHasElem_EmailTo, bool) error
	XsdGoPkgHasElems_RegistrationDate                                                                                            func(*XsdGoPkgHasElems_RegistrationDate, bool) error
	XsdGoPkgHasElem_Indicator                                                                                                    func(*XsdGoPkgHasElem_Indicator, bool) error
	TxsdSignatureData                                                                                                            func(*TxsdSignatureData, bool) error
	XsdGoPkgHasElems_Nameservers                                                                                                 func(*XsdGoPkgHasElems_Nameservers, bool) error
	TxsdEmailData                                                                                                                func(*TxsdEmailData, bool) error
	XsdGoPkgHasElem_ServiceName                                                                                                  func(*XsdGoPkgHasElem_ServiceName, bool) error
	XsdGoPkgHasElems_SoftwareReference                                                                                           func(*XsdGoPkgHasElems_SoftwareReference, bool) error
	TxsdContact                                                                                                                  func(*TxsdContact, bool) error
	TxsdCounter                                                                                                                  func(*TxsdCounter, bool) error
	XsdGoPkgHasElems_FileProperties                                                                                              func(*XsdGoPkgHasElems_FileProperties, bool) error
	XsdGoPkgHasElem_Reference                                                                                                    func(*XsdGoPkgHasElem_Reference, bool) error
	XsdGoPkgHasElems_Description                                                                                                 func(*XsdGoPkgHasElems_Description, bool) error
	XsdGoPkgHasElems_System                                                                                                      func(*XsdGoPkgHasElems_System, bool) error
	XsdGoPkgHasElems_Node                                                                                                        func(*XsdGoPkgHasElems_Node, bool) error
	XsdGoPkgHasElem_AttackPhase                                                                                                  func(*XsdGoPkgHasElem_AttackPhase, bool) error
	XsdGoPkgHasElem_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_  func(*XsdGoPkgHasElem_DetectionConfigurationsequenceTxsdDetectionPatternDetectionPatternschema_DetectionConfiguration_XsdtString_, bool) error
	XsdGoPkgHasElem_WindowsRegistryKeysModified                                                                                  func(*XsdGoPkgHasElem_WindowsRegistryKeysModified, bool) error
	XsdGoPkgHasElems_DetectionPattern                                                                                            func(*XsdGoPkgHasElems_DetectionPattern, bool) error
	TxsdDiscovery                                                                                                                func(*TxsdDiscovery, bool) error
	XsdGoPkgHasElems_RecordPattern                                                                                               func(*XsdGoPkgHasElems_RecordPattern, bool) error
	TxsdNameservers                                                                                                              func(*TxsdNameservers, bool) error
	XsdGoPkgHasElem_DomainContacts                                                                                               func(*XsdGoPkgHasElem_DomainContacts, bool) error
	TxsdApplicationHeader                                                                                                        func(*TxsdApplicationHeader, bool) error
	XsdGoPkgHasElems_Expectation                                                                                                 func(*XsdGoPkgHasElems_Expectation, bool) error
	XsdGoPkgHasElem_ContactTitle                                                                                                 func(*XsdGoPkgHasElem_ContactTitle, bool) error
	XsdGoPkgHasElems_History                                                                                                     func(*XsdGoPkgHasElems_History, bool) error
	XsdGoPkgHasElem_Node                                                                                                         func(*XsdGoPkgHasElem_Node, bool) error
	XsdGoPkgHasElems_RecoveryTime                                                                                                func(*XsdGoPkgHasElems_RecoveryTime, bool) error
	XsdGoPkgHasElem_OperatingSystem                                                                                              func(*XsdGoPkgHasElem_OperatingSystem, bool) error
	XsdGoPkgHasElems_ProtoField                                                                                                  func(*XsdGoPkgHasElems_ProtoField, bool) error
	XsdGoPkgHasElems_ProtoCode                                                                                                   func(*XsdGoPkgHasElems_ProtoCode, bool) error
	XsdGoPkgHasElem_ApplicationHeaderField                                                                                       func(*XsdGoPkgHasElem_ApplicationHeaderField, bool) error
	XsdGoPkgHasElem_SoftwareReference                                                                                            func(*XsdGoPkgHasElem_SoftwareReference, bool) error
	TxsdMonetaryImpact                                                                                                           func(*TxsdMonetaryImpact, bool) error
	TxsdCertificateData                                                                                                          func(*TxsdCertificateData, bool) error
	TxsdRecordData                                                                                                               func(*TxsdRecordData, bool) error
	XsdGoPkgHasElem_IANAService                                                                                                  func(*XsdGoPkgHasElem_IANAService, bool) error
	XsdGoPkgHasElem_BulkObservableListsequenceTxsdBulkObservableBulkObservableschema_BulkObservableList_XsdtString_              func(*XsdGoPkgHasElem_BulkObservableListsequenceTxsdBulkObservableBulkObservableschema_BulkObservableList_XsdtString_, bool) error
	XsdGoPkgHasElems_EndTime                                                                                                     func(*XsdGoPkgHasElems_EndTime, bool) error
	XsdGoPkgHasElem_AlternativeID                                                                                                func(*XsdGoPkgHasElem_AlternativeID, bool) error
	XsdGoPkgHasElem_IntendedImpact                                                                                               func(*XsdGoPkgHasElem_IntendedImpact, bool) error
	XsdGoPkgHasElems_ObservableReference                                                                                         func(*XsdGoPkgHasElems_ObservableReference, bool) error
	XsdGoPkgHasElems_Counter                                                                                                     func(*XsdGoPkgHasElems_Counter, bool) error
	XsdGoPkgHasElems_Certificate                                                                                                 func(*XsdGoPkgHasElems_Certificate, bool) error
	XsdGoPkgHasElems_TelephoneNumber                                                                                             func(*XsdGoPkgHasElems_TelephoneNumber, bool) error
	XsdGoPkgHasElem_Email                                                                                                        func(*XsdGoPkgHasElem_Email, bool) error
	XsdGoPkgHasElem_Cause                                                                                                        func(*XsdGoPkgHasElem_Cause, bool) error
	XsdGoPkgHasElems_PAddress                                                                                                    func(*XsdGoPkgHasElems_PAddress, bool) error
	XsdGoPkgHasElems_Method                                                                                                      func(*XsdGoPkgHasElems_Method, bool) error
	XsdGoPkgHasElems_DomainData                                                                                                  func(*XsdGoPkgHasElems_DomainData, bool) error
	XsdGoPkgHasElem_Portlist                                                                                                     func(*XsdGoPkgHasElem_Portlist, bool) error
	XsdGoPkgHasElem_RegistryHandle                                                                                               func(*XsdGoPkgHasElem_RegistryHandle, bool) error
	XsdGoPkgHasElem_IndicatorExpression                                                                                          func(*XsdGoPkgHasElem_IndicatorExpression, bool) error
	TxsdIndicator                                                                                                                func(*TxsdIndicator, bool) error
	XsdGoPkgHasElems_Incident                                                                                                    func(*XsdGoPkgHasElems_Incident, bool) error
	XsdGoPkgHasElems_Value                                                                                                       func(*XsdGoPkgHasElems_Value, bool) error
	XsdGoPkgHasElem_FuzzyHash                                                                                                    func(*XsdGoPkgHasElem_FuzzyHash, bool) error
	XsdGoPkgHasElem_History                                                                                                      func(*XsdGoPkgHasElem_History, bool) error
	TxsdAttackPhase                                                                                                              func(*TxsdAttackPhase, bool) error
	XsdGoPkgHasElem_Confidence                                                                                                   func(*XsdGoPkgHasElem_Confidence, bool) error
	XsdGoPkgHasElems_BusinessImpact                                                                                              func(*XsdGoPkgHasElems_BusinessImpact, bool) error
	XsdGoPkgHasElem_Assessment                                                                                                   func(*XsdGoPkgHasElem_Assessment, bool) error
	XsdGoPkgHasElems_AttackPhase                                                                                                 func(*XsdGoPkgHasElems_AttackPhase, bool) error
	XsdGoPkgHasElem_AlternativeIndicatorID                                                                                       func(*XsdGoPkgHasElem_AlternativeIndicatorID, bool) error
	XsdGoPkgHasElem_Url                                                                                                          func(*XsdGoPkgHasElem_Url, bool) error
	XsdGoPkgHasElems_ContactTitle                                                                                                func(*XsdGoPkgHasElems_ContactTitle, bool) error
	XsdGoPkgHasElem_EmailBody                                                                                                    func(*XsdGoPkgHasElem_EmailBody, bool) error
	XsdGoPkgHasElem_Address                                                                                                      func(*XsdGoPkgHasElem_Address, bool) error
	XsdGoPkgHasElem_RecordItem                                                                                                   func(*XsdGoPkgHasElem_RecordItem, bool) error
	TxsdRecord                                                                                                                   func(*TxsdRecord, bool) error
	XsdGoPkgHasElem_RegistrationDate                                                                                             func(*XsdGoPkgHasElem_RegistrationDate, bool) error
	XsdGoPkgHasElems_Service                                                                                                     func(*XsdGoPkgHasElems_Service, bool) error
	XsdGoPkgHasElems_IncidentCategory                                                                                            func(*XsdGoPkgHasElems_IncidentCategory, bool) error
	TxsdHash                                                                                                                     func(*TxsdHash, bool) error
	XsdGoPkgHasElem_EmailXMailer                                                                                                 func(*XsdGoPkgHasElem_EmailXMailer, bool) error
	XsdGoPkgHasElems_RegistryHandle                                                                                              func(*XsdGoPkgHasElems_RegistryHandle, bool) error
	TxsdBulkObservable                                                                                                           func(*TxsdBulkObservable, bool) error
	XsdGoPkgHasElems_Portlist                                                                                                    func(*XsdGoPkgHasElems_Portlist, bool) error
	XsdGoPkgHasElems_FileSize                                                                                                    func(*XsdGoPkgHasElems_FileSize, bool) error
	XsdGoPkgHasElems_TimeImpact                                                                                                  func(*XsdGoPkgHasElems_TimeImpact, bool) error
	XsdGoPkgHasElems_Assessment                                                                                                  func(*XsdGoPkgHasElems_Assessment, bool) error
	TxsdCertificate                                                                                                              func(*TxsdCertificate, bool) error
	XsdGoPkgHasElems_RelatedDNS                                                                                                  func(*XsdGoPkgHasElems_RelatedDNS, bool) error
	XsdGoPkgHasElem_SameDomainContact                                                                                            func(*XsdGoPkgHasElem_SameDomainContact, bool) error
	TIncidentIDType                                                                                                              func(*TIncidentIDType, bool) error
	TxsdIndicatorID                                                                                                              func(*TxsdIndicatorID, bool) error
	XsdGoPkgHasElems_MitigatingFactor                                                                                            func(*XsdGoPkgHasElems_MitigatingFactor, bool) error
	TxsdMethod                                                                                                                   func(*TxsdMethod, bool) error
	XsdGoPkgHasElem_IndicatorReference                                                                                           func(*XsdGoPkgHasElem_IndicatorReference, bool) error
	XsdGoPkgHasElems_FuzzyHash                                                                                                   func(*XsdGoPkgHasElems_FuzzyHash, bool) error
	XsdGoPkgHasElems_File                                                                                                        func(*XsdGoPkgHasElems_File, bool) error
	XsdGoPkgHasElems_Timezone                                                                                                    func(*XsdGoPkgHasElems_Timezone, bool) error
	XsdGoPkgHasElems_IndicatorID                                                                                                 func(*XsdGoPkgHasElems_IndicatorID, bool) error
	XsdGoPkgHasElems_ThreatActor                                                                                                 func(*XsdGoPkgHasElems_ThreatActor, bool) error
	XsdGoPkgHasElems_Campaign                                                                                                    func(*XsdGoPkgHasElems_Campaign, bool) error
	XsdGoPkgHasElem_FileName                                                                                                     func(*XsdGoPkgHasElem_FileName, bool) error
	XsdGoPkgHasElems_EmailTo                                                                                                     func(*XsdGoPkgHasElems_EmailTo, bool) error
	TxsdFlow                                                                                                                     func(*TxsdFlow, bool) error
	TxsdAlternativeIndicatorID                                                                                                   func(*TxsdAlternativeIndicatorID, bool) error
	XsdGoPkgHasElems_EmailSubject                                                                                                func(*XsdGoPkgHasElems_EmailSubject, bool) error
	XsdGoPkgHasElem_RecordPattern                                                                                                func(*XsdGoPkgHasElem_RecordPattern, bool) error
	XsdGoPkgHasElem_File                                                                                                         func(*XsdGoPkgHasElem_File, bool) error
	TxsdEmail                                                                                                                    func(*TxsdEmail, bool) error
	TxsdSystemImpact                                                                                                             func(*TxsdSystemImpact, bool) error
	XsdGoPkgHasElems_SystemImpact                                                                                                func(*XsdGoPkgHasElems_SystemImpact, bool) error
	XsdGoPkgHasElems_Hash                                                                                                        func(*XsdGoPkgHasElems_Hash, bool) error
	XsdGoPkgHasElem_EmailFrom                                                                                                    func(*XsdGoPkgHasElem_EmailFrom, bool) error
	XsdGoPkgHasElem_Location                                                                                                     func(*XsdGoPkgHasElem_Location, bool) error
	XsdGoPkgHasElems_Server                                                                                                      func(*XsdGoPkgHasElems_Server, bool) error
	XsdGoPkgHasElems_Discovery                                                                                                   func(*XsdGoPkgHasElems_Discovery, bool) error
	XsdGoPkgHasElem_AssociatedSoftware                                                                                           func(*XsdGoPkgHasElem_AssociatedSoftware, bool) error
	TxsdIndicatorReference                                                                                                       func(*TxsdIndicatorReference, bool) error
	XsdGoPkgHasElem_BulkObservable                                                                                               func(*XsdGoPkgHasElem_BulkObservable, bool) error
	XsdGoPkgHasElem_Method                                                                                                       func(*XsdGoPkgHasElem_Method, bool) error
	XsdGoPkgHasElems_HashTargetID                                                                                                func(*XsdGoPkgHasElems_HashTargetID, bool) error
	XsdGoPkgHasElems_IndicatorExpression                                                                                         func(*XsdGoPkgHasElems_IndicatorExpression, bool) error
	TBusinessImpactType                                                                                                          func(*TBusinessImpactType, bool) error
	XsdGoPkgHasElem_EmailData                                                                                                    func(*XsdGoPkgHasElem_EmailData, bool) error
	XsdGoPkgHasElems_DateTime                                                                                                    func(*XsdGoPkgHasElems_DateTime, bool) error
	XsdGoPkgHasElems_EmailMessage                                                                                                func(*XsdGoPkgHasElems_EmailMessage, bool) error
	XsdGoPkgHasElem_RelatedDNS                                                                                                   func(*XsdGoPkgHasElem_RelatedDNS, bool) error
	XsdGoPkgHasElems_Port                                                                                                        func(*XsdGoPkgHasElems_Port, bool) error
	XsdGoPkgHasElem_RecoveryTime                                                                                                 func(*XsdGoPkgHasElem_RecoveryTime, bool) error
	XsdGoPkgHasElems_RecordData                                                                                                  func(*XsdGoPkgHasElems_RecordData, bool) error
	XsdGoPkgHasElems_SignatureData                                                                                               func(*XsdGoPkgHasElems_SignatureData, bool) error
	XsdGoPkgHasElems_EventData                                                                                                   func(*XsdGoPkgHasElems_EventData, bool) error
	XsdGoPkgHasElem_Expectation                                                                                                  func(*XsdGoPkgHasElem_Expectation, bool) error
	XsdGoPkgHasElem_IodefDocument                                                                                                func(*XsdGoPkgHasElem_IodefDocument, bool) error
	XsdGoPkgHasElem_CampaignID                                                                                                   func(*XsdGoPkgHasElem_CampaignID, bool) error
	XsdGoPkgHasElems_EmailHeaders                                                                                                func(*XsdGoPkgHasElems_EmailHeaders, bool) error
	XsdGoPkgHasElems_Record                                                                                                      func(*XsdGoPkgHasElems_Record, bool) error
	TxsdReference                                                                                                                func(*TxsdReference, bool) error
	XsdGoPkgHasElem_EndTime                                                                                                      func(*XsdGoPkgHasElem_EndTime, bool) error
	XsdGoPkgHasElems_Confidence                                                                                                  func(*XsdGoPkgHasElems_Confidence, bool) error
	XsdGoPkgHasElem_System                                                                                                       func(*XsdGoPkgHasElem_System, bool) error
	XsdGoPkgHasElems_SameDomainContact                                                                                           func(*XsdGoPkgHasElems_SameDomainContact, bool) error
	XsdGoPkgHasElems_Observable                                                                                                  func(*XsdGoPkgHasElems_Observable, bool) error
	XsdGoPkgHasElems_BulkObservableList                                                                                          func(*XsdGoPkgHasElems_BulkObservableList, bool) error
	XsdGoPkgHasElems_AdditionalData                                                                                              func(*XsdGoPkgHasElems_AdditionalData, bool) error
	TxsdTimeImpact                                                                                                               func(*TxsdTimeImpact, bool) error
	TxsdHashData                                                                                                                 func(*TxsdHashData, bool) error
	XsdGoPkgHasElem_Server                                                                                                       func(*XsdGoPkgHasElem_Server, bool) error
	TxsdObservableReference                                                                                                      func(*TxsdObservableReference, bool) error
	XsdGoPkgHasElems_IodefDocument                                                                                               func(*XsdGoPkgHasElems_IodefDocument, bool) error
	TExtensionType                                                                                                               func(*TExtensionType, bool) error
	XsdGoPkgHasElems_HistoryItem                                                                                                 func(*XsdGoPkgHasElems_HistoryItem, bool) error
	TxsdRecordPattern                                                                                                            func(*TxsdRecordPattern, bool) error
	TxsdAddress                                                                                                                  func(*TxsdAddress, bool) error
	XsdGoPkgHasElem_ApplicationHeader                                                                                            func(*XsdGoPkgHasElem_ApplicationHeader, bool) error
	TxsdIodefDocument                                                                                                            func(*TxsdIodefDocument, bool) error
	XsdGoPkgHasElems_ApplicationHeader                                                                                           func(*XsdGoPkgHasElems_ApplicationHeader, bool) error
	XsdGoPkgHasElems_Url                                                                                                         func(*XsdGoPkgHasElems_Url, bool) error
	XsdGoPkgHasElems_CertificateData                                                                                             func(*XsdGoPkgHasElems_CertificateData, bool) error
	XsdGoPkgHasElem_Name                                                                                                         func(*XsdGoPkgHasElem_Name, bool) error
	XsdGoPkgHasElem_AssetIDsequenceSystemschema_AssetID_XsdtString_                                                              func(*XsdGoPkgHasElem_AssetIDsequenceSystemschema_AssetID_XsdtString_, bool) error
	XsdGoPkgHasElem_Timezone                                                                                                     func(*XsdGoPkgHasElem_Timezone, bool) error
	XsdGoPkgHasElem_Hash                                                                                                         func(*XsdGoPkgHasElem_Hash, bool) error
	TxsdIndicatorData                                                                                                            func(*TxsdIndicatorData, bool) error
	XsdGoPkgHasElem_FileSize                                                                                                     func(*XsdGoPkgHasElem_FileSize, bool) error
	XsdGoPkgHasElem_DefinedCOA                                                                                                   func(*XsdGoPkgHasElem_DefinedCOA, bool) error
	XsdGoPkgHasElems_ProtoType                                                                                                   func(*XsdGoPkgHasElems_ProtoType, bool) error
	XsdGoPkgHasElems_ThreatActorID                                                                                               func(*XsdGoPkgHasElems_ThreatActorID, bool) error
	TxsdFuzzyHash                                                                                                                func(*TxsdFuzzyHash, bool) error
	XsdGoPkgHasElem_Observable                                                                                                   func(*XsdGoPkgHasElem_Observable, bool) error
	XsdGoPkgHasElems_AlternativeIndicatorID                                                                                      func(*XsdGoPkgHasElems_AlternativeIndicatorID, bool) error
	XsdGoPkgHasElem_SystemImpact                                                                                                 func(*XsdGoPkgHasElem_SystemImpact, bool) error
	XsdGoPkgHasElems_FileName                                                                                                    func(*XsdGoPkgHasElems_FileName, bool) error
	TxsdPostalAddress                                                                                                            func(*TxsdPostalAddress, bool) error
	XsdGoPkgHasElem_ContactName                                                                                                  func(*XsdGoPkgHasElem_ContactName, bool) error
	XsdGoPkgHasElem_AttackPhaseID                                                                                                func(*XsdGoPkgHasElem_AttackPhaseID, bool) error
	TxsdConfidence                                                                                                               func(*TxsdConfidence, bool) error
	TMLStringType                                                                                                                func(*TMLStringType, bool) error
	XsdGoPkgHasElem_DateDomainWasChecked                                                                                         func(*XsdGoPkgHasElem_DateDomainWasChecked, bool) error
	TxsdObservable                                                                                                               func(*TxsdObservable, bool) error
	XsdGoPkgHasElem_RelatedActivity                                                                                              func(*XsdGoPkgHasElem_RelatedActivity, bool) error
	XsdGoPkgHasElems_KeyName                                                                                                     func(*XsdGoPkgHasElems_KeyName, bool) error
	XsdGoPkgHasElem_Application                                                                                                  func(*XsdGoPkgHasElem_Application, bool) error
	TxsdNodeRole                                                                                                                 func(*TxsdNodeRole, bool) error
	TxsdServiceName                                                                                                              func(*TxsdServiceName, bool) error
	XsdGoPkgHasElem_FileData                                                                                                     func(*XsdGoPkgHasElem_FileData, bool) error
	XsdGoPkgHasElems_Name                                                                                                        func(*XsdGoPkgHasElems_Name, bool) error
	TxsdTelephone                                                                                                                func(*TxsdTelephone, bool) error
	XsdGoPkgHasElem_ReportTime                                                                                                   func(*XsdGoPkgHasElem_ReportTime, bool) error
	XsdGoPkgHasElem_HashTargetID                                                                                                 func(*XsdGoPkgHasElem_HashTargetID, bool) error
	XsdGoPkgHasElems_Flow                                                                                                        func(*XsdGoPkgHasElems_Flow, bool) error
	XsdGoPkgHasElem_CertificateData                                                                                              func(*XsdGoPkgHasElem_CertificateData, bool) error
	XsdGoPkgHasElem_AdditionalData                                                                                               func(*XsdGoPkgHasElem_AdditionalData, bool) error
	TxsdRegistryHandle                                                                                                           func(*TxsdRegistryHandle, bool) error
	XsdGoPkgHasElems_Indicator                                                                                                   func(*XsdGoPkgHasElems_Indicator, bool) error
	XsdGoPkgHasElem_EmailHeaderField                                                                                             func(*XsdGoPkgHasElem_EmailHeaderField, bool) error
	XsdGoPkgHasElem_ThreatActorID                                                                                                func(*XsdGoPkgHasElem_ThreatActorID, bool) error
}
