//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.iana.org/assignments/xml-registry/schema/iodef-sci-1.0.xsd
package go_IodefSci10

import (
	"encoding/json"
	"encoding/xml"
	"encoding/base64"
	iodef "github.com/metaleap/go-xsd-pkg/www.iana.org/assignments/xml-registry/schema/iodef-1.0.xsd_go"
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdGoPkgHasAttr_ExtSpecID_XsdtString_ struct {
	ExtSpecID xsdt.String `json:"ext-SpecID,omitempty" xml:" ext-SpecID,attr,omitempty"`
}

type XsdGoPkgHasAttr_ContentID_XsdtString_ struct {
	ContentID xsdt.String `json:"ContentID,omitempty" xml:" ContentID,attr,omitempty"`
}

type XsdGoPkgHasAttr_Dtype_IodefTdtypeType_Xml struct {
	Dtype iodef.TdtypeType `json:"dtype,omitempty" xml:" dtype,attr"`
}

//	Returns the fixed value for Dtype -- "xml"
func (me XsdGoPkgHasAttr_Dtype_IodefTdtypeType_Xml) DtypeFixed() iodef.TdtypeType {
	return iodef.TdtypeType("xml")
}

type XsdGoPkgHasAttr_ExtDtype_XsdtString_ struct {
	ExtDtype *xsdt.String `json:"ext-dtype,omitempty" xml:" ext-dtype,attr,omitempty"`
}

type XsdGoPkgHasAttr_Meaning_XsdtString_ struct {
	Meaning xsdt.String `json:"meaning,omitempty" xml:" meaning,attr"`
}

type XsdGoPkgHasAttr_Formatid_XsdtString_ struct {
	Formatid xsdt.String `json:"formatid,omitempty" xml:" formatid,attr"`
}

type XsdGoPkgHasAttr_Restriction_IodefTrestrictionType_ struct {
	Restriction iodef.TrestrictionType `json:"restriction,omitempty" xml:" restriction,attr"`
}

type Txmldata struct {
	iodef.TExtensionType

	XsdGoPkgHasAttr_Dtype_IodefTdtypeType_Xml

	XsdGoPkgHasAttr_ExtDtype_XsdtString_

	XsdGoPkgHasAttr_Meaning_XsdtString_

	XsdGoPkgHasAttr_Formatid_XsdtString_

	XsdGoPkgHasAttr_Restriction_IodefTrestrictionType_
}

//	If the WalkHandlers.Txmldata function is not nil (ie. was set by outside code), calls it with this Txmldata instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this Txmldata instance.
func (me *Txmldata) Walk() (err error) {
	if fn := WalkHandlers.Txmldata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_ struct {
	RawDatas []*TRawDataExtensionType `json:"RawData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 RawData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_ instance.
func (me *XsdGoPkgHasElems_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RawDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_SpecID_XsdtString_ struct {
	SpecID xsdt.String `json:"SpecID,omitempty" xml:" SpecID,attr,omitempty"`
}

type TBasicStructure struct {
	XsdGoPkgHasAttr_SpecID_XsdtString_

	XsdGoPkgHasAttr_ExtSpecID_XsdtString_

	XsdGoPkgHasAttr_ContentID_XsdtString_

	RawDatasJson []*xsdt.Base64Binary `json:"RawData,omitempty" xml:"-"`

	XsdGoPkgHasElems_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_ `json:"-"`

	iodef.XsdGoPkgHasElems_Reference
}

// Custom iodef.TExtensionType with XMLName
type TRawDataExtensionType struct {
	XMLName xml.Name `json:"-" xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 RawData,omitempty"`

	iodef.TExtensionType
}

//	If the WalkHandlers.TBasicStructure function is not nil (ie. was set by outside code), calls it with this TBasicStructure instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TBasicStructure instance.
func (me *TBasicStructure) Walk() (err error) {
	if fn := WalkHandlers.TBasicStructure; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Scoring struct {
	Scoring *TBasicStructure `json:"Scoring,omitempty" xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 Scoring"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Scoring function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Scoring instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Scoring instance.
func (me *XsdGoPkgHasElem_Scoring) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Scoring; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Scoring.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Scoring struct {
	Scorings []*TBasicStructure `json:"Scoring,omitempty" xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 Scoring,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Scoring function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Scoring instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Scoring instance.
func (me *XsdGoPkgHasElems_Scoring) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Scoring; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Scorings {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Platform struct {
	Platforms []*TBasicStructure `json:"Platform,omitempty" xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 Platform,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Platform function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Platform instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Platform instance.
func (me *XsdGoPkgHasElems_Platform) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Platform; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Platforms {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Platform struct {
	Platform *TBasicStructure `xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 Platform"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Platform function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Platform instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Platform instance.
func (me *XsdGoPkgHasElem_Platform) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Platform; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Platform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EventReport struct {
	EventReport *TBasicStructure `xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 EventReport"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EventReport function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EventReport instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EventReport instance.
func (me *XsdGoPkgHasElem_EventReport) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EventReport; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EventReport.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EventReport struct {
	EventReports []*TBasicStructure `xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 EventReport"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EventReport function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EventReport instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EventReport instance.
func (me *XsdGoPkgHasElems_EventReport) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EventReport; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EventReports {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Verification struct {
	Verification *TBasicStructure `xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 Verification"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Verification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Verification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Verification instance.
func (me *XsdGoPkgHasElem_Verification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Verification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Verification.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Verification struct {
	Verifications []*TBasicStructure `xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 Verification"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Verification function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Verification instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Verification instance.
func (me *XsdGoPkgHasElems_Verification) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Verification; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Verifications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Remediation struct {
	Remediation *TBasicStructure `xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 Remediation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Remediation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Remediation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Remediation instance.
func (me *XsdGoPkgHasElem_Remediation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Remediation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Remediation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Remediation struct {
	Remediations []*TBasicStructure `xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 Remediation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Remediation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Remediation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Remediation instance.
func (me *XsdGoPkgHasElems_Remediation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Remediation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Remediations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAttackPattern struct {
	TBasicStructure

	XsdGoPkgHasElems_Platform
}

// Custom marshal JSON for TxsdAttackPattern
func (u *TxsdAttackPattern) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdAttackPattern

	// Encode outer XML of RawData to base64
	if u.RawDatas != nil {
		u.RawDatasJson = make([]*xsdt.Base64Binary,len(u.RawDatas))
		for i:=0; i < len(u.RawDatas); i++{
			b , err := xml.MarshalIndent(u.RawDatas[i],"","    ")
			if err != nil {
				return nil, err
			}
			encoded := (xsdt.Base64Binary)(base64.StdEncoding.EncodeToString(b))
			u.RawDatasJson[i] = &encoded
		}
	}

	if u.Platforms != nil {
		for _, platform := range u.Platforms {
			if platform.RawDatas != nil {
				platform.RawDatasJson = make([]*xsdt.Base64Binary,len(platform.RawDatas))
				for i:=0; i < len(platform.RawDatas); i++{
					b , err := xml.MarshalIndent(platform.RawDatas[i],"","    ")
					if err != nil {
						return nil, err
					}
					encoded := (xsdt.Base64Binary)(base64.StdEncoding.EncodeToString(b))
					platform.RawDatasJson[i] = &encoded
				}
			}
		}
	}

	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdAttackPattern
func (u *TxsdAttackPattern) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdAttackPattern

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Decode base64 value and unmarshal to XML
	if u.RawDatasJson != nil {
		u.RawDatas = make([]*TRawDataExtensionType,len(u.RawDatasJson))
		for i:=0; i < len(u.RawDatasJson); i++{
			if u.RawDatasJson[i] != nil{
				byteValue, err := base64.StdEncoding.DecodeString(string(*u.RawDatasJson[i]))
				if err != nil {
					return err
				}
				u.RawDatas[i] = &TRawDataExtensionType{}
				err = xml.Unmarshal(byteValue, u.RawDatas[i])
			}
		}
	}

	if u.Platforms != nil {
		for _, platform := range u.Platforms {
			if platform.RawDatasJson != nil {
				platform.RawDatas = make([]*TRawDataExtensionType,len(platform.RawDatasJson))
				for i:=0; i < len(platform.RawDatasJson); i++{
					if platform.RawDatasJson[i] != nil{
						byteValue, err := base64.StdEncoding.DecodeString(string(*platform.RawDatasJson[i]))
						if err != nil {
							return err
						}
						platform.RawDatas[i] = &TRawDataExtensionType{}
						err = xml.Unmarshal(byteValue, platform.RawDatas[i])
					}
				}
			}
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdAttackPattern function is not nil (ie. was set by outside code), calls it with this TxsdAttackPattern instance as the single argument. Then calls the Walk() method on 2/2 embed(s) and 0/0 field(s) belonging to this TxsdAttackPattern instance.
func (me *TxsdAttackPattern) Walk() (err error) {
	if fn := WalkHandlers.TxsdAttackPattern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TBasicStructure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Platform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AttackPattern struct {
	AttackPattern *TxsdAttackPattern `json:",omitempty" xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 AttackPattern,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AttackPattern function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AttackPattern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AttackPattern instance.
func (me *XsdGoPkgHasElem_AttackPattern) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AttackPattern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AttackPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AttackPattern struct {
	AttackPatterns []*TxsdAttackPattern `json:"AttackPattern,omitempty" xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 AttackPattern,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AttackPattern function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AttackPattern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AttackPattern instance.
func (me *XsdGoPkgHasElems_AttackPattern) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AttackPattern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AttackPatterns {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdVulnerability struct {
	TBasicStructure

	XsdGoPkgHasElems_Platform

	XsdGoPkgHasElems_Scoring
}

// Custom marshal JSON for TxsdVulnerability
func (u *TxsdVulnerability) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdVulnerability

	// Encode outer XML of RawData to base64
	if u.RawDatas != nil {
		u.RawDatasJson = make([]*xsdt.Base64Binary,len(u.RawDatas))
		for i:=0; i < len(u.RawDatas); i++{
			b , err := xml.MarshalIndent(u.RawDatas[i],"","    ")
			if err != nil {
				return nil, err
			}
			encoded := (xsdt.Base64Binary)(base64.StdEncoding.EncodeToString(b))
			u.RawDatasJson[i] = &encoded
		}
	}

	if u.Platforms != nil {
		for _, platform := range u.Platforms {
			if platform.RawDatas != nil {
				platform.RawDatasJson = make([]*xsdt.Base64Binary,len(platform.RawDatas))
				for i:=0; i < len(platform.RawDatas); i++{
					b , err := xml.MarshalIndent(platform.RawDatas[i],"","    ")
					if err != nil {
						return nil, err
					}
					encoded := (xsdt.Base64Binary)(base64.StdEncoding.EncodeToString(b))
					platform.RawDatasJson[i] = &encoded
				}
			}
		}
	}

	if u.Scorings != nil {
		for _, scroing := range u.Scorings {
			if scroing.RawDatas != nil {
				scroing.RawDatasJson = make([]*xsdt.Base64Binary,len(scroing.RawDatas))
				for i:=0; i < len(scroing.RawDatas); i++{
					b , err := xml.MarshalIndent(scroing.RawDatas[i],"","    ")
					if err != nil {
						return nil, err
					}
					encoded := (xsdt.Base64Binary)(base64.StdEncoding.EncodeToString(b))
					scroing.RawDatasJson[i] = &encoded
				}
			}
		}
	}

	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdVulnerability
func (u *TxsdVulnerability) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdVulnerability

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Decode base64 value and unmarshal to XML
	if u.RawDatasJson != nil {
		u.RawDatas = make([]*TRawDataExtensionType,len(u.RawDatasJson))
		for i:=0; i < len(u.RawDatasJson); i++{
			if u.RawDatasJson[i] != nil{
				byteValue, err := base64.StdEncoding.DecodeString(string(*u.RawDatasJson[i]))
				if err != nil {
					return err
				}
				u.RawDatas[i] = &TRawDataExtensionType{}
				err = xml.Unmarshal(byteValue, u.RawDatas[i])
			}
		}
	}

	if u.Platforms != nil {
		for _, platform := range u.Platforms {
			if platform.RawDatasJson != nil {
				platform.RawDatas = make([]*TRawDataExtensionType,len(platform.RawDatasJson))
				for i:=0; i < len(platform.RawDatasJson); i++{
					if platform.RawDatasJson[i] != nil{
						byteValue, err := base64.StdEncoding.DecodeString(string(*platform.RawDatasJson[i]))
						if err != nil {
							return err
						}
						platform.RawDatas[i] = &TRawDataExtensionType{}
						err = xml.Unmarshal(byteValue, platform.RawDatas[i])
					}
				}
			}
		}
	}

	if u.Scorings != nil {
		for _, scroing := range u.Scorings {
			if scroing.RawDatasJson != nil {
				scroing.RawDatas = make([]*TRawDataExtensionType,len(scroing.RawDatasJson))
				for i:=0; i < len(scroing.RawDatasJson); i++{
					if scroing.RawDatasJson[i] != nil{
						byteValue, err := base64.StdEncoding.DecodeString(string(*scroing.RawDatasJson[i]))
						if err != nil {
							return err
						}
						scroing.RawDatas[i] = &TRawDataExtensionType{}
						err = xml.Unmarshal(byteValue, scroing.RawDatas[i])
					}
				}
			}
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdVulnerability function is not nil (ie. was set by outside code), calls it with this TxsdVulnerability instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdVulnerability instance.
func (me *TxsdVulnerability) Walk() (err error) {
	if fn := WalkHandlers.TxsdVulnerability; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TBasicStructure.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Platform.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Scoring.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Vulnerability struct {
	Vulnerability *TxsdVulnerability `json:" Vulnerability,omitempty" xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 Vulnerability,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Vulnerability function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Vulnerability instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Vulnerability instance.
func (me *XsdGoPkgHasElem_Vulnerability) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Vulnerability; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Vulnerability.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Vulnerability struct {
	Vulnerabilities []*TxsdVulnerability `json:"Vulnerability,omitempty" xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 Vulnerability,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Vulnerability function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Vulnerability instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Vulnerability instance.
func (me *XsdGoPkgHasElems_Vulnerability) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Vulnerability; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Vulnerabilities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Weakness struct {
	Weakness *TxsdVulnerability `json:" Weakness,omitempty" xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 Weakness,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Weakness function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Weakness instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Weakness instance.
func (me *XsdGoPkgHasElem_Weakness) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Weakness; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Weakness.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Weakness struct {
	Weaknesses []*TxsdVulnerability `json:"Weakness,omitempty" xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 Weakness,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Weakness function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Weakness instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Weakness instance.
func (me *XsdGoPkgHasElems_Weakness) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Weakness; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Weaknesses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_ struct {
	RawData *TRawDataExtensionType `json:"RawData,omitempty" xml:"urn:ietf:params:xml:ns:iodef-sci-1.0 RawData,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_ instance.
func (me *XsdGoPkgHasElem_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RawData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 23 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 23 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_Platform                                                     func(*XsdGoPkgHasElem_Platform, bool) error
	XsdGoPkgHasElems_Remediation                                                 func(*XsdGoPkgHasElems_Remediation, bool) error
	XsdGoPkgHasElem_AttackPattern                                                func(*XsdGoPkgHasElem_AttackPattern, bool) error
	XsdGoPkgHasElems_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_ func(*XsdGoPkgHasElems_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_, bool) error
	XsdGoPkgHasElem_Scoring                                                      func(*XsdGoPkgHasElem_Scoring, bool) error
	XsdGoPkgHasElems_Platform                                                    func(*XsdGoPkgHasElems_Platform, bool) error
	XsdGoPkgHasElems_EventReport                                                 func(*XsdGoPkgHasElems_EventReport, bool) error
	TxsdAttackPattern                                                            func(*TxsdAttackPattern, bool) error
	TxsdVulnerability                                                            func(*TxsdVulnerability, bool) error
	XsdGoPkgHasElem_Weakness                                                     func(*XsdGoPkgHasElem_Weakness, bool) error
	XsdGoPkgHasElem_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_  func(*XsdGoPkgHasElem_RawDatachoicesequenceBasicStructureschema_RawData_Txmldata_, bool) error
	Txmldata                                                                     func(*Txmldata, bool) error
	TBasicStructure                                                              func(*TBasicStructure, bool) error
	XsdGoPkgHasElems_Scoring                                                     func(*XsdGoPkgHasElems_Scoring, bool) error
	XsdGoPkgHasCdata                                                             func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElems_AttackPattern                                               func(*XsdGoPkgHasElems_AttackPattern, bool) error
	XsdGoPkgHasElem_Vulnerability                                                func(*XsdGoPkgHasElem_Vulnerability, bool) error
	XsdGoPkgHasElems_Vulnerability                                               func(*XsdGoPkgHasElems_Vulnerability, bool) error
	XsdGoPkgHasElem_Remediation                                                  func(*XsdGoPkgHasElem_Remediation, bool) error
	XsdGoPkgHasElems_Weakness                                                    func(*XsdGoPkgHasElems_Weakness, bool) error
	XsdGoPkgHasElem_EventReport                                                  func(*XsdGoPkgHasElem_EventReport, bool) error
	XsdGoPkgHasElem_Verification                                                 func(*XsdGoPkgHasElem_Verification, bool) error
	XsdGoPkgHasElems_Verification                                                func(*XsdGoPkgHasElems_Verification, bool) error
}
