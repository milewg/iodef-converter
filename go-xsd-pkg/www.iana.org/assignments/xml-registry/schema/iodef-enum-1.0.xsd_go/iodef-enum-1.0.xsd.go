//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.iana.org/assignments/xml-registry/schema/iodef-enum-1.0.xsd
package go_IodefEnum10

import (
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdGoPkgHasElem_IDsequenceTxsdReferenceNameReferenceNameschema_Id_XsdtNCName_ struct {
	Id xsdt.NCName `json:"ID,omitempty" xml:"urn:ietf:params:xml:ns:iodef-enum-1.0 ID,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IDsequenceTxsdReferenceNameReferenceNameschema_Id_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IDsequenceTxsdReferenceNameReferenceNameschema_Id_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_IDsequenceTxsdReferenceNameReferenceNameschema_Id_XsdtNCName_ instance.
func (me *XsdGoPkgHasElem_IDsequenceTxsdReferenceNameReferenceNameschema_Id_XsdtNCName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IDsequenceTxsdReferenceNameReferenceNameschema_Id_XsdtNCName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_SpecIndex_XsdtInteger_ struct {
	SpecIndex xsdt.Integer `json:"specIndex,omitempty" xml:" specIndex,attr"`
}

type TxsdReferenceName struct {
	XsdGoPkgHasElem_IDsequenceTxsdReferenceNameReferenceNameschema_Id_XsdtNCName_

	XsdGoPkgHasAttr_SpecIndex_XsdtInteger_
}

//	If the WalkHandlers.TxsdReferenceName function is not nil (ie. was set by outside code), calls it with this TxsdReferenceName instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdReferenceName instance.
func (me *TxsdReferenceName) Walk() (err error) {
	if fn := WalkHandlers.TxsdReferenceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_IDsequenceTxsdReferenceNameReferenceNameschema_Id_XsdtNCName_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReferenceName struct {
	ReferenceName *TxsdReferenceName `json:"ReferenceName,omitempty" xml:"urn:ietf:params:xml:ns:iodef-enum-1.0 ReferenceName,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReferenceName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReferenceName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ReferenceName instance.
func (me *XsdGoPkgHasElem_ReferenceName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReferenceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ReferenceName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReferenceName struct {
	ReferenceNames []*TxsdReferenceName `json:"ReferenceName,omitempty" xml:"urn:ietf:params:xml:ns:iodef-enum-1.0 ReferenceName,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReferenceName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReferenceName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReferenceName instance.
func (me *XsdGoPkgHasElems_ReferenceName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReferenceName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ReferenceNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IDsequenceReferenceNameschema_Id_XsdtNCName_ struct {
	Ids []xsdt.NCName `xml:"urn:ietf:params:xml:ns:iodef-enum-1.0 ID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IDsequenceReferenceNameschema_Id_XsdtNCName_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IDsequenceReferenceNameschema_Id_XsdtNCName_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IDsequenceReferenceNameschema_Id_XsdtNCName_ instance.
func (me *XsdGoPkgHasElems_IDsequenceReferenceNameschema_Id_XsdtNCName_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IDsequenceReferenceNameschema_Id_XsdtNCName_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 6 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 6 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_ReferenceName                                                 func(*XsdGoPkgHasElem_ReferenceName, bool) error
	XsdGoPkgHasElems_ReferenceName                                                func(*XsdGoPkgHasElems_ReferenceName, bool) error
	XsdGoPkgHasCdata                                                              func(*XsdGoPkgHasCdata, bool) error
	XsdGoPkgHasElems_IDsequenceReferenceNameschema_Id_XsdtNCName_                 func(*XsdGoPkgHasElems_IDsequenceReferenceNameschema_Id_XsdtNCName_, bool) error
	XsdGoPkgHasElem_IDsequenceTxsdReferenceNameReferenceNameschema_Id_XsdtNCName_ func(*XsdGoPkgHasElem_IDsequenceTxsdReferenceNameReferenceNameschema_Id_XsdtNCName_, bool) error
	TxsdReferenceName                                                             func(*TxsdReferenceName, bool) error
}
