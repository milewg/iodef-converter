//	Auto-generated by the "go-xsd" package located at:
//		github.com/metaleap/go-xsd
//	Comments on types and fields (if any) are from the XSD file located at:
//		www.iana.org/assignments/xml-registry/schema/iodef-1.0.xsd
package go_Iodef10

//	Incident Object Description Exchange Format v1.00, see RFC 5070

import (
	"encoding/json"
	"reflect"
	"fmt"
	enum "github.com/metaleap/go-xsd-pkg/www.iana.org/assignments/xml-registry/schema/iodef-enum-1.0.xsd_go"
	xsdt "github.com/metaleap/go-xsd/types"
)

type XsdGoPkgHasInnerXml struct {
	XsdGoPkgCDATA string `json:"value,omitempty" xml:",innerxml"`
}

type XsdGoPkgHasCdata struct {
	XsdGoPkgCDATA string `json:"value,omitempty" xml:",chardata"`
}

//	If the WalkHandlers.XsdGoPkgHasCdata function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasCdata instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasCdata instance.
func (me *XsdGoPkgHasCdata) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasCdata; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Lang_XsdtLanguage_ struct {
	Lang *xsdt.Language `json:"lang,omitempty" xml:" lang,attr,omitempty"`
}

type TMLStringType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Lang_XsdtLanguage_

	// Custom translation-id for simulating TMLStringType of RFC7970
	TranslationId *xsdt.String `json:"translation-id,omitempty" xml:"-"`
}

//	If the WalkHandlers.TMLStringType function is not nil (ie. was set by outside code), calls it with this TMLStringType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TMLStringType instance.
func (me *TMLStringType) Walk() (err error) {
	if fn := WalkHandlers.TMLStringType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ContactName struct {
	ContactName *TMLStringType `xml:"urn:ietf:params:xml:ns:iodef-1.0 ContactName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ContactName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ContactName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ContactName instance.
func (me *XsdGoPkgHasElem_ContactName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ContactName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ContactName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Meaning_XsdtString_ struct {
	Meaning *xsdt.String `json:"meaning,omitempty" xml:" meaning,attr,omitempty"`
}

type TContactMeansType struct {
	XsdGoPkgHasAttr_Meaning_XsdtString_

	XsdGoPkgHasCdata
}

//	If the WalkHandlers.TContactMeansType function is not nil (ie. was set by outside code), calls it with this TContactMeansType instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TContactMeansType instance.
func (me *TContactMeansType) Walk() (err error) {
	if fn := WalkHandlers.TContactMeansType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Telephone struct {
	Telephones []*TContactMeansType `xml:"urn:ietf:params:xml:ns:iodef-1.0 Telephone"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Telephone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Telephone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Telephone instance.
func (me *XsdGoPkgHasElems_Telephone) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Telephone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Telephones {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ExtRole_XsdtString_ struct {
	ExtRole xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 ext-role,attr"`
}

type TxsdPostalAddress struct {
	TMLStringType

	XsdGoPkgHasAttr_Meaning_XsdtString_
}

//	If the WalkHandlers.TxsdPostalAddress function is not nil (ie. was set by outside code), calls it with this TxsdPostalAddress instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdPostalAddress instance.
func (me *TxsdPostalAddress) Walk() (err error) {
	if fn := WalkHandlers.TxsdPostalAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TMLStringType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_PostalAddress struct {
	PostalAddress *TxsdPostalAddress `xml:"urn:ietf:params:xml:ns:iodef-1.0 PostalAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PostalAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PostalAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_PostalAddress instance.
func (me *XsdGoPkgHasElem_PostalAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PostalAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.PostalAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Email struct {
	Emails []*TContactMeansType `xml:"urn:ietf:params:xml:ns:iodef-1.0 Email"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Email function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Email instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Email instance.
func (me *XsdGoPkgHasElems_Email) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Email; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Emails {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Fax struct {
	Fax *TContactMeansType `xml:"urn:ietf:params:xml:ns:iodef-1.0 Fax"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Fax function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Fax instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Fax instance.
func (me *XsdGoPkgHasElem_Fax) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Fax; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Fax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdContactType xsdt.Nmtoken

//	This convenience method just performs a simple type conversion to TxsdContactType's alias type xsdt.Nmtoken.
func (me TxsdContactType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdContactType is "person".
func (me TxsdContactType) IsPerson() bool { return me.String() == "person" }

//	Returns true if the value of this enumerated TxsdContactType is "organization".
func (me TxsdContactType) IsOrganization() bool { return me.String() == "organization" }

//	Returns true if the value of this enumerated TxsdContactType is "ext-value".
func (me TxsdContactType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TxsdContactType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdContactType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdContactType is just a simple String type, this merely returns the current string value.
func (me TxsdContactType) String() string { return xsdt.Nmtoken(me).String() }

type XsdGoPkgHasAttr_Type_TxsdContactType_ struct {
	Type TxsdContactType `xml:"urn:ietf:params:xml:ns:iodef-1.0 type,attr"`
}

type TrestrictionType xsdt.Nmtoken

//	Returns true if the value of this enumerated TrestrictionType is "need-to-know".
func (me TrestrictionType) IsNeedToKnow() bool { return me.String() == "need-to-know" }

//	Returns true if the value of this enumerated TrestrictionType is "private".
func (me TrestrictionType) IsPrivate() bool { return me.String() == "private" }

//	Since TrestrictionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TrestrictionType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TrestrictionType is just a simple String type, this merely returns the current string value.
func (me TrestrictionType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TrestrictionType's alias type xsdt.Nmtoken.
func (me TrestrictionType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TrestrictionType is "default".
func (me TrestrictionType) IsDefault() bool { return me.String() == "default" }

//	Returns true if the value of this enumerated TrestrictionType is "public".
func (me TrestrictionType) IsPublic() bool { return me.String() == "public" }

type XsdGoPkgHasAttr_Restriction_TrestrictionType_ struct {
	Restriction *TrestrictionType `json:"restriction,omitempty" xml:" restriction,attr,omitempty"`
}

type XsdGoPkgHasAttr_ExtRegistry_XsdtString_ struct {
	ExtRegistry xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 ext-registry,attr"`
}

type TxsdRegistryHandleSimpleContentExtensionRegistry xsdt.Nmtoken

//	This convenience method just performs a simple type conversion to TxsdRegistryHandleSimpleContentExtensionRegistry's alias type xsdt.Nmtoken.
func (me TxsdRegistryHandleSimpleContentExtensionRegistry) ToXsdtNmtoken() xsdt.Nmtoken {
	return xsdt.Nmtoken(me)
}

//	Returns true if the value of this enumerated TxsdRegistryHandleSimpleContentExtensionRegistry is "internic".
func (me TxsdRegistryHandleSimpleContentExtensionRegistry) IsInternic() bool {
	return me.String() == "internic"
}

//	Returns true if the value of this enumerated TxsdRegistryHandleSimpleContentExtensionRegistry is "apnic".
func (me TxsdRegistryHandleSimpleContentExtensionRegistry) IsApnic() bool {
	return me.String() == "apnic"
}

//	Returns true if the value of this enumerated TxsdRegistryHandleSimpleContentExtensionRegistry is "lacnic".
func (me TxsdRegistryHandleSimpleContentExtensionRegistry) IsLacnic() bool {
	return me.String() == "lacnic"
}

//	Returns true if the value of this enumerated TxsdRegistryHandleSimpleContentExtensionRegistry is "ext-value".
func (me TxsdRegistryHandleSimpleContentExtensionRegistry) IsExtValue() bool {
	return me.String() == "ext-value"
}

//	Returns true if the value of this enumerated TxsdRegistryHandleSimpleContentExtensionRegistry is "local".
func (me TxsdRegistryHandleSimpleContentExtensionRegistry) IsLocal() bool {
	return me.String() == "local"
}

//	Since TxsdRegistryHandleSimpleContentExtensionRegistry is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdRegistryHandleSimpleContentExtensionRegistry) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdRegistryHandleSimpleContentExtensionRegistry is just a simple String type, this merely returns the current string value.
func (me TxsdRegistryHandleSimpleContentExtensionRegistry) String() string {
	return xsdt.Nmtoken(me).String()
}

//	Returns true if the value of this enumerated TxsdRegistryHandleSimpleContentExtensionRegistry is "arin".
func (me TxsdRegistryHandleSimpleContentExtensionRegistry) IsArin() bool {
	return me.String() == "arin"
}

//	Returns true if the value of this enumerated TxsdRegistryHandleSimpleContentExtensionRegistry is "ripe".
func (me TxsdRegistryHandleSimpleContentExtensionRegistry) IsRipe() bool {
	return me.String() == "ripe"
}

//	Returns true if the value of this enumerated TxsdRegistryHandleSimpleContentExtensionRegistry is "afrinic".
func (me TxsdRegistryHandleSimpleContentExtensionRegistry) IsAfrinic() bool {
	return me.String() == "afrinic"
}

type XsdGoPkgHasAttr_Registry_TxsdRegistryHandleSimpleContentExtensionRegistry_ struct {
	Registry TxsdRegistryHandleSimpleContentExtensionRegistry `xml:"urn:ietf:params:xml:ns:iodef-1.0 registry,attr"`
}

type TxsdRegistryHandle struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Registry_TxsdRegistryHandleSimpleContentExtensionRegistry_

	XsdGoPkgHasAttr_ExtRegistry_XsdtString_
}

//	If the WalkHandlers.TxsdRegistryHandle function is not nil (ie. was set by outside code), calls it with this TxsdRegistryHandle instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdRegistryHandle instance.
func (me *TxsdRegistryHandle) Walk() (err error) {
	if fn := WalkHandlers.TxsdRegistryHandle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RegistryHandle struct {
	RegistryHandles []*TxsdRegistryHandle `xml:"urn:ietf:params:xml:ns:iodef-1.0 RegistryHandle"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RegistryHandle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RegistryHandle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RegistryHandle instance.
func (me *XsdGoPkgHasElems_RegistryHandle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RegistryHandle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RegistryHandles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TdtypeType xsdt.Nmtoken

//	Returns true if the value of this enumerated TdtypeType is "url".
func (me TdtypeType) IsUrl() bool { return me.String() == "url" }

//	Returns true if the value of this enumerated TdtypeType is "xml".
func (me TdtypeType) IsXml() bool { return me.String() == "xml" }

//	Returns true if the value of this enumerated TdtypeType is "ext-value".
func (me TdtypeType) IsExtValue() bool { return me.String() == "ext-value" }

//	Returns true if the value of this enumerated TdtypeType is "integer".
func (me TdtypeType) IsInteger() bool { return me.String() == "integer" }

//	Returns true if the value of this enumerated TdtypeType is "string".
func (me TdtypeType) IsString() bool { return me.String() == "string" }

//	Returns true if the value of this enumerated TdtypeType is "path".
func (me TdtypeType) IsPath() bool { return me.String() == "path" }

//	Returns true if the value of this enumerated TdtypeType is "ipv6-packet".
func (me TdtypeType) IsIpv6Packet() bool { return me.String() == "ipv6-packet" }

//	Returns true if the value of this enumerated TdtypeType is "winreg".
func (me TdtypeType) IsWinreg() bool { return me.String() == "winreg" }

//	Since TdtypeType is just a simple String type, this merely sets the current value from the specified string.
func (me *TdtypeType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TdtypeType's alias type xsdt.Nmtoken.
func (me TdtypeType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TdtypeType is "character".
func (me TdtypeType) IsCharacter() bool { return me.String() == "character" }

//	Returns true if the value of this enumerated TdtypeType is "real".
func (me TdtypeType) IsReal() bool { return me.String() == "real" }

//	Returns true if the value of this enumerated TdtypeType is "file".
func (me TdtypeType) IsFile() bool { return me.String() == "file" }

//	Returns true if the value of this enumerated TdtypeType is "ipv4-packet".
func (me TdtypeType) IsIpv4Packet() bool { return me.String() == "ipv4-packet" }

//	Returns true if the value of this enumerated TdtypeType is "csv".
func (me TdtypeType) IsCsv() bool { return me.String() == "csv" }

//	Returns true if the value of this enumerated TdtypeType is "date-time".
func (me TdtypeType) IsDateTime() bool { return me.String() == "date-time" }

//	Returns true if the value of this enumerated TdtypeType is "ntpstamp".
func (me TdtypeType) IsNtpstamp() bool { return me.String() == "ntpstamp" }

//	Returns true if the value of this enumerated TdtypeType is "portlist".
func (me TdtypeType) IsPortlist() bool { return me.String() == "portlist" }

//	Returns true if the value of this enumerated TdtypeType is "frame".
func (me TdtypeType) IsFrame() bool { return me.String() == "frame" }

//	Returns true if the value of this enumerated TdtypeType is "packet".
func (me TdtypeType) IsPacket() bool { return me.String() == "packet" }

//	Since TdtypeType is just a simple String type, this merely returns the current string value.
func (me TdtypeType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TdtypeType is "boolean".
func (me TdtypeType) IsBoolean() bool { return me.String() == "boolean" }

//	Returns true if the value of this enumerated TdtypeType is "byte".
func (me TdtypeType) IsByte() bool { return me.String() == "byte" }

type XsdGoPkgHasAttr_Dtype_TdtypeType_ struct {
	Dtype TdtypeType `json:"dtype,omitempty" xml:" dtype,attr"`
}

type XsdGoPkgHasAttr_ExtDtype_XsdtString_ struct {
	ExtDtype *xsdt.String `json:"ext-dtype,omitempty" xml:" ext-dtype,attr,omitempty"`
}

type XsdGoPkgHasAttr_Formatid_XsdtString_ struct {
	Formatid *xsdt.String `json:"format-id,omitempty" xml:" formatid,attr,omitempty"`
}

type TExtensionType struct {
	// Custom value for innerxml
	XsdGoPkgHasInnerXml

	// Customized field
	Name *xsdt.String `json:"name,omitempty" xml:"-"`

	XsdGoPkgHasAttr_Dtype_TdtypeType_

	XsdGoPkgHasAttr_ExtDtype_XsdtString_

	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_Meaning_XsdtString_

	XsdGoPkgHasAttr_Formatid_XsdtString_

	// Customized fields
	ExtRestriction *xsdt.String `json:"ext-restriction,omitempty" xml:"-"`

	ObservableId *xsdt.Id `json:"observable-id,omitempty" xml:"-"`
}

//	If the WalkHandlers.TExtensionType function is not nil (ie. was set by outside code), calls it with this TExtensionType instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TExtensionType instance.
func (me *TExtensionType) Walk() (err error) {
	if fn := WalkHandlers.TExtensionType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		// if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
		// 	return
		// }
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AdditionalData struct {
	AdditionalDatas []*TExtensionType `xml:"urn:ietf:params:xml:ns:iodef-1.0 AdditionalData"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AdditionalData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AdditionalData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AdditionalData instance.
func (me *XsdGoPkgHasElems_AdditionalData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AdditionalData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AdditionalDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Description struct {
	DescriptionsJson []interface{} `json:"Description,omitempty" xml:"-"`
	Descriptions []*TMLStringType `json:"-" xml:"urn:ietf:params:xml:ns:iodef-1.0 Description,omitempty"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Description function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Description instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Description instance.
func (me *XsdGoPkgHasElems_Description) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Description; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Descriptions {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TimezoneType xsdt.String

//	Since TimezoneType is just a simple String type, this merely sets the current value from the specified string.
func (me *TimezoneType) Set(s string) { (*xsdt.String)(me).Set(s) }

//	Since TimezoneType is just a simple String type, this merely returns the current string value.
func (me TimezoneType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TimezoneType's alias type xsdt.String.
func (me TimezoneType) ToXsdtString() xsdt.String { return xsdt.String(me) }

type XsdGoPkgHasElem_Timezone struct {
	Timezone TimezoneType `xml:"urn:ietf:params:xml:ns:iodef-1.0 Timezone"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Timezone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Timezone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Timezone instance.
func (me *XsdGoPkgHasElem_Timezone) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Timezone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdContactRole xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdContactRole is "ext-value".
func (me TxsdContactRole) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TxsdContactRole is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdContactRole) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdContactRole is just a simple String type, this merely returns the current string value.
func (me TxsdContactRole) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdContactRole's alias type xsdt.Nmtoken.
func (me TxsdContactRole) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdContactRole is "creator".
func (me TxsdContactRole) IsCreator() bool { return me.String() == "creator" }

//	Returns true if the value of this enumerated TxsdContactRole is "admin".
func (me TxsdContactRole) IsAdmin() bool { return me.String() == "admin" }

//	Returns true if the value of this enumerated TxsdContactRole is "tech".
func (me TxsdContactRole) IsTech() bool { return me.String() == "tech" }

//	Returns true if the value of this enumerated TxsdContactRole is "irt".
func (me TxsdContactRole) IsIrt() bool { return me.String() == "irt" }

//	Returns true if the value of this enumerated TxsdContactRole is "cc".
func (me TxsdContactRole) IsCc() bool { return me.String() == "cc" }

type XsdGoPkgHasAttr_Role_TxsdContactRole_ struct {
	Role TxsdContactRole `xml:"urn:ietf:params:xml:ns:iodef-1.0 role,attr"`
}

type XsdGoPkgHasAttr_ExtType_XsdtString_ struct {
	ExtType xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 ext-type,attr"`
}

type TxsdContact struct {
	XsdGoPkgHasElems_AdditionalData

	XsdGoPkgHasElems_RegistryHandle

	XsdGoPkgHasElem_Timezone

	XsdGoPkgHasElems_Contact

	XsdGoPkgHasAttr_Role_TxsdContactRole_

	XsdGoPkgHasAttr_ExtType_XsdtString_

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElems_Telephone

	XsdGoPkgHasAttr_ExtRole_XsdtString_

	XsdGoPkgHasElem_ContactName

	XsdGoPkgHasElems_Email

	XsdGoPkgHasElem_Fax

	XsdGoPkgHasAttr_Type_TxsdContactType_

	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasElem_PostalAddress
}

//	If the WalkHandlers.TxsdContact function is not nil (ie. was set by outside code), calls it with this TxsdContact instance as the single argument. Then calls the Walk() method on 9/15 embed(s) and 0/0 field(s) belonging to this TxsdContact instance.
func (me *TxsdContact) Walk() (err error) {
	if fn := WalkHandlers.TxsdContact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PostalAddress.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Fax.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RegistryHandle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Timezone.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ContactName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Telephone.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Contact struct {
	Contacts []*TxsdContact `xml:"urn:ietf:params:xml:ns:iodef-1.0 Contact"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Contact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Contact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Contact instance.
func (me *XsdGoPkgHasElems_Contact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Contact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Contacts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Restriction_TrestrictionType_Default struct {
	Restriction TrestrictionType `xml:"urn:ietf:params:xml:ns:iodef-1.0 restriction,attr"`
}

//	Returns the default value for Restriction -- "default"
func (me XsdGoPkgHasAttr_Restriction_TrestrictionType_Default) RestrictionDefault() TrestrictionType {
	return TrestrictionType("default")
}

type TactionType xsdt.Nmtoken

//	Since TactionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TactionType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TactionType's alias type xsdt.Nmtoken.
func (me TactionType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TactionType is "contact-sender".
func (me TactionType) IsContactSender() bool { return me.String() == "contact-sender" }

//	Returns true if the value of this enumerated TactionType is "block-host".
func (me TactionType) IsBlockHost() bool { return me.String() == "block-host" }

//	Returns true if the value of this enumerated TactionType is "block-network".
func (me TactionType) IsBlockNetwork() bool { return me.String() == "block-network" }

//	Returns true if the value of this enumerated TactionType is "rate-limit-port".
func (me TactionType) IsRateLimitPort() bool { return me.String() == "rate-limit-port" }

//	Returns true if the value of this enumerated TactionType is "status-triage".
func (me TactionType) IsStatusTriage() bool { return me.String() == "status-triage" }

//	Returns true if the value of this enumerated TactionType is "nothing".
func (me TactionType) IsNothing() bool { return me.String() == "nothing" }

//	Returns true if the value of this enumerated TactionType is "contact-source-site".
func (me TactionType) IsContactSourceSite() bool { return me.String() == "contact-source-site" }

//	Returns true if the value of this enumerated TactionType is "investigate".
func (me TactionType) IsInvestigate() bool { return me.String() == "investigate" }

//	Returns true if the value of this enumerated TactionType is "rate-limit-network".
func (me TactionType) IsRateLimitNetwork() bool { return me.String() == "rate-limit-network" }

//	Returns true if the value of this enumerated TactionType is "remediate-other".
func (me TactionType) IsRemediateOther() bool { return me.String() == "remediate-other" }

//	Returns true if the value of this enumerated TactionType is "status-new-info".
func (me TactionType) IsStatusNewInfo() bool { return me.String() == "status-new-info" }

//	Since TactionType is just a simple String type, this merely returns the current string value.
func (me TactionType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TactionType is "contact-target-site".
func (me TactionType) IsContactTargetSite() bool { return me.String() == "contact-target-site" }

//	Returns true if the value of this enumerated TactionType is "block-port".
func (me TactionType) IsBlockPort() bool { return me.String() == "block-port" }

//	Returns true if the value of this enumerated TactionType is "rate-limit-host".
func (me TactionType) IsRateLimitHost() bool { return me.String() == "rate-limit-host" }

//	Returns true if the value of this enumerated TactionType is "other".
func (me TactionType) IsOther() bool { return me.String() == "other" }

//	Returns true if the value of this enumerated TactionType is "ext-value".
func (me TactionType) IsExtValue() bool { return me.String() == "ext-value" }

type XsdGoPkgHasAttr_Action_TactionType_ struct {
	Action TactionType `xml:"urn:ietf:params:xml:ns:iodef-1.0 action,attr"`
}

type XsdGoPkgHasAttr_ExtAction_XsdtString_ struct {
	ExtAction xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 ext-action,attr"`
}

type XsdGoPkgHasElem_DateTime struct {
	DateTime xsdt.DateTime `xml:"urn:ietf:params:xml:ns:iodef-1.0 DateTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DateTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DateTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DateTime instance.
func (me *XsdGoPkgHasElem_DateTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DateTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Name_XsdtString_ struct {
	Name xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 name,attr"`
}

type XsdGoPkgHasAttr_Instance_XsdtString_ struct {
	Instance xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 instance,attr"`
}

type XsdGoPkgHasAttr_Restriction_TrestrictionType_Public struct {
	Restriction TrestrictionType `xml:"urn:ietf:params:xml:ns:iodef-1.0 restriction,attr"`
}

//	Returns the default value for Restriction -- "public"
func (me XsdGoPkgHasAttr_Restriction_TrestrictionType_Public) RestrictionDefault() TrestrictionType {
	return TrestrictionType("public")
}

type TIncidentIDType struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Restriction_TrestrictionType_Public

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasAttr_Instance_XsdtString_
}

//	If the WalkHandlers.TIncidentIDType function is not nil (ie. was set by outside code), calls it with this TIncidentIDType instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TIncidentIDType instance.
func (me *TIncidentIDType) Walk() (err error) {
	if fn := WalkHandlers.TIncidentIDType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IncidentID struct {
	IncidentID *TIncidentIDType `xml:"urn:ietf:params:xml:ns:iodef-1.0 IncidentID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IncidentID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IncidentID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IncidentID instance.
func (me *XsdGoPkgHasElem_IncidentID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IncidentID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IncidentID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Contact struct {
	Contact *TxsdContact `xml:"urn:ietf:params:xml:ns:iodef-1.0 Contact"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Contact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Contact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Contact instance.
func (me *XsdGoPkgHasElem_Contact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Contact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Contact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdHistoryItem struct {
	XsdGoPkgHasElem_Contact

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElems_AdditionalData

	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasAttr_Action_TactionType_

	XsdGoPkgHasAttr_ExtAction_XsdtString_

	XsdGoPkgHasElem_DateTime

	XsdGoPkgHasElem_IncidentID
}

//	If the WalkHandlers.TxsdHistoryItem function is not nil (ie. was set by outside code), calls it with this TxsdHistoryItem instance as the single argument. Then calls the Walk() method on 5/8 embed(s) and 0/0 field(s) belonging to this TxsdHistoryItem instance.
func (me *TxsdHistoryItem) Walk() (err error) {
	if fn := WalkHandlers.TxsdHistoryItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DateTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IncidentID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Contact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_HistoryItem struct {
	HistoryItems []*TxsdHistoryItem `xml:"urn:ietf:params:xml:ns:iodef-1.0 HistoryItem"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_HistoryItem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_HistoryItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_HistoryItem instance.
func (me *XsdGoPkgHasElems_HistoryItem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_HistoryItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.HistoryItems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdHistory struct {
	XsdGoPkgHasElems_HistoryItem

	XsdGoPkgHasAttr_Restriction_TrestrictionType_Default
}

//	If the WalkHandlers.TxsdHistory function is not nil (ie. was set by outside code), calls it with this TxsdHistory instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdHistory instance.
func (me *TxsdHistory) Walk() (err error) {
	if fn := WalkHandlers.TxsdHistory; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_HistoryItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_History struct {
	History *TxsdHistory `xml:"urn:ietf:params:xml:ns:iodef-1.0 History"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_History function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_History instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_History instance.
func (me *XsdGoPkgHasElem_History) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_History; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.History.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IncidentID struct {
	IncidentIDs []*TIncidentIDType `xml:"urn:ietf:params:xml:ns:iodef-1.0 IncidentID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IncidentID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IncidentID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IncidentID instance.
func (me *XsdGoPkgHasElems_IncidentID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IncidentID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IncidentIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Url struct {
	Urls []xsdt.AnyURI `json:"URL,omitempty" xml:"urn:ietf:params:xml:ns:iodef-1.0 URL"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Url function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Url instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Url instance.
func (me *XsdGoPkgHasElems_Url) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Url; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRelatedActivity struct {
	XsdGoPkgHasElems_IncidentID

	XsdGoPkgHasElems_Url

	XsdGoPkgHasAttr_Restriction_TrestrictionType_
}

//	If the WalkHandlers.TxsdRelatedActivity function is not nil (ie. was set by outside code), calls it with this TxsdRelatedActivity instance as the single argument. Then calls the Walk() method on 2/3 embed(s) and 0/0 field(s) belonging to this TxsdRelatedActivity instance.
func (me *TxsdRelatedActivity) Walk() (err error) {
	if fn := WalkHandlers.TxsdRelatedActivity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_IncidentID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RelatedActivity struct {
	RelatedActivity *TxsdRelatedActivity `xml:"urn:ietf:params:xml:ns:iodef-1.0 RelatedActivity"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RelatedActivity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RelatedActivity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RelatedActivity instance.
func (me *XsdGoPkgHasElem_RelatedActivity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RelatedActivity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RelatedActivity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReportTime struct {
	ReportTime xsdt.DateTime `xml:"urn:ietf:params:xml:ns:iodef-1.0 ReportTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReportTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReportTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ReportTime instance.
func (me *XsdGoPkgHasElem_ReportTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReportTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdConfidenceRating xsdt.Nmtoken

//	Since TxsdConfidenceRating is just a simple String type, this merely returns the current string value.
func (me TxsdConfidenceRating) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdConfidenceRating's alias type xsdt.Nmtoken.
func (me TxsdConfidenceRating) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdConfidenceRating is "low".
func (me TxsdConfidenceRating) IsLow() bool { return me.String() == "low" }

//	Returns true if the value of this enumerated TxsdConfidenceRating is "medium".
func (me TxsdConfidenceRating) IsMedium() bool { return me.String() == "medium" }

//	Returns true if the value of this enumerated TxsdConfidenceRating is "high".
func (me TxsdConfidenceRating) IsHigh() bool { return me.String() == "high" }

//	Returns true if the value of this enumerated TxsdConfidenceRating is "numeric".
func (me TxsdConfidenceRating) IsNumeric() bool { return me.String() == "numeric" }

//	Returns true if the value of this enumerated TxsdConfidenceRating is "unknown".
func (me TxsdConfidenceRating) IsUnknown() bool { return me.String() == "unknown" }

//	Since TxsdConfidenceRating is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdConfidenceRating) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

type XsdGoPkgHasAttr_Rating_TxsdConfidenceRating_ struct {
	Rating TxsdConfidenceRating `xml:"urn:ietf:params:xml:ns:iodef-1.0 rating,attr"`
}

type TxsdConfidence struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Rating_TxsdConfidenceRating_
}

//	If the WalkHandlers.TxsdConfidence function is not nil (ie. was set by outside code), calls it with this TxsdConfidence instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdConfidence instance.
func (me *TxsdConfidence) Walk() (err error) {
	if fn := WalkHandlers.TxsdConfidence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Confidence struct {
	Confidence *TxsdConfidence `xml:"urn:ietf:params:xml:ns:iodef-1.0 Confidence"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Confidence function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Confidence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Confidence instance.
func (me *XsdGoPkgHasElem_Confidence) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Confidence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Confidence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAssessmentOccurrence xsdt.Nmtoken

//	Since TxsdAssessmentOccurrence is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAssessmentOccurrence) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdAssessmentOccurrence is just a simple String type, this merely returns the current string value.
func (me TxsdAssessmentOccurrence) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdAssessmentOccurrence's alias type xsdt.Nmtoken.
func (me TxsdAssessmentOccurrence) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdAssessmentOccurrence is "actual".
func (me TxsdAssessmentOccurrence) IsActual() bool { return me.String() == "actual" }

//	Returns true if the value of this enumerated TxsdAssessmentOccurrence is "potential".
func (me TxsdAssessmentOccurrence) IsPotential() bool { return me.String() == "potential" }

type XsdGoPkgHasAttr_Occurrence_TxsdAssessmentOccurrence_ struct {
	Occurrence TxsdAssessmentOccurrence `xml:"urn:ietf:params:xml:ns:iodef-1.0 occurrence,attr"`
}

type TseverityType xsdt.Nmtoken

//	Returns true if the value of this enumerated TseverityType is "high".
func (me TseverityType) IsHigh() bool { return me.String() == "high" }

//	Since TseverityType is just a simple String type, this merely sets the current value from the specified string.
func (me *TseverityType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TseverityType is just a simple String type, this merely returns the current string value.
func (me TseverityType) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TseverityType's alias type xsdt.Nmtoken.
func (me TseverityType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TseverityType is "low".
func (me TseverityType) IsLow() bool { return me.String() == "low" }

//	Returns true if the value of this enumerated TseverityType is "medium".
func (me TseverityType) IsMedium() bool { return me.String() == "medium" }

type XsdGoPkgHasAttr_Severity_TseverityType_ struct {
	Severity TseverityType `xml:"urn:ietf:params:xml:ns:iodef-1.0 severity,attr"`
}

type TxsdImpactSimpleContentExtensionCompletion xsdt.Nmtoken

//	Since TxsdImpactSimpleContentExtensionCompletion is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdImpactSimpleContentExtensionCompletion) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdImpactSimpleContentExtensionCompletion is just a simple String type, this merely returns the current string value.
func (me TxsdImpactSimpleContentExtensionCompletion) String() string {
	return xsdt.Nmtoken(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdImpactSimpleContentExtensionCompletion's alias type xsdt.Nmtoken.
func (me TxsdImpactSimpleContentExtensionCompletion) ToXsdtNmtoken() xsdt.Nmtoken {
	return xsdt.Nmtoken(me)
}

//	Returns true if the value of this enumerated TxsdImpactSimpleContentExtensionCompletion is "failed".
func (me TxsdImpactSimpleContentExtensionCompletion) IsFailed() bool { return me.String() == "failed" }

//	Returns true if the value of this enumerated TxsdImpactSimpleContentExtensionCompletion is "succeeded".
func (me TxsdImpactSimpleContentExtensionCompletion) IsSucceeded() bool {
	return me.String() == "succeeded"
}

type XsdGoPkgHasAttr_Completion_TxsdImpactSimpleContentExtensionCompletion_ struct {
	Completion TxsdImpactSimpleContentExtensionCompletion `xml:"urn:ietf:params:xml:ns:iodef-1.0 completion,attr"`
}

type TxsdImpactSimpleContentExtensionType xsdt.Nmtoken

//	Since TxsdImpactSimpleContentExtensionType is just a simple String type, this merely returns the current string value.
func (me TxsdImpactSimpleContentExtensionType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TxsdImpactSimpleContentExtensionType is "extortion".
func (me TxsdImpactSimpleContentExtensionType) IsExtortion() bool { return me.String() == "extortion" }

//	Returns true if the value of this enumerated TxsdImpactSimpleContentExtensionType is "file".
func (me TxsdImpactSimpleContentExtensionType) IsFile() bool { return me.String() == "file" }

//	Returns true if the value of this enumerated TxsdImpactSimpleContentExtensionType is "recon".
func (me TxsdImpactSimpleContentExtensionType) IsRecon() bool { return me.String() == "recon" }

//	Since TxsdImpactSimpleContentExtensionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdImpactSimpleContentExtensionType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TxsdImpactSimpleContentExtensionType's alias type xsdt.Nmtoken.
func (me TxsdImpactSimpleContentExtensionType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdImpactSimpleContentExtensionType is "admin".
func (me TxsdImpactSimpleContentExtensionType) IsAdmin() bool { return me.String() == "admin" }

//	Returns true if the value of this enumerated TxsdImpactSimpleContentExtensionType is "info-leak".
func (me TxsdImpactSimpleContentExtensionType) IsInfoLeak() bool { return me.String() == "info-leak" }

//	Returns true if the value of this enumerated TxsdImpactSimpleContentExtensionType is "misconfiguration".
func (me TxsdImpactSimpleContentExtensionType) IsMisconfiguration() bool {
	return me.String() == "misconfiguration"
}

//	Returns true if the value of this enumerated TxsdImpactSimpleContentExtensionType is "social-engineering".
func (me TxsdImpactSimpleContentExtensionType) IsSocialEngineering() bool {
	return me.String() == "social-engineering"
}

//	Returns true if the value of this enumerated TxsdImpactSimpleContentExtensionType is "ext-value".
func (me TxsdImpactSimpleContentExtensionType) IsExtValue() bool { return me.String() == "ext-value" }

//	Returns true if the value of this enumerated TxsdImpactSimpleContentExtensionType is "dos".
func (me TxsdImpactSimpleContentExtensionType) IsDos() bool { return me.String() == "dos" }

//	Returns true if the value of this enumerated TxsdImpactSimpleContentExtensionType is "policy".
func (me TxsdImpactSimpleContentExtensionType) IsPolicy() bool { return me.String() == "policy" }

//	Returns true if the value of this enumerated TxsdImpactSimpleContentExtensionType is "user".
func (me TxsdImpactSimpleContentExtensionType) IsUser() bool { return me.String() == "user" }

//	Returns true if the value of this enumerated TxsdImpactSimpleContentExtensionType is "unknown".
func (me TxsdImpactSimpleContentExtensionType) IsUnknown() bool { return me.String() == "unknown" }

type XsdGoPkgHasAttr_Type_TxsdImpactSimpleContentExtensionType_Unknown struct {
	Type TxsdImpactSimpleContentExtensionType `xml:"urn:ietf:params:xml:ns:iodef-1.0 type,attr"`
}

//	Returns the default value for Type -- "unknown"
func (me XsdGoPkgHasAttr_Type_TxsdImpactSimpleContentExtensionType_Unknown) TypeDefault() TxsdImpactSimpleContentExtensionType {
	return TxsdImpactSimpleContentExtensionType("unknown")
}

type TxsdImpact struct {
	XsdGoPkgHasAttr_Type_TxsdImpactSimpleContentExtensionType_Unknown

	XsdGoPkgHasAttr_ExtType_XsdtString_

	TMLStringType

	XsdGoPkgHasAttr_Severity_TseverityType_

	XsdGoPkgHasAttr_Completion_TxsdImpactSimpleContentExtensionCompletion_
}

//	If the WalkHandlers.TxsdImpact function is not nil (ie. was set by outside code), calls it with this TxsdImpact instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TxsdImpact instance.
func (me *TxsdImpact) Walk() (err error) {
	if fn := WalkHandlers.TxsdImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TMLStringType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Impact struct {
	Impacts []*TxsdImpact `xml:"urn:ietf:params:xml:ns:iodef-1.0 Impact"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Impact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Impact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Impact instance.
func (me *XsdGoPkgHasElems_Impact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Impact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Impacts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_ExtMetric_XsdtString_ struct {
	ExtMetric xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 ext-metric,attr"`
}

type TdurationType xsdt.Nmtoken

//	Since TdurationType is just a simple String type, this merely returns the current string value.
func (me TdurationType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TdurationType is "second".
func (me TdurationType) IsSecond() bool { return me.String() == "second" }

//	Returns true if the value of this enumerated TdurationType is "minute".
func (me TdurationType) IsMinute() bool { return me.String() == "minute" }

//	Returns true if the value of this enumerated TdurationType is "day".
func (me TdurationType) IsDay() bool { return me.String() == "day" }

//	Returns true if the value of this enumerated TdurationType is "quarter".
func (me TdurationType) IsQuarter() bool { return me.String() == "quarter" }

//	Returns true if the value of this enumerated TdurationType is "ext-value".
func (me TdurationType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TdurationType is just a simple String type, this merely sets the current value from the specified string.
func (me *TdurationType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TdurationType's alias type xsdt.Nmtoken.
func (me TdurationType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TdurationType is "hour".
func (me TdurationType) IsHour() bool { return me.String() == "hour" }

//	Returns true if the value of this enumerated TdurationType is "month".
func (me TdurationType) IsMonth() bool { return me.String() == "month" }

//	Returns true if the value of this enumerated TdurationType is "year".
func (me TdurationType) IsYear() bool { return me.String() == "year" }

type XsdGoPkgHasAttr_Duration_TdurationType_ struct {
	Duration TdurationType `xml:"urn:ietf:params:xml:ns:iodef-1.0 duration,attr"`
}

type XsdGoPkgHasAttr_ExtDuration_XsdtString_ struct {
	ExtDuration xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 ext-duration,attr"`
}

type TPositiveFloatType xsdt.Float

//	This convenience method just performs a simple type conversion to TPositiveFloatType's alias type xsdt.Float.
func (me TPositiveFloatType) ToXsdtFloat() xsdt.Float { return xsdt.Float(me) }

//	Since TPositiveFloatType is a non-string scalar type (either boolean or numeric), sets the current value obtained from parsing the specified string.
func (me *TPositiveFloatType) Set(s string) { (*xsdt.Float)(me).Set(s) }

//	Returns a string representation of this TPositiveFloatType's current non-string scalar value.
func (me TPositiveFloatType) String() string { return xsdt.Float(me).String() }

type TxsdTimeImpactSimpleContentExtensionMetric xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdTimeImpactSimpleContentExtensionMetric is "downtime".
func (me TxsdTimeImpactSimpleContentExtensionMetric) IsDowntime() bool {
	return me.String() == "downtime"
}

//	Returns true if the value of this enumerated TxsdTimeImpactSimpleContentExtensionMetric is "ext-value".
func (me TxsdTimeImpactSimpleContentExtensionMetric) IsExtValue() bool {
	return me.String() == "ext-value"
}

//	Since TxsdTimeImpactSimpleContentExtensionMetric is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdTimeImpactSimpleContentExtensionMetric) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdTimeImpactSimpleContentExtensionMetric is just a simple String type, this merely returns the current string value.
func (me TxsdTimeImpactSimpleContentExtensionMetric) String() string {
	return xsdt.Nmtoken(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdTimeImpactSimpleContentExtensionMetric's alias type xsdt.Nmtoken.
func (me TxsdTimeImpactSimpleContentExtensionMetric) ToXsdtNmtoken() xsdt.Nmtoken {
	return xsdt.Nmtoken(me)
}

//	Returns true if the value of this enumerated TxsdTimeImpactSimpleContentExtensionMetric is "labor".
func (me TxsdTimeImpactSimpleContentExtensionMetric) IsLabor() bool { return me.String() == "labor" }

//	Returns true if the value of this enumerated TxsdTimeImpactSimpleContentExtensionMetric is "elapsed".
func (me TxsdTimeImpactSimpleContentExtensionMetric) IsElapsed() bool {
	return me.String() == "elapsed"
}

type XsdGoPkgHasAttr_Metric_TxsdTimeImpactSimpleContentExtensionMetric_ struct {
	Metric TxsdTimeImpactSimpleContentExtensionMetric `xml:"urn:ietf:params:xml:ns:iodef-1.0 metric,attr"`
}

type TxsdTimeImpact struct {
	XsdGoPkgHasAttr_Severity_TseverityType_

	XsdGoPkgHasAttr_Metric_TxsdTimeImpactSimpleContentExtensionMetric_

	XsdGoPkgHasAttr_ExtMetric_XsdtString_

	XsdGoPkgHasAttr_Duration_TdurationType_

	XsdGoPkgHasAttr_ExtDuration_XsdtString_

	TPositiveFloatType
}

//	If the WalkHandlers.TxsdTimeImpact function is not nil (ie. was set by outside code), calls it with this TxsdTimeImpact instance as the single argument. Then calls the Walk() method on 0/6 embed(s) and 0/0 field(s) belonging to this TxsdTimeImpact instance.
func (me *TxsdTimeImpact) Walk() (err error) {
	if fn := WalkHandlers.TxsdTimeImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_TimeImpact struct {
	TimeImpacts []*TxsdTimeImpact `xml:"urn:ietf:params:xml:ns:iodef-1.0 TimeImpact"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_TimeImpact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_TimeImpact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_TimeImpact instance.
func (me *XsdGoPkgHasElems_TimeImpact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_TimeImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.TimeImpacts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Currency_XsdtString_ struct {
	Currency xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 currency,attr"`
}

type TxsdMonetaryImpact struct {
	TPositiveFloatType

	XsdGoPkgHasAttr_Severity_TseverityType_

	XsdGoPkgHasAttr_Currency_XsdtString_
}

//	If the WalkHandlers.TxsdMonetaryImpact function is not nil (ie. was set by outside code), calls it with this TxsdMonetaryImpact instance as the single argument. Then calls the Walk() method on 0/3 embed(s) and 0/0 field(s) belonging to this TxsdMonetaryImpact instance.
func (me *TxsdMonetaryImpact) Walk() (err error) {
	if fn := WalkHandlers.TxsdMonetaryImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_MonetaryImpact struct {
	MonetaryImpacts []*TxsdMonetaryImpact `xml:"urn:ietf:params:xml:ns:iodef-1.0 MonetaryImpact"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_MonetaryImpact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_MonetaryImpact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_MonetaryImpact instance.
func (me *XsdGoPkgHasElems_MonetaryImpact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_MonetaryImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.MonetaryImpacts {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdCounterSimpleContentExtensionType xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdCounterSimpleContentExtensionType is "flow".
func (me TxsdCounterSimpleContentExtensionType) IsFlow() bool { return me.String() == "flow" }

//	Returns true if the value of this enumerated TxsdCounterSimpleContentExtensionType is "message".
func (me TxsdCounterSimpleContentExtensionType) IsMessage() bool { return me.String() == "message" }

//	Returns true if the value of this enumerated TxsdCounterSimpleContentExtensionType is "host".
func (me TxsdCounterSimpleContentExtensionType) IsHost() bool { return me.String() == "host" }

//	Returns true if the value of this enumerated TxsdCounterSimpleContentExtensionType is "packet".
func (me TxsdCounterSimpleContentExtensionType) IsPacket() bool { return me.String() == "packet" }

//	Returns true if the value of this enumerated TxsdCounterSimpleContentExtensionType is "ext-value".
func (me TxsdCounterSimpleContentExtensionType) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TxsdCounterSimpleContentExtensionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdCounterSimpleContentExtensionType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TxsdCounterSimpleContentExtensionType's alias type xsdt.Nmtoken.
func (me TxsdCounterSimpleContentExtensionType) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdCounterSimpleContentExtensionType is "byte".
func (me TxsdCounterSimpleContentExtensionType) IsByte() bool { return me.String() == "byte" }

//	Returns true if the value of this enumerated TxsdCounterSimpleContentExtensionType is "event".
func (me TxsdCounterSimpleContentExtensionType) IsEvent() bool { return me.String() == "event" }

//	Returns true if the value of this enumerated TxsdCounterSimpleContentExtensionType is "site".
func (me TxsdCounterSimpleContentExtensionType) IsSite() bool { return me.String() == "site" }

//	Returns true if the value of this enumerated TxsdCounterSimpleContentExtensionType is "organization".
func (me TxsdCounterSimpleContentExtensionType) IsOrganization() bool {
	return me.String() == "organization"
}

//	Since TxsdCounterSimpleContentExtensionType is just a simple String type, this merely returns the current string value.
func (me TxsdCounterSimpleContentExtensionType) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TxsdCounterSimpleContentExtensionType is "session".
func (me TxsdCounterSimpleContentExtensionType) IsSession() bool { return me.String() == "session" }

//	Returns true if the value of this enumerated TxsdCounterSimpleContentExtensionType is "alert".
func (me TxsdCounterSimpleContentExtensionType) IsAlert() bool { return me.String() == "alert" }

type XsdGoPkgHasAttr_Type_TxsdCounterSimpleContentExtensionType_ struct {
	Type TxsdCounterSimpleContentExtensionType `xml:"urn:ietf:params:xml:ns:iodef-1.0 type,attr"`
}

type TxsdCounter struct {
	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Duration_TdurationType_

	XsdGoPkgHasAttr_ExtDuration_XsdtString_

	XsdGoPkgHasAttr_Type_TxsdCounterSimpleContentExtensionType_

	XsdGoPkgHasAttr_ExtType_XsdtString_

	XsdGoPkgHasAttr_Meaning_XsdtString_
}

//	If the WalkHandlers.TxsdCounter function is not nil (ie. was set by outside code), calls it with this TxsdCounter instance as the single argument. Then calls the Walk() method on 1/6 embed(s) and 0/0 field(s) belonging to this TxsdCounter instance.
func (me *TxsdCounter) Walk() (err error) {
	if fn := WalkHandlers.TxsdCounter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Counter struct {
	Counters []*TxsdCounter `xml:"urn:ietf:params:xml:ns:iodef-1.0 Counter"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Counter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Counter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Counter instance.
func (me *XsdGoPkgHasElems_Counter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Counter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Counters {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAssessment struct {
	XsdGoPkgHasElems_AdditionalData

	XsdGoPkgHasAttr_Occurrence_TxsdAssessmentOccurrence_

	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasElems_Impact

	XsdGoPkgHasElems_TimeImpact

	XsdGoPkgHasElems_MonetaryImpact

	XsdGoPkgHasElems_Counter

	XsdGoPkgHasElem_Confidence
}

//	If the WalkHandlers.TxsdAssessment function is not nil (ie. was set by outside code), calls it with this TxsdAssessment instance as the single argument. Then calls the Walk() method on 6/8 embed(s) and 0/0 field(s) belonging to this TxsdAssessment instance.
func (me *TxsdAssessment) Walk() (err error) {
	if fn := WalkHandlers.TxsdAssessment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Confidence.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Impact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_TimeImpact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_MonetaryImpact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Counter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Assessment struct {
	Assessments []*TxsdAssessment `xml:"urn:ietf:params:xml:ns:iodef-1.0 Assessment"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Assessment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Assessment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Assessment instance.
func (me *XsdGoPkgHasElems_Assessment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Assessment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Assessments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_ struct {
	ReferenceName TMLStringType `json:",omitempty" xml:"urn:ietf:params:xml:ns:iodef-1.0 ReferenceName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_ instance.
func (me *XsdGoPkgHasElem_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.ReferenceName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdReference struct {
	XsdGoPkgHasElem_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_ `json:"-"`

	// Custom ReferenceName for JSON schema since golang does not support cycle import
	ReferenceName7970 *enum.TxsdReferenceName `json:"ReferenceName,omitempty" xml:"-"`

	XsdGoPkgHasElems_Url

	XsdGoPkgHasElems_Description
}

// Custom marshal JSON for TxsdReference
func (u *TxsdReference) MarshalJSON() ([]byte, error) {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdReference

	// Special case of XML to JSON
	u.DescriptionsJson = append(u.DescriptionsJson,u.ReferenceName)

	if u.DescriptionsJson == nil {
		for _, description := range u.Descriptions{
			u.DescriptionsJson = append(u.DescriptionsJson,description)
		}
	}

	return json.Marshal(&struct{
		*Alias
	}{
		Alias: (*Alias)(u),
	})
}

// Custom unmarshal JSON function for TxsdReference
func (u *TxsdReference) UnmarshalJSON(b []byte) error {
	// Declare temporary struct without functions to avoid recursive function call
	type Alias TxsdReference

	// Copy values into temporary struct
	temp := &struct {
		*Alias
	}{
		Alias: (*Alias)(u),
	}

	// Unmarshal JSON
	if err := json.Unmarshal(b, &temp); err != nil {
		return err
	}

	// Fill values into exclusive xml fields
	if u.DescriptionsJson != nil {
		u.Descriptions = make([]*TMLStringType, len(u.DescriptionsJson))
		for i:=0; i<len(u.DescriptionsJson); i++{
			// Check if field is string
			str, ok := u.DescriptionsJson[i].(string)
			if ok {
				u.Descriptions[i] = &TMLStringType{}
				u.Descriptions[i].XsdGoPkgCDATA = str
			} else {
				// Check if field is mappable to map[string]interface{} since unmarshaling does not provide its type
				m,ok := u.DescriptionsJson[i].(map[string]interface{})
				if ok {
					// Try to pass field's values to TMLStringType
					u.Descriptions[i] = &TMLStringType{}
					FillStruct(m, u.Descriptions[i])
				}
			}
		}
	}

	return nil
}

//	If the WalkHandlers.TxsdReference function is not nil (ie. was set by outside code), calls it with this TxsdReference instance as the single argument. Then calls the Walk() method on 3/3 embed(s) and 0/0 field(s) belonging to this TxsdReference instance.
func (me *TxsdReference) Walk() (err error) {
	if fn := WalkHandlers.TxsdReference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

func SetField(obj interface{}, name string, value interface{}) error {
	structValue := reflect.ValueOf(obj).Elem()

	var mappingName string

	// Get field from json name
	for i := 0; i < structValue.NumField(); i++ {
		flag := false
		for j:=0; j < structValue.Type().Field(i).Type.NumField(); j++ {
			typeField := structValue.Type().Field(i).Type.Field(j)
			tag := typeField.Tag

			if tag.Get("json") == name+",omitempty"{
				mappingName = typeField.Name
				flag = true
				break
			}
		}
		if flag == true {
			break
		}
	}

	if mappingName == "" {
		return fmt.Errorf("No such JSON tag: %s in obj", name)
	}

    structFieldValue := structValue.FieldByName(mappingName)

    if !structFieldValue.IsValid() {
        return fmt.Errorf("No such field: %s in obj", mappingName)
    }

    if !structFieldValue.CanSet() {
        return fmt.Errorf("Cannot set %s field value", name)
    }

	structFieldType := structFieldValue.Type()
	val := reflect.ValueOf(value)

	// If field's type is xml.TxsdLang, convert value to xml.TxsdLang
	if structFieldType == reflect.TypeOf((*xsdt.Language)(nil)){
		str := value.(string)
		structFieldValue.Set(reflect.ValueOf((*xsdt.Language)(&str)))
		return nil
	}


    if structFieldType != val.Type() {
        return fmt.Errorf("Provided value type didn't match obj field type")
    }

    structFieldValue.Set(val)
    return nil
}

func FillStruct(m map[string]interface{}, s interface{}) error {
    for k, v := range m {
        err := SetField(s, k, v)
        if err != nil {
            return err
        }
    }
    return nil
}

type XsdGoPkgHasElems_Reference struct {
	References []*TxsdReference `json:"Reference,omitempty" xml:"urn:ietf:params:xml:ns:iodef-1.0 Reference"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Reference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Reference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Reference instance.
func (me *XsdGoPkgHasElems_Reference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Reference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.References {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdMethod struct {
	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasElems_Reference

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElems_AdditionalData
}

//	If the WalkHandlers.TxsdMethod function is not nil (ie. was set by outside code), calls it with this TxsdMethod instance as the single argument. Then calls the Walk() method on 3/4 embed(s) and 0/0 field(s) belonging to this TxsdMethod instance.
func (me *TxsdMethod) Walk() (err error) {
	if fn := WalkHandlers.TxsdMethod; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Reference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Method struct {
	Methods []*TxsdMethod `xml:"urn:ietf:params:xml:ns:iodef-1.0 Method"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Method function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Method instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Method instance.
func (me *XsdGoPkgHasElems_Method) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Method; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Methods {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdAlternativeID struct {
	XsdGoPkgHasElems_IncidentID

	XsdGoPkgHasAttr_Restriction_TrestrictionType_
}

//	If the WalkHandlers.TxsdAlternativeID function is not nil (ie. was set by outside code), calls it with this TxsdAlternativeID instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdAlternativeID instance.
func (me *TxsdAlternativeID) Walk() (err error) {
	if fn := WalkHandlers.TxsdAlternativeID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_IncidentID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AlternativeID struct {
	AlternativeID *TxsdAlternativeID `xml:"urn:ietf:params:xml:ns:iodef-1.0 AlternativeID"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AlternativeID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AlternativeID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AlternativeID instance.
func (me *XsdGoPkgHasElem_AlternativeID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AlternativeID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AlternativeID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Restriction_TrestrictionType_Private struct {
	Restriction TrestrictionType `xml:"urn:ietf:params:xml:ns:iodef-1.0 restriction,attr"`
}

//	Returns the default value for Restriction -- "private"
func (me XsdGoPkgHasAttr_Restriction_TrestrictionType_Private) RestrictionDefault() TrestrictionType {
	return TrestrictionType("private")
}

type XsdGoPkgHasElem_EndTime struct {
	EndTime xsdt.DateTime `xml:"urn:ietf:params:xml:ns:iodef-1.0 EndTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EndTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EndTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_EndTime instance.
func (me *XsdGoPkgHasElem_EndTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EndTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_DetectTime struct {
	DetectTime xsdt.DateTime `xml:"urn:ietf:params:xml:ns:iodef-1.0 DetectTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_DetectTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_DetectTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_DetectTime instance.
func (me *XsdGoPkgHasElem_DetectTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_DetectTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_StartTime struct {
	StartTime xsdt.DateTime `xml:"urn:ietf:params:xml:ns:iodef-1.0 StartTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_StartTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_StartTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_StartTime instance.
func (me *XsdGoPkgHasElem_StartTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_StartTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Url struct {
	Url xsdt.AnyURI `xml:"urn:ietf:params:xml:ns:iodef-1.0 URL"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Url function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Url instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_Url instance.
func (me *XsdGoPkgHasElem_Url) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Url; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Version_XsdtString_ struct {
	Version xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 version,attr"`
}

type XsdGoPkgHasAttr_Patch_XsdtString_ struct {
	Patch xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 patch,attr"`
}

type XsdGoPkgHasAttr_Swid_XsdtString_0 struct {
	Swid xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 swid,attr"`
}

//	Returns the default value for Swid -- "0"
func (me XsdGoPkgHasAttr_Swid_XsdtString_0) SwidDefault() xsdt.String { return xsdt.String("0") }

type XsdGoPkgHasAttr_Configid_XsdtString_0 struct {
	Configid xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 configid,attr"`
}

//	Returns the default value for Configid -- "0"
func (me XsdGoPkgHasAttr_Configid_XsdtString_0) ConfigidDefault() xsdt.String {
	return xsdt.String("0")
}

type XsdGoPkgHasAttr_Vendor_XsdtString_ struct {
	Vendor xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 vendor,attr"`
}

type XsdGoPkgHasAttr_Family_XsdtString_ struct {
	Family xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 family,attr"`
}

type TSoftwareType struct {
	XsdGoPkgHasAttr_Family_XsdtString_

	XsdGoPkgHasAttr_Name_XsdtString_

	XsdGoPkgHasElem_Url

	XsdGoPkgHasAttr_Version_XsdtString_

	XsdGoPkgHasAttr_Patch_XsdtString_

	XsdGoPkgHasAttr_Swid_XsdtString_0

	XsdGoPkgHasAttr_Configid_XsdtString_0

	XsdGoPkgHasAttr_Vendor_XsdtString_
}

//	If the WalkHandlers.TSoftwareType function is not nil (ie. was set by outside code), calls it with this TSoftwareType instance as the single argument. Then calls the Walk() method on 1/8 embed(s) and 0/0 field(s) belonging to this TSoftwareType instance.
func (me *TSoftwareType) Walk() (err error) {
	if fn := WalkHandlers.TSoftwareType; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Url.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Application struct {
	Application *TSoftwareType `xml:"urn:ietf:params:xml:ns:iodef-1.0 Application"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Application function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Application instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Application instance.
func (me *XsdGoPkgHasElem_Application) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Application; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Instance_XsdtInteger_ struct {
	Instance xsdt.Integer `xml:"urn:ietf:params:xml:ns:iodef-1.0 instance,attr"`
}

type TxsdRecordPatternSimpleContentExtensionType xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdRecordPatternSimpleContentExtensionType is "binary".
func (me TxsdRecordPatternSimpleContentExtensionType) IsBinary() bool { return me.String() == "binary" }

//	Returns true if the value of this enumerated TxsdRecordPatternSimpleContentExtensionType is "xpath".
func (me TxsdRecordPatternSimpleContentExtensionType) IsXpath() bool { return me.String() == "xpath" }

//	Returns true if the value of this enumerated TxsdRecordPatternSimpleContentExtensionType is "ext-value".
func (me TxsdRecordPatternSimpleContentExtensionType) IsExtValue() bool {
	return me.String() == "ext-value"
}

//	Since TxsdRecordPatternSimpleContentExtensionType is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdRecordPatternSimpleContentExtensionType) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdRecordPatternSimpleContentExtensionType is just a simple String type, this merely returns the current string value.
func (me TxsdRecordPatternSimpleContentExtensionType) String() string {
	return xsdt.Nmtoken(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdRecordPatternSimpleContentExtensionType's alias type xsdt.Nmtoken.
func (me TxsdRecordPatternSimpleContentExtensionType) ToXsdtNmtoken() xsdt.Nmtoken {
	return xsdt.Nmtoken(me)
}

//	Returns true if the value of this enumerated TxsdRecordPatternSimpleContentExtensionType is "regex".
func (me TxsdRecordPatternSimpleContentExtensionType) IsRegex() bool { return me.String() == "regex" }

type XsdGoPkgHasAttr_Type_TxsdRecordPatternSimpleContentExtensionType_ struct {
	Type TxsdRecordPatternSimpleContentExtensionType `xml:"urn:ietf:params:xml:ns:iodef-1.0 type,attr"`
}

type XsdGoPkgHasAttr_Offset_XsdtInteger_ struct {
	Offset xsdt.Integer `xml:"urn:ietf:params:xml:ns:iodef-1.0 offset,attr"`
}

type TxsdRecordPatternSimpleContentExtensionOffsetunit xsdt.Nmtoken

//	Since TxsdRecordPatternSimpleContentExtensionOffsetunit is just a simple String type, this merely returns the current string value.
func (me TxsdRecordPatternSimpleContentExtensionOffsetunit) String() string {
	return xsdt.Nmtoken(me).String()
}

//	This convenience method just performs a simple type conversion to TxsdRecordPatternSimpleContentExtensionOffsetunit's alias type xsdt.Nmtoken.
func (me TxsdRecordPatternSimpleContentExtensionOffsetunit) ToXsdtNmtoken() xsdt.Nmtoken {
	return xsdt.Nmtoken(me)
}

//	Returns true if the value of this enumerated TxsdRecordPatternSimpleContentExtensionOffsetunit is "line".
func (me TxsdRecordPatternSimpleContentExtensionOffsetunit) IsLine() bool {
	return me.String() == "line"
}

//	Returns true if the value of this enumerated TxsdRecordPatternSimpleContentExtensionOffsetunit is "byte".
func (me TxsdRecordPatternSimpleContentExtensionOffsetunit) IsByte() bool {
	return me.String() == "byte"
}

//	Returns true if the value of this enumerated TxsdRecordPatternSimpleContentExtensionOffsetunit is "ext-value".
func (me TxsdRecordPatternSimpleContentExtensionOffsetunit) IsExtValue() bool {
	return me.String() == "ext-value"
}

//	Since TxsdRecordPatternSimpleContentExtensionOffsetunit is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdRecordPatternSimpleContentExtensionOffsetunit) Set(s string) {
	(*xsdt.Nmtoken)(me).Set(s)
}

type XsdGoPkgHasAttr_Offsetunit_TxsdRecordPatternSimpleContentExtensionOffsetunit_Line struct {
	Offsetunit TxsdRecordPatternSimpleContentExtensionOffsetunit `xml:"urn:ietf:params:xml:ns:iodef-1.0 offsetunit,attr"`
}

//	Returns the default value for Offsetunit -- "line"
func (me XsdGoPkgHasAttr_Offsetunit_TxsdRecordPatternSimpleContentExtensionOffsetunit_Line) OffsetunitDefault() TxsdRecordPatternSimpleContentExtensionOffsetunit {
	return TxsdRecordPatternSimpleContentExtensionOffsetunit("line")
}

type XsdGoPkgHasAttr_ExtOffsetunit_XsdtString_ struct {
	ExtOffsetunit xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 ext-offsetunit,attr"`
}

type TxsdRecordPattern struct {
	XsdGoPkgHasAttr_ExtOffsetunit_XsdtString_

	XsdGoPkgHasAttr_Instance_XsdtInteger_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_Type_TxsdRecordPatternSimpleContentExtensionType_

	XsdGoPkgHasAttr_ExtType_XsdtString_

	XsdGoPkgHasAttr_Offset_XsdtInteger_

	XsdGoPkgHasAttr_Offsetunit_TxsdRecordPatternSimpleContentExtensionOffsetunit_Line
}

//	If the WalkHandlers.TxsdRecordPattern function is not nil (ie. was set by outside code), calls it with this TxsdRecordPattern instance as the single argument. Then calls the Walk() method on 1/7 embed(s) and 0/0 field(s) belonging to this TxsdRecordPattern instance.
func (me *TxsdRecordPattern) Walk() (err error) {
	if fn := WalkHandlers.TxsdRecordPattern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RecordPattern struct {
	RecordPatterns []*TxsdRecordPattern `xml:"urn:ietf:params:xml:ns:iodef-1.0 RecordPattern"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RecordPattern function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RecordPattern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RecordPattern instance.
func (me *XsdGoPkgHasElems_RecordPattern) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RecordPattern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RecordPatterns {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RecordItem struct {
	RecordItems []*TExtensionType `xml:"urn:ietf:params:xml:ns:iodef-1.0 RecordItem"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RecordItem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RecordItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RecordItem instance.
func (me *XsdGoPkgHasElems_RecordItem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RecordItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RecordItems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRecordData struct {
	XsdGoPkgHasElem_DateTime

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElem_Application

	XsdGoPkgHasElems_RecordPattern

	XsdGoPkgHasElems_RecordItem

	XsdGoPkgHasElems_AdditionalData

	XsdGoPkgHasAttr_Restriction_TrestrictionType_
}

//	If the WalkHandlers.TxsdRecordData function is not nil (ie. was set by outside code), calls it with this TxsdRecordData instance as the single argument. Then calls the Walk() method on 6/7 embed(s) and 0/0 field(s) belonging to this TxsdRecordData instance.
func (me *TxsdRecordData) Walk() (err error) {
	if fn := WalkHandlers.TxsdRecordData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_DateTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RecordPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_RecordItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RecordData struct {
	RecordDatas []*TxsdRecordData `xml:"urn:ietf:params:xml:ns:iodef-1.0 RecordData"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RecordData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RecordData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RecordData instance.
func (me *XsdGoPkgHasElems_RecordData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RecordData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RecordDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdRecord struct {
	XsdGoPkgHasElems_RecordData

	XsdGoPkgHasAttr_Restriction_TrestrictionType_
}

//	If the WalkHandlers.TxsdRecord function is not nil (ie. was set by outside code), calls it with this TxsdRecord instance as the single argument. Then calls the Walk() method on 1/2 embed(s) and 0/0 field(s) belonging to this TxsdRecord instance.
func (me *TxsdRecord) Walk() (err error) {
	if fn := WalkHandlers.TxsdRecord; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_RecordData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Record struct {
	Record *TxsdRecord `xml:"urn:ietf:params:xml:ns:iodef-1.0 Record"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Record function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Record instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Record instance.
func (me *XsdGoPkgHasElem_Record) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Record; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Record.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Assessment struct {
	Assessment *TxsdAssessment `xml:"urn:ietf:params:xml:ns:iodef-1.0 Assessment"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Assessment function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Assessment instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Assessment instance.
func (me *XsdGoPkgHasElem_Assessment) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Assessment; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Assessment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_ struct {
	NodeNames []*TMLStringType `xml:"urn:ietf:params:xml:ns:iodef-1.0 NodeName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_ instance.
func (me *XsdGoPkgHasElems_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NodeNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_VlanNum_XsdtInteger_ struct {
	VlanNum xsdt.Integer `xml:"urn:ietf:params:xml:ns:iodef-1.0 vlan-num,attr"`
}

type TxsdAddressSimpleContentExtensionCategory xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdAddressSimpleContentExtensionCategory is "ipv6-net".
func (me TxsdAddressSimpleContentExtensionCategory) IsIpv6Net() bool {
	return me.String() == "ipv6-net"
}

//	Since TxsdAddressSimpleContentExtensionCategory is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdAddressSimpleContentExtensionCategory) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TxsdAddressSimpleContentExtensionCategory is "ipv4-net".
func (me TxsdAddressSimpleContentExtensionCategory) IsIpv4Net() bool {
	return me.String() == "ipv4-net"
}

//	Returns true if the value of this enumerated TxsdAddressSimpleContentExtensionCategory is "mac".
func (me TxsdAddressSimpleContentExtensionCategory) IsMac() bool { return me.String() == "mac" }

//	This convenience method just performs a simple type conversion to TxsdAddressSimpleContentExtensionCategory's alias type xsdt.Nmtoken.
func (me TxsdAddressSimpleContentExtensionCategory) ToXsdtNmtoken() xsdt.Nmtoken {
	return xsdt.Nmtoken(me)
}

//	Returns true if the value of this enumerated TxsdAddressSimpleContentExtensionCategory is "e-mail".
func (me TxsdAddressSimpleContentExtensionCategory) IsEMail() bool { return me.String() == "e-mail" }

//	Returns true if the value of this enumerated TxsdAddressSimpleContentExtensionCategory is "atm".
func (me TxsdAddressSimpleContentExtensionCategory) IsAtm() bool { return me.String() == "atm" }

//	Returns true if the value of this enumerated TxsdAddressSimpleContentExtensionCategory is "ipv6-addr".
func (me TxsdAddressSimpleContentExtensionCategory) IsIpv6Addr() bool {
	return me.String() == "ipv6-addr"
}

//	Returns true if the value of this enumerated TxsdAddressSimpleContentExtensionCategory is "ipv6-net-mask".
func (me TxsdAddressSimpleContentExtensionCategory) IsIpv6NetMask() bool {
	return me.String() == "ipv6-net-mask"
}

//	Returns true if the value of this enumerated TxsdAddressSimpleContentExtensionCategory is "ext-value".
func (me TxsdAddressSimpleContentExtensionCategory) IsExtValue() bool {
	return me.String() == "ext-value"
}

//	Since TxsdAddressSimpleContentExtensionCategory is just a simple String type, this merely returns the current string value.
func (me TxsdAddressSimpleContentExtensionCategory) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TxsdAddressSimpleContentExtensionCategory is "asn".
func (me TxsdAddressSimpleContentExtensionCategory) IsAsn() bool { return me.String() == "asn" }

//	Returns true if the value of this enumerated TxsdAddressSimpleContentExtensionCategory is "ipv4-addr".
func (me TxsdAddressSimpleContentExtensionCategory) IsIpv4Addr() bool {
	return me.String() == "ipv4-addr"
}

//	Returns true if the value of this enumerated TxsdAddressSimpleContentExtensionCategory is "ipv4-net-mask".
func (me TxsdAddressSimpleContentExtensionCategory) IsIpv4NetMask() bool {
	return me.String() == "ipv4-net-mask"
}

type XsdGoPkgHasAttr_Category_TxsdAddressSimpleContentExtensionCategory_Ipv4Addr struct {
	Category TxsdAddressSimpleContentExtensionCategory `xml:"urn:ietf:params:xml:ns:iodef-1.0 category,attr"`
}

//	Returns the default value for Category -- "ipv4-addr"
func (me XsdGoPkgHasAttr_Category_TxsdAddressSimpleContentExtensionCategory_Ipv4Addr) CategoryDefault() TxsdAddressSimpleContentExtensionCategory {
	return TxsdAddressSimpleContentExtensionCategory("ipv4-addr")
}

type XsdGoPkgHasAttr_ExtCategory_XsdtString_ struct {
	ExtCategory xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 ext-category,attr"`
}

type XsdGoPkgHasAttr_VlanName_XsdtString_ struct {
	VlanName xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 vlan-name,attr"`
}

type TxsdAddress struct {
	XsdGoPkgHasAttr_Category_TxsdAddressSimpleContentExtensionCategory_Ipv4Addr

	XsdGoPkgHasAttr_ExtCategory_XsdtString_

	XsdGoPkgHasAttr_VlanName_XsdtString_

	XsdGoPkgHasCdata

	XsdGoPkgHasAttr_VlanNum_XsdtInteger_
}

//	If the WalkHandlers.TxsdAddress function is not nil (ie. was set by outside code), calls it with this TxsdAddress instance as the single argument. Then calls the Walk() method on 1/5 embed(s) and 0/0 field(s) belonging to this TxsdAddress instance.
func (me *TxsdAddress) Walk() (err error) {
	if fn := WalkHandlers.TxsdAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasCdata.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Address struct {
	Addresses []*TxsdAddress `xml:"urn:ietf:params:xml:ns:iodef-1.0 Address"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Address function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Address instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Address instance.
func (me *XsdGoPkgHasElems_Address) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Address; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Addresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Location struct {
	Location *TMLStringType `xml:"urn:ietf:params:xml:ns:iodef-1.0 Location"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Location function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Location instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Location instance.
func (me *XsdGoPkgHasElem_Location) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Location; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Location.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdNodeRoleSimpleContentExtensionCategory xsdt.Nmtoken

//	This convenience method just performs a simple type conversion to TxsdNodeRoleSimpleContentExtensionCategory's alias type xsdt.Nmtoken.
func (me TxsdNodeRoleSimpleContentExtensionCategory) ToXsdtNmtoken() xsdt.Nmtoken {
	return xsdt.Nmtoken(me)
}

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "server-internal".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsServerInternal() bool {
	return me.String() == "server-internal"
}

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "streaming".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsStreaming() bool {
	return me.String() == "streaming"
}

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "ftp".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsFtp() bool { return me.String() == "ftp" }

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "database".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsDatabase() bool {
	return me.String() == "database"
}

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "www".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsWww() bool { return me.String() == "www" }

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "mail".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsMail() bool { return me.String() == "mail" }

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "file".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsFile() bool { return me.String() == "file" }

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "p2p".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsP2P() bool { return me.String() == "p2p" }

//	Since TxsdNodeRoleSimpleContentExtensionCategory is just a simple String type, this merely returns the current string value.
func (me TxsdNodeRoleSimpleContentExtensionCategory) String() string {
	return xsdt.Nmtoken(me).String()
}

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "messaging".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsMessaging() bool {
	return me.String() == "messaging"
}

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "application".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsApplication() bool {
	return me.String() == "application"
}

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "log".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsLog() bool { return me.String() == "log" }

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "ext-value".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsExtValue() bool {
	return me.String() == "ext-value"
}

//	Since TxsdNodeRoleSimpleContentExtensionCategory is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdNodeRoleSimpleContentExtensionCategory) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "client".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsClient() bool { return me.String() == "client" }

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "server-public".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsServerPublic() bool {
	return me.String() == "server-public"
}

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "voice".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsVoice() bool { return me.String() == "voice" }

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "name".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsName() bool { return me.String() == "name" }

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "directory".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsDirectory() bool {
	return me.String() == "directory"
}

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "credential".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsCredential() bool {
	return me.String() == "credential"
}

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "print".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsPrint() bool { return me.String() == "print" }

//	Returns true if the value of this enumerated TxsdNodeRoleSimpleContentExtensionCategory is "infra".
func (me TxsdNodeRoleSimpleContentExtensionCategory) IsInfra() bool { return me.String() == "infra" }

type XsdGoPkgHasAttr_Category_TxsdNodeRoleSimpleContentExtensionCategory_ struct {
	Category TxsdNodeRoleSimpleContentExtensionCategory `xml:"urn:ietf:params:xml:ns:iodef-1.0 category,attr"`
}

type TxsdNodeRole struct {
	TMLStringType

	XsdGoPkgHasAttr_Category_TxsdNodeRoleSimpleContentExtensionCategory_

	XsdGoPkgHasAttr_ExtCategory_XsdtString_
}

//	If the WalkHandlers.TxsdNodeRole function is not nil (ie. was set by outside code), calls it with this TxsdNodeRole instance as the single argument. Then calls the Walk() method on 1/3 embed(s) and 0/0 field(s) belonging to this TxsdNodeRole instance.
func (me *TxsdNodeRole) Walk() (err error) {
	if fn := WalkHandlers.TxsdNodeRole; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TMLStringType.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_NodeRole struct {
	NodeRoles []*TxsdNodeRole `xml:"urn:ietf:params:xml:ns:iodef-1.0 NodeRole"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_NodeRole function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_NodeRole instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_NodeRole instance.
func (me *XsdGoPkgHasElems_NodeRole) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_NodeRole; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.NodeRoles {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdNode struct {
	XsdGoPkgHasElems_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_

	XsdGoPkgHasElems_Address

	XsdGoPkgHasElem_Location

	XsdGoPkgHasElem_DateTime

	XsdGoPkgHasElems_NodeRole

	XsdGoPkgHasElems_Counter
}

//	If the WalkHandlers.TxsdNode function is not nil (ie. was set by outside code), calls it with this TxsdNode instance as the single argument. Then calls the Walk() method on 6/6 embed(s) and 0/0 field(s) belonging to this TxsdNode instance.
func (me *TxsdNode) Walk() (err error) {
	if fn := WalkHandlers.TxsdNode; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_NodeRole.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Counter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Location.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DateTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Node struct {
	Node *TxsdNode `xml:"urn:ietf:params:xml:ns:iodef-1.0 Node"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Node function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Node instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Node instance.
func (me *XsdGoPkgHasElem_Node) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Node; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Node.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdSystemCategory xsdt.Nmtoken

//	Since TxsdSystemCategory is just a simple String type, this merely returns the current string value.
func (me TxsdSystemCategory) String() string { return xsdt.Nmtoken(me).String() }

//	Returns true if the value of this enumerated TxsdSystemCategory is "source".
func (me TxsdSystemCategory) IsSource() bool { return me.String() == "source" }

//	Returns true if the value of this enumerated TxsdSystemCategory is "sensor".
func (me TxsdSystemCategory) IsSensor() bool { return me.String() == "sensor" }

//	Returns true if the value of this enumerated TxsdSystemCategory is "infrastructure".
func (me TxsdSystemCategory) IsInfrastructure() bool { return me.String() == "infrastructure" }

//	Since TxsdSystemCategory is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSystemCategory) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	This convenience method just performs a simple type conversion to TxsdSystemCategory's alias type xsdt.Nmtoken.
func (me TxsdSystemCategory) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdSystemCategory is "target".
func (me TxsdSystemCategory) IsTarget() bool { return me.String() == "target" }

//	Returns true if the value of this enumerated TxsdSystemCategory is "intermediate".
func (me TxsdSystemCategory) IsIntermediate() bool { return me.String() == "intermediate" }

//	Returns true if the value of this enumerated TxsdSystemCategory is "ext-value".
func (me TxsdSystemCategory) IsExtValue() bool { return me.String() == "ext-value" }

type XsdGoPkgHasAttr_Category_TxsdSystemCategory_ struct {
	Category TxsdSystemCategory `xml:"urn:ietf:params:xml:ns:iodef-1.0 category,attr"`
}

type TxsdSystemSpoofed xsdt.Nmtoken

//	Since TxsdSystemSpoofed is just a simple String type, this merely returns the current string value.
func (me TxsdSystemSpoofed) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdSystemSpoofed's alias type xsdt.Nmtoken.
func (me TxsdSystemSpoofed) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdSystemSpoofed is "unknown".
func (me TxsdSystemSpoofed) IsUnknown() bool { return me.String() == "unknown" }

//	Returns true if the value of this enumerated TxsdSystemSpoofed is "yes".
func (me TxsdSystemSpoofed) IsYes() bool { return me.String() == "yes" }

//	Returns true if the value of this enumerated TxsdSystemSpoofed is "no".
func (me TxsdSystemSpoofed) IsNo() bool { return me.String() == "no" }

//	Since TxsdSystemSpoofed is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdSystemSpoofed) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

type XsdGoPkgHasAttr_Spoofed_TxsdSystemSpoofed_Unknown struct {
	Spoofed TxsdSystemSpoofed `xml:"urn:ietf:params:xml:ns:iodef-1.0 spoofed,attr"`
}

//	Returns the default value for Spoofed -- "unknown"
func (me XsdGoPkgHasAttr_Spoofed_TxsdSystemSpoofed_Unknown) SpoofedDefault() TxsdSystemSpoofed {
	return TxsdSystemSpoofed("unknown")
}

type XsdGoPkgHasElem_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_ struct {
	Port *xsdt.Integer `xml:"urn:ietf:params:xml:ns:iodef-1.0 Port"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_ instance.
func (me *XsdGoPkgHasElem_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TPortlistType xsdt.String

//	Since TPortlistType is just a simple String type, this merely returns the current string value.
func (me TPortlistType) String() string { return xsdt.String(me).String() }

//	This convenience method just performs a simple type conversion to TPortlistType's alias type xsdt.String.
func (me TPortlistType) ToXsdtString() xsdt.String { return xsdt.String(me) }

//	Since TPortlistType is just a simple String type, this merely sets the current value from the specified string.
func (me *TPortlistType) Set(s string) { (*xsdt.String)(me).Set(s) }

type XsdGoPkgHasElem_PortlistchoicesequenceTxsdServiceServiceschema_Portlist_TPortlistType_ struct {
	Portlist TPortlistType `xml:"urn:ietf:params:xml:ns:iodef-1.0 Portlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_PortlistchoicesequenceTxsdServiceServiceschema_Portlist_TPortlistType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_PortlistchoicesequenceTxsdServiceServiceschema_Portlist_TPortlistType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_PortlistchoicesequenceTxsdServiceServiceschema_Portlist_TPortlistType_ instance.
func (me *XsdGoPkgHasElem_PortlistchoicesequenceTxsdServiceServiceschema_Portlist_TPortlistType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_PortlistchoicesequenceTxsdServiceServiceschema_Portlist_TPortlistType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ProtoTypesequenceTxsdServiceServiceschema_ProtoType_XsdtInteger_ struct {
	ProtoType xsdt.Integer `xml:"urn:ietf:params:xml:ns:iodef-1.0 ProtoType"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProtoTypesequenceTxsdServiceServiceschema_ProtoType_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProtoTypesequenceTxsdServiceServiceschema_ProtoType_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ProtoTypesequenceTxsdServiceServiceschema_ProtoType_XsdtInteger_ instance.
func (me *XsdGoPkgHasElem_ProtoTypesequenceTxsdServiceServiceschema_ProtoType_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProtoTypesequenceTxsdServiceServiceschema_ProtoType_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ProtoCodesequenceTxsdServiceServiceschema_ProtoCode_XsdtInteger_ struct {
	ProtoCode xsdt.Integer `xml:"urn:ietf:params:xml:ns:iodef-1.0 ProtoCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProtoCodesequenceTxsdServiceServiceschema_ProtoCode_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProtoCodesequenceTxsdServiceServiceschema_ProtoCode_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ProtoCodesequenceTxsdServiceServiceschema_ProtoCode_XsdtInteger_ instance.
func (me *XsdGoPkgHasElem_ProtoCodesequenceTxsdServiceServiceschema_ProtoCode_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProtoCodesequenceTxsdServiceServiceschema_ProtoCode_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_ProtoFieldsequenceTxsdServiceServiceschema_ProtoField_XsdtInteger_ struct {
	ProtoField xsdt.Integer `xml:"urn:ietf:params:xml:ns:iodef-1.0 ProtoField"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_ProtoFieldsequenceTxsdServiceServiceschema_ProtoField_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_ProtoFieldsequenceTxsdServiceServiceschema_ProtoField_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElem_ProtoFieldsequenceTxsdServiceServiceschema_ProtoField_XsdtInteger_ instance.
func (me *XsdGoPkgHasElem_ProtoFieldsequenceTxsdServiceServiceschema_ProtoField_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_ProtoFieldsequenceTxsdServiceServiceschema_ProtoField_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_IpProtocol_XsdtInteger_ struct {
	IpProtocol xsdt.Integer `xml:"urn:ietf:params:xml:ns:iodef-1.0 ip_protocol,attr"`
}

type TxsdService struct {
	XsdGoPkgHasElem_ProtoFieldsequenceTxsdServiceServiceschema_ProtoField_XsdtInteger_

	XsdGoPkgHasElem_Application

	XsdGoPkgHasAttr_IpProtocol_XsdtInteger_

	XsdGoPkgHasElem_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_

	XsdGoPkgHasElem_PortlistchoicesequenceTxsdServiceServiceschema_Portlist_TPortlistType_

	XsdGoPkgHasElem_ProtoTypesequenceTxsdServiceServiceschema_ProtoType_XsdtInteger_

	XsdGoPkgHasElem_ProtoCodesequenceTxsdServiceServiceschema_ProtoCode_XsdtInteger_
}

//	If the WalkHandlers.TxsdService function is not nil (ie. was set by outside code), calls it with this TxsdService instance as the single argument. Then calls the Walk() method on 6/7 embed(s) and 0/0 field(s) belonging to this TxsdService instance.
func (me *TxsdService) Walk() (err error) {
	if fn := WalkHandlers.TxsdService; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_PortlistchoicesequenceTxsdServiceServiceschema_Portlist_TPortlistType_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProtoTypesequenceTxsdServiceServiceschema_ProtoType_XsdtInteger_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProtoCodesequenceTxsdServiceServiceschema_ProtoCode_XsdtInteger_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ProtoFieldsequenceTxsdServiceServiceschema_ProtoField_XsdtInteger_.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Application.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Service struct {
	Services []*TxsdService `xml:"urn:ietf:params:xml:ns:iodef-1.0 Service"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Service function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Service instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Service instance.
func (me *XsdGoPkgHasElems_Service) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Service; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Services {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_OperatingSystem struct {
	OperatingSystems []*TSoftwareType `xml:"urn:ietf:params:xml:ns:iodef-1.0 OperatingSystem"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_OperatingSystem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_OperatingSystem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_OperatingSystem instance.
func (me *XsdGoPkgHasElems_OperatingSystem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_OperatingSystem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.OperatingSystems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Interface_XsdtString_ struct {
	Interface xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 interface,attr"`
}

type TxsdSystem struct {
	XsdGoPkgHasElems_Counter

	XsdGoPkgHasElems_Description

	XsdGoPkgHasAttr_ExtCategory_XsdtString_

	XsdGoPkgHasAttr_Restriction_TrestrictionType_

	XsdGoPkgHasElem_Node

	XsdGoPkgHasElems_OperatingSystem

	XsdGoPkgHasElems_AdditionalData

	XsdGoPkgHasAttr_Interface_XsdtString_

	XsdGoPkgHasAttr_Category_TxsdSystemCategory_

	XsdGoPkgHasAttr_Spoofed_TxsdSystemSpoofed_Unknown

	XsdGoPkgHasElems_Service
}

//	If the WalkHandlers.TxsdSystem function is not nil (ie. was set by outside code), calls it with this TxsdSystem instance as the single argument. Then calls the Walk() method on 6/11 embed(s) and 0/0 field(s) belonging to this TxsdSystem instance.
func (me *TxsdSystem) Walk() (err error) {
	if fn := WalkHandlers.TxsdSystem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_OperatingSystem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Service.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Counter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Node.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_System struct {
	Systems []*TxsdSystem `xml:"urn:ietf:params:xml:ns:iodef-1.0 System"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_System function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_System instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_System instance.
func (me *XsdGoPkgHasElems_System) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_System; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Systems {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdFlow struct {
	XsdGoPkgHasElems_System
}

//	If the WalkHandlers.TxsdFlow function is not nil (ie. was set by outside code), calls it with this TxsdFlow instance as the single argument. Then calls the Walk() method on 1/1 embed(s) and 0/0 field(s) belonging to this TxsdFlow instance.
func (me *TxsdFlow) Walk() (err error) {
	if fn := WalkHandlers.TxsdFlow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_System.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Flow struct {
	Flows []*TxsdFlow `xml:"urn:ietf:params:xml:ns:iodef-1.0 Flow"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Flow function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Flow instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Flow instance.
func (me *XsdGoPkgHasElems_Flow) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Flow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Flows {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Action_TactionType_Other struct {
	Action TactionType `xml:"urn:ietf:params:xml:ns:iodef-1.0 action,attr"`
}

//	Returns the default value for Action -- "other"
func (me XsdGoPkgHasAttr_Action_TactionType_Other) ActionDefault() TactionType {
	return TactionType("other")
}

type TxsdExpectation struct {
	XsdGoPkgHasElem_EndTime

	XsdGoPkgHasElem_Contact

	XsdGoPkgHasAttr_ExtAction_XsdtString_

	XsdGoPkgHasAttr_Restriction_TrestrictionType_Default

	XsdGoPkgHasAttr_Severity_TseverityType_

	XsdGoPkgHasAttr_Action_TactionType_Other

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElem_StartTime
}

//	If the WalkHandlers.TxsdExpectation function is not nil (ie. was set by outside code), calls it with this TxsdExpectation instance as the single argument. Then calls the Walk() method on 4/8 embed(s) and 0/0 field(s) belonging to this TxsdExpectation instance.
func (me *TxsdExpectation) Walk() (err error) {
	if fn := WalkHandlers.TxsdExpectation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_Contact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StartTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Expectation struct {
	Expectations []*TxsdExpectation `xml:"urn:ietf:params:xml:ns:iodef-1.0 Expectation"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Expectation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Expectation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Expectation instance.
func (me *XsdGoPkgHasElems_Expectation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Expectation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Expectations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdEventData struct {
	XsdGoPkgHasElem_StartTime

	XsdGoPkgHasElem_EndTime

	XsdGoPkgHasElems_Contact

	XsdGoPkgHasElems_Method

	XsdGoPkgHasElem_Record

	XsdGoPkgHasElems_EventData

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElem_DetectTime

	XsdGoPkgHasElems_AdditionalData

	XsdGoPkgHasElems_Expectation

	XsdGoPkgHasAttr_Restriction_TrestrictionType_Default

	XsdGoPkgHasElem_Assessment

	XsdGoPkgHasElems_Flow
}

//	If the WalkHandlers.TxsdEventData function is not nil (ie. was set by outside code), calls it with this TxsdEventData instance as the single argument. Then calls the Walk() method on 11/13 embed(s) and 0/0 field(s) belonging to this TxsdEventData instance.
func (me *TxsdEventData) Walk() (err error) {
	if fn := WalkHandlers.TxsdEventData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DetectTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StartTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Contact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Method.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Record.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_Assessment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Flow.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Expectation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EventData struct {
	EventDatas []*TxsdEventData `xml:"urn:ietf:params:xml:ns:iodef-1.0 EventData"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EventData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EventData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EventData instance.
func (me *XsdGoPkgHasElems_EventData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EventData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.EventDatas {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type TxsdIncidentPurpose xsdt.Nmtoken

//	Returns true if the value of this enumerated TxsdIncidentPurpose is "other".
func (me TxsdIncidentPurpose) IsOther() bool { return me.String() == "other" }

//	Returns true if the value of this enumerated TxsdIncidentPurpose is "ext-value".
func (me TxsdIncidentPurpose) IsExtValue() bool { return me.String() == "ext-value" }

//	Since TxsdIncidentPurpose is just a simple String type, this merely sets the current value from the specified string.
func (me *TxsdIncidentPurpose) Set(s string) { (*xsdt.Nmtoken)(me).Set(s) }

//	Since TxsdIncidentPurpose is just a simple String type, this merely returns the current string value.
func (me TxsdIncidentPurpose) String() string { return xsdt.Nmtoken(me).String() }

//	This convenience method just performs a simple type conversion to TxsdIncidentPurpose's alias type xsdt.Nmtoken.
func (me TxsdIncidentPurpose) ToXsdtNmtoken() xsdt.Nmtoken { return xsdt.Nmtoken(me) }

//	Returns true if the value of this enumerated TxsdIncidentPurpose is "traceback".
func (me TxsdIncidentPurpose) IsTraceback() bool { return me.String() == "traceback" }

//	Returns true if the value of this enumerated TxsdIncidentPurpose is "mitigation".
func (me TxsdIncidentPurpose) IsMitigation() bool { return me.String() == "mitigation" }

//	Returns true if the value of this enumerated TxsdIncidentPurpose is "reporting".
func (me TxsdIncidentPurpose) IsReporting() bool { return me.String() == "reporting" }

type XsdGoPkgHasAttr_Purpose_TxsdIncidentPurpose_ struct {
	Purpose TxsdIncidentPurpose `xml:"urn:ietf:params:xml:ns:iodef-1.0 purpose,attr"`
}

type XsdGoPkgHasAttr_ExtPurpose_XsdtString_ struct {
	ExtPurpose xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 ext-purpose,attr"`
}

type TxsdIncident struct {
	XsdGoPkgHasElem_EndTime

	XsdGoPkgHasElems_EventData

	XsdGoPkgHasElems_AdditionalData

	XsdGoPkgHasElem_DetectTime

	XsdGoPkgHasElem_StartTime

	XsdGoPkgHasAttr_Purpose_TxsdIncidentPurpose_

	XsdGoPkgHasAttr_ExtPurpose_XsdtString_

	XsdGoPkgHasElems_Contact

	XsdGoPkgHasElem_History

	XsdGoPkgHasElem_IncidentID

	XsdGoPkgHasElem_AlternativeID

	XsdGoPkgHasElem_RelatedActivity

	XsdGoPkgHasElem_ReportTime

	XsdGoPkgHasElems_Description

	XsdGoPkgHasElems_Assessment

	XsdGoPkgHasElems_Method

	XsdGoPkgHasAttr_Lang_XsdtLanguage_

	XsdGoPkgHasAttr_Restriction_TrestrictionType_Private
}

//	If the WalkHandlers.TxsdIncident function is not nil (ie. was set by outside code), calls it with this TxsdIncident instance as the single argument. Then calls the Walk() method on 14/18 embed(s) and 0/0 field(s) belonging to this TxsdIncident instance.
func (me *TxsdIncident) Walk() (err error) {
	if fn := WalkHandlers.TxsdIncident; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElem_RelatedActivity.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_ReportTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Assessment.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Method.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_IncidentID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_AlternativeID.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_EndTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_EventData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_DetectTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_StartTime.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElems_Contact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if err = me.XsdGoPkgHasElem_History.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Incident struct {
	Incidents []*TxsdIncident `xml:"urn:ietf:params:xml:ns:iodef-1.0 Incident"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Incident function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Incident instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Incident instance.
func (me *XsdGoPkgHasElems_Incident) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Incident; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Incidents {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasAttr_Version_XsdtString_100 struct {
	Version xsdt.String `xml:"urn:ietf:params:xml:ns:iodef-1.0 version,attr"`
}

//	Returns the fixed value for Version -- "1.00"
func (me XsdGoPkgHasAttr_Version_XsdtString_100) VersionFixed() xsdt.String {
	return xsdt.String("1.00")
}

type TxsdIodefDocument struct {
	XsdGoPkgHasElems_Incident

	XsdGoPkgHasAttr_Version_XsdtString_100

	XsdGoPkgHasAttr_Lang_XsdtLanguage_

	XsdGoPkgHasAttr_Formatid_XsdtString_
}

//	If the WalkHandlers.TxsdIodefDocument function is not nil (ie. was set by outside code), calls it with this TxsdIodefDocument instance as the single argument. Then calls the Walk() method on 1/4 embed(s) and 0/0 field(s) belonging to this TxsdIodefDocument instance.
func (me *TxsdIodefDocument) Walk() (err error) {
	if fn := WalkHandlers.TxsdIodefDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.XsdGoPkgHasElems_Incident.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_IodefDocument struct {
	IodefDocument *TxsdIodefDocument `xml:"urn:ietf:params:xml:ns:iodef-1.0 IODEF-Document"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_IodefDocument function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_IodefDocument instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_IodefDocument instance.
func (me *XsdGoPkgHasElem_IodefDocument) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_IodefDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.IodefDocument.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_IodefDocument struct {
	IodefDocuments []*TxsdIodefDocument `xml:"urn:ietf:params:xml:ns:iodef-1.0 IODEF-Document"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_IodefDocument function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_IodefDocument instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_IodefDocument instance.
func (me *XsdGoPkgHasElems_IodefDocument) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_IodefDocument; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.IodefDocuments {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Incident struct {
	Incident *TxsdIncident `xml:"urn:ietf:params:xml:ns:iodef-1.0 Incident"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Incident function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Incident instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Incident instance.
func (me *XsdGoPkgHasElem_Incident) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Incident; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Incident.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_AlternativeID struct {
	AlternativeIDs []*TxsdAlternativeID `xml:"urn:ietf:params:xml:ns:iodef-1.0 AlternativeID"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_AlternativeID function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_AlternativeID instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_AlternativeID instance.
func (me *XsdGoPkgHasElems_AlternativeID) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_AlternativeID; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.AlternativeIDs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_RelatedActivity struct {
	RelatedActivities []*TxsdRelatedActivity `xml:"urn:ietf:params:xml:ns:iodef-1.0 RelatedActivity"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_RelatedActivity function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_RelatedActivity instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_RelatedActivity instance.
func (me *XsdGoPkgHasElems_RelatedActivity) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_RelatedActivity; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.RelatedActivities {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_AdditionalData struct {
	AdditionalData *TExtensionType `xml:"urn:ietf:params:xml:ns:iodef-1.0 AdditionalData"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_AdditionalData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_AdditionalData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_AdditionalData instance.
func (me *XsdGoPkgHasElem_AdditionalData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_AdditionalData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.AdditionalData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ContactName struct {
	ContactNames []*TMLStringType `xml:"urn:ietf:params:xml:ns:iodef-1.0 ContactName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ContactName function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ContactName instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ContactName instance.
func (me *XsdGoPkgHasElems_ContactName) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ContactName; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ContactNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RegistryHandle struct {
	RegistryHandle *TxsdRegistryHandle `xml:"urn:ietf:params:xml:ns:iodef-1.0 RegistryHandle"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RegistryHandle function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RegistryHandle instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RegistryHandle instance.
func (me *XsdGoPkgHasElem_RegistryHandle) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RegistryHandle; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RegistryHandle.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PostalAddress struct {
	PostalAddresses []*TxsdPostalAddress `xml:"urn:ietf:params:xml:ns:iodef-1.0 PostalAddress"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PostalAddress function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PostalAddress instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PostalAddress instance.
func (me *XsdGoPkgHasElems_PostalAddress) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PostalAddress; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.PostalAddresses {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Email struct {
	Email *TContactMeansType `xml:"urn:ietf:params:xml:ns:iodef-1.0 Email"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Email function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Email instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Email instance.
func (me *XsdGoPkgHasElem_Email) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Email; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Email.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Telephone struct {
	Telephone *TContactMeansType `xml:"urn:ietf:params:xml:ns:iodef-1.0 Telephone"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Telephone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Telephone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Telephone instance.
func (me *XsdGoPkgHasElem_Telephone) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Telephone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Telephone.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Fax struct {
	Faxs []*TContactMeansType `xml:"urn:ietf:params:xml:ns:iodef-1.0 Fax"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Fax function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Fax instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Fax instance.
func (me *XsdGoPkgHasElems_Fax) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Fax; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Faxs {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DateTime struct {
	DateTimes []xsdt.DateTime `xml:"urn:ietf:params:xml:ns:iodef-1.0 DateTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DateTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DateTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DateTime instance.
func (me *XsdGoPkgHasElems_DateTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DateTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReportTime struct {
	ReportTimes []xsdt.DateTime `xml:"urn:ietf:params:xml:ns:iodef-1.0 ReportTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReportTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReportTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReportTime instance.
func (me *XsdGoPkgHasElems_ReportTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReportTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_DetectTime struct {
	DetectTimes []xsdt.DateTime `xml:"urn:ietf:params:xml:ns:iodef-1.0 DetectTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_DetectTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_DetectTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_DetectTime instance.
func (me *XsdGoPkgHasElems_DetectTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_DetectTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_StartTime struct {
	StartTimes []xsdt.DateTime `xml:"urn:ietf:params:xml:ns:iodef-1.0 StartTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_StartTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_StartTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_StartTime instance.
func (me *XsdGoPkgHasElems_StartTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_StartTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_EndTime struct {
	EndTimes []xsdt.DateTime `xml:"urn:ietf:params:xml:ns:iodef-1.0 EndTime"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_EndTime function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_EndTime instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_EndTime instance.
func (me *XsdGoPkgHasElems_EndTime) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_EndTime; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Timezone struct {
	Timezones []TimezoneType `xml:"urn:ietf:params:xml:ns:iodef-1.0 Timezone"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Timezone function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Timezone instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Timezone instance.
func (me *XsdGoPkgHasElems_Timezone) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Timezone; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_History struct {
	Histories []*TxsdHistory `xml:"urn:ietf:params:xml:ns:iodef-1.0 History"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_History function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_History instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_History instance.
func (me *XsdGoPkgHasElems_History) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_History; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Histories {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_HistoryItem struct {
	HistoryItem *TxsdHistoryItem `xml:"urn:ietf:params:xml:ns:iodef-1.0 HistoryItem"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_HistoryItem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_HistoryItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_HistoryItem instance.
func (me *XsdGoPkgHasElem_HistoryItem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_HistoryItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.HistoryItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Expectation struct {
	Expectation *TxsdExpectation `xml:"urn:ietf:params:xml:ns:iodef-1.0 Expectation"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Expectation function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Expectation instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Expectation instance.
func (me *XsdGoPkgHasElem_Expectation) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Expectation; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Expectation.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Method struct {
	Method *TxsdMethod `xml:"urn:ietf:params:xml:ns:iodef-1.0 Method"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Method function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Method instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Method instance.
func (me *XsdGoPkgHasElem_Method) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Method; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Method.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Reference struct {
	Reference *TxsdReference `xml:"urn:ietf:params:xml:ns:iodef-1.0 Reference"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Reference function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Reference instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Reference instance.
func (me *XsdGoPkgHasElem_Reference) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Reference; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Reference.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Impact struct {
	Impact *TxsdImpact `xml:"urn:ietf:params:xml:ns:iodef-1.0 Impact"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Impact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Impact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Impact instance.
func (me *XsdGoPkgHasElem_Impact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Impact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Impact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_TimeImpact struct {
	TimeImpact *TxsdTimeImpact `xml:"urn:ietf:params:xml:ns:iodef-1.0 TimeImpact"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_TimeImpact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_TimeImpact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_TimeImpact instance.
func (me *XsdGoPkgHasElem_TimeImpact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_TimeImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.TimeImpact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_MonetaryImpact struct {
	MonetaryImpact *TxsdMonetaryImpact `xml:"urn:ietf:params:xml:ns:iodef-1.0 MonetaryImpact"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_MonetaryImpact function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_MonetaryImpact instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_MonetaryImpact instance.
func (me *XsdGoPkgHasElem_MonetaryImpact) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_MonetaryImpact; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.MonetaryImpact.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Confidence struct {
	Confidences []*TxsdConfidence `xml:"urn:ietf:params:xml:ns:iodef-1.0 Confidence"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Confidence function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Confidence instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Confidence instance.
func (me *XsdGoPkgHasElems_Confidence) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Confidence; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Confidences {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_EventData struct {
	EventData *TxsdEventData `xml:"urn:ietf:params:xml:ns:iodef-1.0 EventData"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_EventData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_EventData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_EventData instance.
func (me *XsdGoPkgHasElem_EventData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_EventData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.EventData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Flow struct {
	Flow *TxsdFlow `xml:"urn:ietf:params:xml:ns:iodef-1.0 Flow"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Flow function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Flow instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Flow instance.
func (me *XsdGoPkgHasElem_Flow) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Flow; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Flow.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_System struct {
	System *TxsdSystem `xml:"urn:ietf:params:xml:ns:iodef-1.0 System"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_System function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_System instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_System instance.
func (me *XsdGoPkgHasElem_System) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_System; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.System.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Node struct {
	Nodes []*TxsdNode `xml:"urn:ietf:params:xml:ns:iodef-1.0 Node"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Node function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Node instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Node instance.
func (me *XsdGoPkgHasElems_Node) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Node; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Nodes {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Address struct {
	Address *TxsdAddress `xml:"urn:ietf:params:xml:ns:iodef-1.0 Address"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Address function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Address instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Address instance.
func (me *XsdGoPkgHasElem_Address) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Address; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Address.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Location struct {
	Locations []*TMLStringType `xml:"urn:ietf:params:xml:ns:iodef-1.0 Location"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Location function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Location instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Location instance.
func (me *XsdGoPkgHasElems_Location) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Location; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Locations {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NodeRole struct {
	NodeRole *TxsdNodeRole `xml:"urn:ietf:params:xml:ns:iodef-1.0 NodeRole"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NodeRole function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NodeRole instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NodeRole instance.
func (me *XsdGoPkgHasElem_NodeRole) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NodeRole; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NodeRole.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Service struct {
	Service *TxsdService `xml:"urn:ietf:params:xml:ns:iodef-1.0 Service"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Service function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Service instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Service instance.
func (me *XsdGoPkgHasElem_Service) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Service; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Service.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Counter struct {
	Counter *TxsdCounter `xml:"urn:ietf:params:xml:ns:iodef-1.0 Counter"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Counter function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Counter instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Counter instance.
func (me *XsdGoPkgHasElem_Counter) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Counter; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Counter.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Record struct {
	Records []*TxsdRecord `xml:"urn:ietf:params:xml:ns:iodef-1.0 Record"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Record function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Record instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Record instance.
func (me *XsdGoPkgHasElems_Record) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Record; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Records {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RecordData struct {
	RecordData *TxsdRecordData `xml:"urn:ietf:params:xml:ns:iodef-1.0 RecordData"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RecordData function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RecordData instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RecordData instance.
func (me *XsdGoPkgHasElem_RecordData) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RecordData; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RecordData.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RecordPattern struct {
	RecordPattern *TxsdRecordPattern `xml:"urn:ietf:params:xml:ns:iodef-1.0 RecordPattern"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RecordPattern function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RecordPattern instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RecordPattern instance.
func (me *XsdGoPkgHasElem_RecordPattern) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RecordPattern; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RecordPattern.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_RecordItem struct {
	RecordItem *TExtensionType `xml:"urn:ietf:params:xml:ns:iodef-1.0 RecordItem"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_RecordItem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_RecordItem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_RecordItem instance.
func (me *XsdGoPkgHasElem_RecordItem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_RecordItem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.RecordItem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_Application struct {
	Applications []*TSoftwareType `xml:"urn:ietf:params:xml:ns:iodef-1.0 Application"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_Application function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_Application instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_Application instance.
func (me *XsdGoPkgHasElems_Application) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_Application; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.Applications {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_OperatingSystem struct {
	OperatingSystem *TSoftwareType `xml:"urn:ietf:params:xml:ns:iodef-1.0 OperatingSystem"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_OperatingSystem function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_OperatingSystem instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_OperatingSystem instance.
func (me *XsdGoPkgHasElem_OperatingSystem) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_OperatingSystem; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.OperatingSystem.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_Description struct {
	Description *TMLStringType `xml:"urn:ietf:params:xml:ns:iodef-1.0 Description"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_Description function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_Description instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_Description instance.
func (me *XsdGoPkgHasElem_Description) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_Description; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.Description.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProtoFieldsequenceServiceschema_ProtoField_XsdtInteger_ struct {
	ProtoFields []xsdt.Integer `xml:"urn:ietf:params:xml:ns:iodef-1.0 ProtoField"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProtoFieldsequenceServiceschema_ProtoField_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProtoFieldsequenceServiceschema_ProtoField_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProtoFieldsequenceServiceschema_ProtoField_XsdtInteger_ instance.
func (me *XsdGoPkgHasElems_ProtoFieldsequenceServiceschema_ProtoField_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProtoFieldsequenceServiceschema_ProtoField_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProtoTypesequenceServiceschema_ProtoType_XsdtInteger_ struct {
	ProtoTypes []xsdt.Integer `xml:"urn:ietf:params:xml:ns:iodef-1.0 ProtoType"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProtoTypesequenceServiceschema_ProtoType_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProtoTypesequenceServiceschema_ProtoType_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProtoTypesequenceServiceschema_ProtoType_XsdtInteger_ instance.
func (me *XsdGoPkgHasElems_ProtoTypesequenceServiceschema_ProtoType_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProtoTypesequenceServiceschema_ProtoType_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_ struct {
	ReferenceNames []TMLStringType `xml:"urn:ietf:params:xml:ns:iodef-1.0 ReferenceName"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_ instance.
func (me *XsdGoPkgHasElems_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		for _, x := range me.ReferenceNames {
			if err = x.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElem_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_ struct {
	NodeName *TMLStringType `xml:"urn:ietf:params:xml:ns:iodef-1.0 NodeName"`
}

//	If the WalkHandlers.XsdGoPkgHasElem_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElem_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 1/1 field(s) belonging to this XsdGoPkgHasElem_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_ instance.
func (me *XsdGoPkgHasElem_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElem_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if err = me.NodeName.Walk(); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
			return
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_ProtoCodesequenceServiceschema_ProtoCode_XsdtInteger_ struct {
	ProtoCodes []xsdt.Integer `xml:"urn:ietf:params:xml:ns:iodef-1.0 ProtoCode"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_ProtoCodesequenceServiceschema_ProtoCode_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_ProtoCodesequenceServiceschema_ProtoCode_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_ProtoCodesequenceServiceschema_ProtoCode_XsdtInteger_ instance.
func (me *XsdGoPkgHasElems_ProtoCodesequenceServiceschema_ProtoCode_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_ProtoCodesequenceServiceschema_ProtoCode_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_ struct {
	Ports []*xsdt.Integer `xml:"urn:ietf:params:xml:ns:iodef-1.0 Port"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_ instance.
func (me *XsdGoPkgHasElems_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

type XsdGoPkgHasElems_PortlistchoicesequenceServiceschema_Portlist_TPortlistType_ struct {
	Portlists []TPortlistType `xml:"urn:ietf:params:xml:ns:iodef-1.0 Portlist"`
}

//	If the WalkHandlers.XsdGoPkgHasElems_PortlistchoicesequenceServiceschema_Portlist_TPortlistType_ function is not nil (ie. was set by outside code), calls it with this XsdGoPkgHasElems_PortlistchoicesequenceServiceschema_Portlist_TPortlistType_ instance as the single argument. Then calls the Walk() method on 0/0 embed(s) and 0/1 field(s) belonging to this XsdGoPkgHasElems_PortlistchoicesequenceServiceschema_Portlist_TPortlistType_ instance.
func (me *XsdGoPkgHasElems_PortlistchoicesequenceServiceschema_Portlist_TPortlistType_) Walk() (err error) {
	if fn := WalkHandlers.XsdGoPkgHasElems_PortlistchoicesequenceServiceschema_Portlist_TPortlistType_; me != nil {
		if fn != nil {
			if err = fn(me, true); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
		if fn != nil {
			if err = fn(me, false); xsdt.OnWalkError(&err, &WalkErrors, WalkContinueOnError, WalkOnError) {
				return
			}
		}
	}
	return
}

var (
	//	Set this to false to break a Walk() immediately as soon as the first error is returned by a custom handler function.
	//	If true, Walk() proceeds and accumulates all errors in the WalkErrors slice.
	WalkContinueOnError = true
	//	Contains all errors accumulated during Walk()s. If you're using this, you need to reset this yourself as needed prior to a fresh Walk().
	WalkErrors []error
	//	Your custom error-handling function, if required.
	WalkOnError func(error)
	//	Provides 140 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
	//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
	WalkHandlers = &XsdGoPkgWalkHandlers{}
)

//	Provides 140 strong-typed hooks for your own custom handler functions to be invoked when the Walk() method is called on any instance of any (non-attribute-related) struct type defined in this package.
//	If your custom handler does get called at all for a given struct instance, then it always gets called twice, first with the 'enter' bool argument set to true, then (after having Walk()ed all subordinate struct instances, if any) once again with it set to false.
type XsdGoPkgWalkHandlers struct {
	XsdGoPkgHasElem_Incident                                                                        func(*XsdGoPkgHasElem_Incident, bool) error
	XsdGoPkgHasElems_Node                                                                           func(*XsdGoPkgHasElems_Node, bool) error
	XsdGoPkgHasElems_Flow                                                                           func(*XsdGoPkgHasElems_Flow, bool) error
	XsdGoPkgHasElems_Expectation                                                                    func(*XsdGoPkgHasElems_Expectation, bool) error
	XsdGoPkgHasElems_Record                                                                         func(*XsdGoPkgHasElems_Record, bool) error
	XsdGoPkgHasElem_RecordPattern                                                                   func(*XsdGoPkgHasElem_RecordPattern, bool) error
	XsdGoPkgHasElem_PostalAddress                                                                   func(*XsdGoPkgHasElem_PostalAddress, bool) error
	XsdGoPkgHasElem_Application                                                                     func(*XsdGoPkgHasElem_Application, bool) error
	TxsdExpectation                                                                                 func(*TxsdExpectation, bool) error
	XsdGoPkgHasElem_HistoryItem                                                                     func(*XsdGoPkgHasElem_HistoryItem, bool) error
	TMLStringType                                                                                   func(*TMLStringType, bool) error
	XsdGoPkgHasElem_IncidentID                                                                      func(*XsdGoPkgHasElem_IncidentID, bool) error
	XsdGoPkgHasElem_History                                                                         func(*XsdGoPkgHasElem_History, bool) error
	TxsdMonetaryImpact                                                                              func(*TxsdMonetaryImpact, bool) error
	TxsdAssessment                                                                                  func(*TxsdAssessment, bool) error
	TxsdReference                                                                                   func(*TxsdReference, bool) error
	TxsdEventData                                                                                   func(*TxsdEventData, bool) error
	XsdGoPkgHasElems_Timezone                                                                       func(*XsdGoPkgHasElems_Timezone, bool) error
	XsdGoPkgHasElem_Address                                                                         func(*XsdGoPkgHasElem_Address, bool) error
	TxsdRelatedActivity                                                                             func(*TxsdRelatedActivity, bool) error
	TxsdRecord                                                                                      func(*TxsdRecord, bool) error
	XsdGoPkgHasElem_IodefDocument                                                                   func(*XsdGoPkgHasElem_IodefDocument, bool) error
	XsdGoPkgHasElem_RecordItem                                                                      func(*XsdGoPkgHasElem_RecordItem, bool) error
	XsdGoPkgHasElem_ContactName                                                                     func(*XsdGoPkgHasElem_ContactName, bool) error
	XsdGoPkgHasElems_Email                                                                          func(*XsdGoPkgHasElems_Email, bool) error
	TSoftwareType                                                                                   func(*TSoftwareType, bool) error
	TxsdIodefDocument                                                                               func(*TxsdIodefDocument, bool) error
	XsdGoPkgHasElems_Fax                                                                            func(*XsdGoPkgHasElems_Fax, bool) error
	XsdGoPkgHasElem_TimeImpact                                                                      func(*XsdGoPkgHasElem_TimeImpact, bool) error
	TxsdRegistryHandle                                                                              func(*TxsdRegistryHandle, bool) error
	TxsdAlternativeID                                                                               func(*TxsdAlternativeID, bool) error
	XsdGoPkgHasElem_NodeRole                                                                        func(*XsdGoPkgHasElem_NodeRole, bool) error
	XsdGoPkgHasElems_ProtoFieldsequenceServiceschema_ProtoField_XsdtInteger_                        func(*XsdGoPkgHasElems_ProtoFieldsequenceServiceschema_ProtoField_XsdtInteger_, bool) error
	TxsdImpact                                                                                      func(*TxsdImpact, bool) error
	XsdGoPkgHasElems_RecordItem                                                                     func(*XsdGoPkgHasElems_RecordItem, bool) error
	XsdGoPkgHasElem_PortlistchoicesequenceTxsdServiceServiceschema_Portlist_TPortlistType_          func(*XsdGoPkgHasElem_PortlistchoicesequenceTxsdServiceServiceschema_Portlist_TPortlistType_, bool) error
	XsdGoPkgHasElems_DetectTime                                                                     func(*XsdGoPkgHasElems_DetectTime, bool) error
	XsdGoPkgHasElem_Expectation                                                                     func(*XsdGoPkgHasElem_Expectation, bool) error
	XsdGoPkgHasElem_EventData                                                                       func(*XsdGoPkgHasElem_EventData, bool) error
	XsdGoPkgHasElems_AdditionalData                                                                 func(*XsdGoPkgHasElems_AdditionalData, bool) error
	TxsdHistory                                                                                     func(*TxsdHistory, bool) error
	XsdGoPkgHasElem_Url                                                                             func(*XsdGoPkgHasElem_Url, bool) error
	TxsdRecordPattern                                                                               func(*TxsdRecordPattern, bool) error
	XsdGoPkgHasElems_PostalAddress                                                                  func(*XsdGoPkgHasElems_PostalAddress, bool) error
	XsdGoPkgHasElems_StartTime                                                                      func(*XsdGoPkgHasElems_StartTime, bool) error
	XsdGoPkgHasElem_ReportTime                                                                      func(*XsdGoPkgHasElem_ReportTime, bool) error
	XsdGoPkgHasElem_ProtoTypesequenceTxsdServiceServiceschema_ProtoType_XsdtInteger_                func(*XsdGoPkgHasElem_ProtoTypesequenceTxsdServiceServiceschema_ProtoType_XsdtInteger_, bool) error
	XsdGoPkgHasElem_Reference                                                                       func(*XsdGoPkgHasElem_Reference, bool) error
	XsdGoPkgHasElem_Confidence                                                                      func(*XsdGoPkgHasElem_Confidence, bool) error
	XsdGoPkgHasElems_RecordPattern                                                                  func(*XsdGoPkgHasElems_RecordPattern, bool) error
	XsdGoPkgHasElem_Telephone                                                                       func(*XsdGoPkgHasElem_Telephone, bool) error
	XsdGoPkgHasElems_DateTime                                                                       func(*XsdGoPkgHasElems_DateTime, bool) error
	XsdGoPkgHasElem_Impact                                                                          func(*XsdGoPkgHasElem_Impact, bool) error
	TxsdContact                                                                                     func(*TxsdContact, bool) error
	XsdGoPkgHasElems_Url                                                                            func(*XsdGoPkgHasElems_Url, bool) error
	XsdGoPkgHasElems_Impact                                                                         func(*XsdGoPkgHasElems_Impact, bool) error
	TxsdIncident                                                                                    func(*TxsdIncident, bool) error
	XsdGoPkgHasElems_History                                                                        func(*XsdGoPkgHasElems_History, bool) error
	XsdGoPkgHasElem_Flow                                                                            func(*XsdGoPkgHasElem_Flow, bool) error
	XsdGoPkgHasElem_Fax                                                                             func(*XsdGoPkgHasElem_Fax, bool) error
	TxsdConfidence                                                                                  func(*TxsdConfidence, bool) error
	XsdGoPkgHasElems_Service                                                                        func(*XsdGoPkgHasElems_Service, bool) error
	TxsdSystem                                                                                      func(*TxsdSystem, bool) error
	XsdGoPkgHasElem_MonetaryImpact                                                                  func(*XsdGoPkgHasElem_MonetaryImpact, bool) error
	XsdGoPkgHasElems_ProtoCodesequenceServiceschema_ProtoCode_XsdtInteger_                          func(*XsdGoPkgHasElems_ProtoCodesequenceServiceschema_ProtoCode_XsdtInteger_, bool) error
	XsdGoPkgHasCdata                                                                                func(*XsdGoPkgHasCdata, bool) error
	TxsdFlow                                                                                        func(*TxsdFlow, bool) error
	XsdGoPkgHasElem_RegistryHandle                                                                  func(*XsdGoPkgHasElem_RegistryHandle, bool) error
	XsdGoPkgHasElem_Email                                                                           func(*XsdGoPkgHasElem_Email, bool) error
	TxsdHistoryItem                                                                                 func(*TxsdHistoryItem, bool) error
	XsdGoPkgHasElem_AdditionalData                                                                  func(*XsdGoPkgHasElem_AdditionalData, bool) error
	XsdGoPkgHasElems_Telephone                                                                      func(*XsdGoPkgHasElems_Telephone, bool) error
	XsdGoPkgHasElems_HistoryItem                                                                    func(*XsdGoPkgHasElems_HistoryItem, bool) error
	XsdGoPkgHasElem_DetectTime                                                                      func(*XsdGoPkgHasElem_DetectTime, bool) error
	XsdGoPkgHasElems_Address                                                                        func(*XsdGoPkgHasElems_Address, bool) error
	XsdGoPkgHasElem_ProtoCodesequenceTxsdServiceServiceschema_ProtoCode_XsdtInteger_                func(*XsdGoPkgHasElem_ProtoCodesequenceTxsdServiceServiceschema_ProtoCode_XsdtInteger_, bool) error
	XsdGoPkgHasElems_Incident                                                                       func(*XsdGoPkgHasElems_Incident, bool) error
	XsdGoPkgHasElem_RecordData                                                                      func(*XsdGoPkgHasElem_RecordData, bool) error
	XsdGoPkgHasElems_Application                                                                    func(*XsdGoPkgHasElems_Application, bool) error
	XsdGoPkgHasElems_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_ func(*XsdGoPkgHasElems_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_, bool) error
	XsdGoPkgHasElems_Description                                                                    func(*XsdGoPkgHasElems_Description, bool) error
	XsdGoPkgHasElems_MonetaryImpact                                                                 func(*XsdGoPkgHasElems_MonetaryImpact, bool) error
	XsdGoPkgHasElem_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_                    func(*XsdGoPkgHasElem_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_, bool) error
	XsdGoPkgHasElem_Service                                                                         func(*XsdGoPkgHasElem_Service, bool) error
	XsdGoPkgHasElems_TimeImpact                                                                     func(*XsdGoPkgHasElems_TimeImpact, bool) error
	XsdGoPkgHasElem_Node                                                                            func(*XsdGoPkgHasElem_Node, bool) error
	XsdGoPkgHasElems_RelatedActivity                                                                func(*XsdGoPkgHasElems_RelatedActivity, bool) error
	XsdGoPkgHasElems_ReportTime                                                                     func(*XsdGoPkgHasElems_ReportTime, bool) error
	XsdGoPkgHasElems_Location                                                                       func(*XsdGoPkgHasElems_Location, bool) error
	XsdGoPkgHasElem_Counter                                                                         func(*XsdGoPkgHasElem_Counter, bool) error
	XsdGoPkgHasElem_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_                func(*XsdGoPkgHasElem_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_, bool) error
	XsdGoPkgHasElem_Location                                                                        func(*XsdGoPkgHasElem_Location, bool) error
	XsdGoPkgHasElems_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_                   func(*XsdGoPkgHasElems_PortchoicesequenceTxsdServiceServiceschema_Port_XsdtInteger_, bool) error
	XsdGoPkgHasElems_EndTime                                                                        func(*XsdGoPkgHasElems_EndTime, bool) error
	XsdGoPkgHasElems_ProtoTypesequenceServiceschema_ProtoType_XsdtInteger_                          func(*XsdGoPkgHasElems_ProtoTypesequenceServiceschema_ProtoType_XsdtInteger_, bool) error
	XsdGoPkgHasElems_RegistryHandle                                                                 func(*XsdGoPkgHasElems_RegistryHandle, bool) error
	TExtensionType                                                                                  func(*TExtensionType, bool) error
	TxsdCounter                                                                                     func(*TxsdCounter, bool) error
	XsdGoPkgHasElems_Method                                                                         func(*XsdGoPkgHasElems_Method, bool) error
	XsdGoPkgHasElem_AlternativeID                                                                   func(*XsdGoPkgHasElem_AlternativeID, bool) error
	XsdGoPkgHasElems_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_               func(*XsdGoPkgHasElems_NodeNamechoicesequenceTxsdNodeNodeschema_NodeName_TMLStringType_, bool) error
	TxsdAddress                                                                                     func(*TxsdAddress, bool) error
	XsdGoPkgHasElems_EventData                                                                      func(*XsdGoPkgHasElems_EventData, bool) error
	XsdGoPkgHasElems_IodefDocument                                                                  func(*XsdGoPkgHasElems_IodefDocument, bool) error
	TContactMeansType                                                                               func(*TContactMeansType, bool) error
	XsdGoPkgHasElem_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_  func(*XsdGoPkgHasElem_ReferenceNamesequenceTxsdReferenceReferenceschema_ReferenceName_TMLStringType_, bool) error
	TxsdNodeRole                                                                                    func(*TxsdNodeRole, bool) error
	XsdGoPkgHasElems_NodeRole                                                                       func(*XsdGoPkgHasElems_NodeRole, bool) error
	XsdGoPkgHasElem_Method                                                                          func(*XsdGoPkgHasElem_Method, bool) error
	XsdGoPkgHasElems_PortlistchoicesequenceServiceschema_Portlist_TPortlistType_                    func(*XsdGoPkgHasElems_PortlistchoicesequenceServiceschema_Portlist_TPortlistType_, bool) error
	TxsdMethod                                                                                      func(*TxsdMethod, bool) error
	XsdGoPkgHasElem_EndTime                                                                         func(*XsdGoPkgHasElem_EndTime, bool) error
	TxsdRecordData                                                                                  func(*TxsdRecordData, bool) error
	TxsdNode                                                                                        func(*TxsdNode, bool) error
	XsdGoPkgHasElems_System                                                                         func(*XsdGoPkgHasElems_System, bool) error
	XsdGoPkgHasElem_ProtoFieldsequenceTxsdServiceServiceschema_ProtoField_XsdtInteger_              func(*XsdGoPkgHasElem_ProtoFieldsequenceTxsdServiceServiceschema_ProtoField_XsdtInteger_, bool) error
	XsdGoPkgHasElem_OperatingSystem                                                                 func(*XsdGoPkgHasElem_OperatingSystem, bool) error
	XsdGoPkgHasElems_Assessment                                                                     func(*XsdGoPkgHasElems_Assessment, bool) error
	XsdGoPkgHasElems_ContactName                                                                    func(*XsdGoPkgHasElems_ContactName, bool) error
	TxsdPostalAddress                                                                               func(*TxsdPostalAddress, bool) error
	TIncidentIDType                                                                                 func(*TIncidentIDType, bool) error
	XsdGoPkgHasElem_Record                                                                          func(*XsdGoPkgHasElem_Record, bool) error
	XsdGoPkgHasElems_Confidence                                                                     func(*XsdGoPkgHasElems_Confidence, bool) error
	XsdGoPkgHasElem_DateTime                                                                        func(*XsdGoPkgHasElem_DateTime, bool) error
	XsdGoPkgHasElem_Contact                                                                         func(*XsdGoPkgHasElem_Contact, bool) error
	XsdGoPkgHasElem_Assessment                                                                      func(*XsdGoPkgHasElem_Assessment, bool) error
	XsdGoPkgHasElem_System                                                                          func(*XsdGoPkgHasElem_System, bool) error
	XsdGoPkgHasElem_Description                                                                     func(*XsdGoPkgHasElem_Description, bool) error
	XsdGoPkgHasElem_Timezone                                                                        func(*XsdGoPkgHasElem_Timezone, bool) error
	XsdGoPkgHasElem_RelatedActivity                                                                 func(*XsdGoPkgHasElem_RelatedActivity, bool) error
	TxsdTimeImpact                                                                                  func(*TxsdTimeImpact, bool) error
	XsdGoPkgHasElem_StartTime                                                                       func(*XsdGoPkgHasElem_StartTime, bool) error
	XsdGoPkgHasElems_AlternativeID                                                                  func(*XsdGoPkgHasElems_AlternativeID, bool) error
	XsdGoPkgHasElems_Contact                                                                        func(*XsdGoPkgHasElems_Contact, bool) error
	XsdGoPkgHasElems_IncidentID                                                                     func(*XsdGoPkgHasElems_IncidentID, bool) error
	XsdGoPkgHasElems_Counter                                                                        func(*XsdGoPkgHasElems_Counter, bool) error
	XsdGoPkgHasElems_Reference                                                                      func(*XsdGoPkgHasElems_Reference, bool) error
	XsdGoPkgHasElems_RecordData                                                                     func(*XsdGoPkgHasElems_RecordData, bool) error
	TxsdService                                                                                     func(*TxsdService, bool) error
	XsdGoPkgHasElems_OperatingSystem                                                                func(*XsdGoPkgHasElems_OperatingSystem, bool) error
}
